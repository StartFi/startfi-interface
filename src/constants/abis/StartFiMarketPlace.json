{
  "address": "0x83c45dbf514A801dFd67B3C0Ad2FeBAF364292ea",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_marketPlaceName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_paymentContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reputationContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BidOnAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAucton",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyNow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "sellForEnabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellFor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CreateAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fineFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DeListOffMarketplace",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finefees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DisputeAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FullfillBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ListOnMarketplace",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastReserves",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserves",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserReservesFree",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_addreputationPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "buyerBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellerBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        }
      ],
      "name": "_calcBidDisputeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fineAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "_calcFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "_calcSum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newBase",
          "type": "uint256"
        }
      ],
      "name": "_changeBidPenaltyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newBase",
          "type": "uint256"
        }
      ],
      "name": "_changeDelistFeesPerentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newBase",
          "type": "uint256"
        }
      ],
      "name": "_changeListqualifyAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reputationContract",
          "type": "address"
        }
      ],
      "name": "_changeReputationContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "_changeUtiltiyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "finePayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_deduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feeBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_feeFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "_getAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        }
      ],
      "name": "_getDeListingQualAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fineAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "name": "_getListingFinancialInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "netPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        }
      ],
      "name": "_getListingQualAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "_getStakeAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_paymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_safeTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "_safeTokenTransferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newReservedValue",
          "type": "uint256"
        }
      ],
      "name": "_setUserReserves",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newReserves",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAddition",
          "type": "bool"
        }
      ],
      "name": "_updateUserReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_userReserves",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidPenaltyPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "buyNow",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newBase",
          "type": "uint256"
        }
      ],
      "name": "changeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sellForEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sellFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "deList",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delistAfter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delistFeesPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delistFeesPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "disputeAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "curentReserves",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "fullfillBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "getAuctionBidDetails",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "getListingDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bedEnabeled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "sellForEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getServiceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        }
      ],
      "name": "listOnMarketplace",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listqualifyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listqualifyPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPlaceName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "winnerBid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x57ccdf6ecb23366f1ed8134c0edf7a17f1c7064f5139f11b47e55af30f62c29f",
  "receipt": {
    "to": null,
    "from": "0x7197411E1D0D1f5D0371C1d3c923235408e4859c",
    "contractAddress": "0x83c45dbf514A801dFd67B3C0Ad2FeBAF364292ea",
    "transactionIndex": 0,
    "gasUsed": "3878820",
    "logsBloom": "0x00000000000000000000000200000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000001000000000000000000000000000000010000020000000000000000000800000000000000020000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb7915bb758ad39f2ec93c996d76767514f5a4da8519031e2475f8e3bb544445e",
    "transactionHash": "0x57ccdf6ecb23366f1ed8134c0edf7a17f1c7064f5139f11b47e55af30f62c29f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10724384,
        "transactionHash": "0x57ccdf6ecb23366f1ed8134c0edf7a17f1c7064f5139f11b47e55af30f62c29f",
        "address": "0x83c45dbf514A801dFd67B3C0Ad2FeBAF364292ea",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007197411e1d0d1f5d0371c1d3c923235408e4859c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb7915bb758ad39f2ec93c996d76767514f5a4da8519031e2475f8e3bb544445e"
      }
    ],
    "blockNumber": 10724384,
    "cumulativeGasUsed": "3878820",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "StartFi Market",
    "0x739738eC2C93dFcd8298cAF76ab971aC3Be75a60",
    "0xBA3c85b8F6B2C46D8536808C0657672c115d4ED7",
    "0xDc712adcc2eA0bFb71C7D4EBC0fB3790ab05bFbC"
  ],
  "solcInputHash": "d7256d63cac594ca26265c17604345fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_marketPlaceName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_paymentContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reputationContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidOnAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAucton\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyNow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sellForEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fineFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DeListOffMarketplace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finefees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisputeAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FullfillBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ListOnMarketplace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserReservesFree\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_addreputationPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellerBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"}],\"name\":\"_calcBidDisputeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"_calcFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"_calcSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBase\",\"type\":\"uint256\"}],\"name\":\"_changeBidPenaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBase\",\"type\":\"uint256\"}],\"name\":\"_changeDelistFeesPerentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBase\",\"type\":\"uint256\"}],\"name\":\"_changeListqualifyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reputationContract\",\"type\":\"address\"}],\"name\":\"_changeReputationContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"_changeUtiltiyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"finePayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_deduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"_getAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"}],\"name\":\"_getDeListingQualAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fineAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"_getListingFinancialInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"netPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"}],\"name\":\"_getListingQualAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"_getStakeAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_safeTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_safeTokenTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newReservedValue\",\"type\":\"uint256\"}],\"name\":\"_setUserReserves\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newReserves\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAddition\",\"type\":\"bool\"}],\"name\":\"_updateUserReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_userReserves\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidPenaltyPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBase\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellForEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sellFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"deList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delistAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delistFeesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delistFeesPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"disputeAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curentReserves\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"fullfillBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getAuctionBidDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"getListingDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bedEnabeled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sellForEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"}],\"name\":\"listOnMarketplace\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listqualifyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listqualifyPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlaceName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"winnerBid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eman Herawy, StartFi Team\",\"kind\":\"dev\",\"methods\":{\"_addreputationPoints(address,address,uint256)\":{\"details\":\"this function calls StartFiReputation contract to mint reputation points for both seller and buyer\",\"params\":{\"amount\":\": price\",\"buyer\":\": buyer address\",\"seller\":\": seller address\"},\"returns\":{\"buyerBalance\":\": buyer current reputation balance\",\"sellerBalance\":\": seller current reputation balance\"}},\"_calcBidDisputeFees(uint256)\":{\"details\":\"calculat the platform share when seller call disput\",\"params\":{\"qualifyAmount\":\": seller defind value to be staked in order to participate in a gevin auction\"},\"returns\":{\"fineAmount\":\"the value that the platform will get\",\"remaining\":\"the value that the auction woner will get\"}},\"_calcFees(uint256)\":{\"details\":\"calculat the platform fees\",\"params\":{\"price\":\": item  price\"},\"returns\":{\"fees\":\"the value that the platform will get\"}},\"_changeBidPenaltyPercentage(uint256,uint256)\":{\"details\":\"the formula is (fees * 1000)/base \",\"params\":{\"newBase\":\"the new basefees value to be stored \",\"newFees\":\"the new fees value to be stored \"},\"returns\":{\"percentage\":\"the value of the state variable `_feeFraction`\"}},\"_changeDelistFeesPerentage(uint256,uint256)\":{\"details\":\"the formula is (fees * 1000)/base \",\"params\":{\"newBase\":\"the new basefees value to be stored \",\"newFees\":\"the new fees value to be stored \"},\"returns\":{\"percentage\":\"the value of the state variable `_feeFraction`\"}},\"_changeListqualifyAmount(uint256,uint256)\":{\"details\":\"the formula is (fees * 1000)/base \",\"params\":{\"newBase\":\"the new basefees value to be stored \",\"newFees\":\"the new fees value to be stored \"},\"returns\":{\"percentage\":\"the value of the state variable `_feeFraction`\"}},\"_changeReputationContract(address)\":{\"details\":\"for later on upgrade , if we have\",\"params\":{\"_reputationContract\":\": startfi new reputation contract\"}},\"_changeUtiltiyToken(address)\":{\"details\":\"for later on upgrade , if we have\",\"params\":{\"_token\":\": startfi new utility contract\"}},\"_deduct(address,address,uint256)\":{\"details\":\"this function calls StartFiStakes contract to subtract the user stakes and add that value to the 'to'\",\"params\":{\"amount\":\": value to be deducted from his stakes as a fine\",\"finePayer\":\": fine payer address\",\"to\":\": participant address\"},\"returns\":{\"_0\":\"true if it's done\"}},\"_getAllowance(address)\":{\"details\":\":wrap function to get the total allowed number of tokens that this contract can transfer from the given account \",\"params\":{\"owner\":\": owner address\"},\"returns\":{\"_0\":\"allowed number of tokens that this contract can transfer from the owner account\"}},\"_getDeListingQualAmount(uint256)\":{\"details\":\"calculat the platform fine amount when seller delist before time\",\"params\":{\"listingPrice\":\": item listing price\"},\"returns\":{\"fineAmount\":\"the value that the platform will get\",\"remaining\":\"the value remaing after subtracting the fine\"}},\"_getListingQualAmount(uint256)\":{\"details\":\"calculat the platform fine amount when seller delist before time\",\"params\":{\"listingPrice\":\": item listing price\"},\"returns\":{\"amount\":\"the value that the platform will get\"}},\"_getStakeAllowance(address)\":{\"details\":\"this function calls StartFiStakes contract to get the total staked tokens for 'user' an substract the current reserves to get the total number of free tokens\",\"params\":{\"staker\":\": participant address\"},\"returns\":{\"_0\":\"allowed number of tokens that this contract can transfer from the owner account\"}},\"_safeTokenTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `amount` of token from `from` to `to`.\",\"params\":{\"amount\":\"number of tokens to be transferred See {transferFrom}\",\"from\":\"address representing the previous owner of the token\",\"to\":\"target address that will receive the tokens\"}},\"_setUserReserves(address,uint256)\":{\"details\":\"called to set user reserves\",\"params\":{\"newReservedValue\":\": value to be sored as user reserve\",\"user\":\": participant address\"}},\"_updateUserReserves(address,uint256,bool)\":{\"details\":\"called to increase or decrease user reserves\",\"params\":{\"isAddition\":\": true if we are adding the new value \",\"newReserves\":\": value to be added or substracted\",\"user\":\": participant address\"}},\"bid(bytes32,uint256)\":{\"details\":\"called by dapps to bid on an auction \",\"params\":{\"bidPrice\":\"price \",\"listingId\":\"listing id \"},\"returns\":{\"bidId\":\"bid id\"}},\"buyNow(bytes32,uint256)\":{\"details\":\"called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace   \",\"params\":{\"listingId\":\"listing id \",\"price\":\"gevin price\"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id \"}},\"changeFees(uint256,uint256)\":{\"details\":\"the formula is (fees * 1000)/base \",\"params\":{\"newBase\":\"the new basefees value to be stored \",\"newFees\":\"the new fees value to be stored \"},\"returns\":{\"percentage\":\"the value of the state variable `_feeFraction`\"}},\"createAuction(address,uint256,uint256,uint256,bool,uint256,uint256)\":{\"details\":\"called by dapps to create  new auction \",\"params\":{\"duration\":\"when auction ends\",\"listingPrice\":\"min price \",\"nFTContract\":\"nft contract address\",\"qualifyAmount\":\"amount of token locked as qualify for any bidder wants bid \",\"sellFor\":\"price  to sell with if sellForEnabled=true\",\"sellForEnabled\":\"true if auction enable direct selling\",\"tokenId\":\"token id \"},\"returns\":{\"listId\":\"listing id\"}},\"deList(bytes32)\":{\"details\":\"called by seller through dapps when s/he wants to remove this token from the marketplace   \",\"params\":{\"listingId\":\"listing id \"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id \"}},\"disputeAuction(bytes32)\":{\"details\":\"called by seller through dapps when his/her auction is  not fullfilled after 3 days\",\"params\":{\"listingId\":\"listing id \"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id \"}},\"freeReserves()\":{\"details\":\"called by user through dapps when his/her wants to free his reserved tokens which are no longer in active auction or listing\",\"returns\":{\"curentReserves\":\"user reserves after freeing the unused reservd\"}},\"fullfillBid(bytes32)\":{\"details\":\"called by bidder through dapps when bidder win an auction and wants to pay to get the NFT  \",\"params\":{\"listingId\":\"listing id \"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id \"}},\"getAuctionBidDetails(bytes32,address)\":{\"details\":\"called by dapp or any contract to get info about a given bidder in a listing    \",\"params\":{\"bidder\":\"bidder address\",\"listingId\":\"listing id      \"},\"returns\":{\"bidId\":\"bid id\",\"bidPrice\":\"bid price\",\"nFTContract\":\" nft contract address\",\"tokenId\":\"nft token id\"}},\"getListingDetails(bytes32)\":{\"details\":\"called by dapp or any contract to get info about a gevin listing    \",\"params\":{\"listingId\":\"listing id      \"},\"returns\":{\"bedEnabeled\":\"true if auction enabled  \",\"buyer\":\" nft buyer address\",\"endPrice\":\"purchase price\",\"listingPrice\":\"initial price or minimum price that the seller can accept\",\"qualifyAmount\":\" amount of token locked as qualify for any bidder wants bid \",\"releaseTime\":\" when auction ends\",\"sellFor\":\"if sell for enabled for auction, this should be more than zero\",\"sellForEnabled\":\"true if auction enable direct selling\",\"seller\":\" nft seller address\",\"status\":\"in number {Sold,OnMarket, onAuction,Canceled}\",\"tokenAddress\":\" nft contract address\",\"tokenId\":\"NFT token Id \"}},\"getServiceFee()\":{\"returns\":{\"_0\":\"the value of the state variable `_feeFraction`\"}},\"getUserReserved(address)\":{\"params\":{\"user\":\": participant address\"},\"returns\":{\"_0\":\"the value of user reserves\"}},\"listOnMarketplace(address,uint256,uint256)\":{\"details\":\"called by dapps to list new item \",\"params\":{\"listingPrice\":\"min price \",\"nFTContract\":\"nft contract address\",\"tokenId\":\"token id \"},\"returns\":{\"listId\":\"listing id\"}},\"marketPlaceName()\":{\"returns\":{\"_0\":\"market place name\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"winnerBid(bytes32)\":{\"details\":\"called by dapp or any contract to get info about a winner bid    \",\"params\":{\"listingId\":\"listing id      \"},\"returns\":{\"bidId\":\"bid id\",\"bidPrice\":\"bid price\",\"bidder\":\"bidder address\",\"isPurchased\":\"true if purchased\",\"nFTContract\":\" nft contract address\",\"tokenId\":\"nft token id\"}}},\"title\":\"StartFi MarketPlace desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares    \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_addreputationPoints(address,address,uint256)\":{\"notice\":\"all conditions and checks are made prior to this function. math of point calcualtion is not done yet\"},\"_changeBidPenaltyPercentage(uint256,uint256)\":{\"notice\":\"all conditions and checks are made prior to this function\"},\"_changeDelistFeesPerentage(uint256,uint256)\":{\"notice\":\"all conditions and checks are made prior to this function\"},\"_changeListqualifyAmount(uint256,uint256)\":{\"notice\":\"all conditions and checks are made prior to this function\"},\"_changeReputationContract(address)\":{\"notice\":\"all conditions and checks are made prior to this function\"},\"_changeUtiltiyToken(address)\":{\"notice\":\"all conditions and checks are made prior to this function\"},\"_deduct(address,address,uint256)\":{\"notice\":\"all conditions and checks are made prior to this function\"},\"_setUserReserves(address,uint256)\":{\"notice\":\"all conditions and checks are made prior to this function\"},\"_updateUserReserves(address,uint256,bool)\":{\"notice\":\"all conditions and checks are made prior to this function\"},\"buyNow(bytes32,uint256)\":{\"notice\":\"if auction, the seller must enabe forSale. prices should be more than or equal the listing price\"},\"changeFees(uint256,uint256)\":{\"notice\":\"all conditions and checks are made prior to this function\"},\"deList(bytes32)\":{\"notice\":\"auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine\"},\"disputeAuction(bytes32)\":{\"notice\":\"after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner\"},\"freeReserves()\":{\"notice\":\"this function is greedy, called by user only when s/he wants rather than force the check & updates with every transaction which might be very costly .\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartFiMarketPlace.sol\":\"StartFiMarketPlace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd260defa45bc1bbdf5e6d74298fb2705bf058c3d2beb17fb1158fa1a430c5024\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/MarketPlaceBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./interface/IERC721Royalty.sol\\\";\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  MarketPlace Base\\n * [ desc ] : contract to handle the main functions for any marketplace\\n */\\ncontract MarketPlaceBase is  ERC721Holder {\\n    /******************************************* decalrations go here ********************************************************* */\\n\\n    string private _marketPlaceName;\\n    bytes4   RORALTY_INTERFACE= 0x2a55205a;\\n /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n        string memory _name \\n    )  {\\n        _marketPlaceName = _name;\\n       \\n         \\n    }\\n\\n /******************************************* read state functions go here ********************************************************* */\\n     /**\\n    * \\n    * @dev  interal function to check if any gevin contract has supportsInterface See {IERC165-supportsInterface}.\\n    * @param _NFTContract NFT contract address\\n    * @return true if this NFT contract support royalty, false if not\\n     */\\n function _supportRoyalty(address _NFTContract) view internal  returns (bool) {\\n       try IERC721(_NFTContract).supportsInterface(RORALTY_INTERFACE) returns (bool isRoyaltySupported) {\\n            return isRoyaltySupported;\\n        } catch {\\n            return false;\\n        }\\n }\\n /**\\n    *@notice  only if this contract has royaltyInfo function \\n    *@dev  call the royaltyInfo function in nft contract\\n    *@param _NFTContract NFT contract address\\n    *@param _tokenId token id\\n    *@param _value  token price\\n    *@return issuer original issuer address\\n    *@return _royaltyAmount  the issuer total amount of tokens that he should recieve based on his share\\n     */\\n function _getRoyaltyInfo(address _NFTContract, uint256 _tokenId, uint256 _value) view internal  returns (address issuer, uint256 _royaltyAmount) {\\n       (issuer, _royaltyAmount) =IERC721Royalty(_NFTContract).royaltyInfo( _tokenId,   _value) ;\\n }\\n\\n    /**\\n       * @return market place name\\n      */\\n    function marketPlaceName() external view returns (string memory) {\\n        return _marketPlaceName;\\n    }\\n    \\n    /**\\n    *@param _NFTContract NFT contract address\\n    *@param tokenId token id\\n    * @return the owner of the gevin token id and address\\n     */\\n    function tokenOwner(address _NFTContract, uint256 tokenId) internal view returns (address) {\\n       return IERC721(_NFTContract).ownerOf(tokenId) ;\\n    }\\n\\n    /**\\n\\n     * @dev check if this contract has approved to transfer this erc721 token\\n     *@param _NFTContract NFT contract address\\n     *@param tokenId token id\\n     * @return true if this contract is apporved , false if not\\n     */\\n    function _isTokenApproved(address _NFTContract, uint256 tokenId) internal view returns (bool) {\\n        try IERC721(_NFTContract).getApproved(tokenId) returns (address tokenOperator) {\\n            return tokenOperator == address(this);\\n        } catch {\\n            return false;\\n        }\\n      \\n    }\\n\\n    /**\\n     *@dev See {IERC721-isApprovedForAll}.\\n     *@dev check if this contract has approved to all of this owner's erc721 tokens\\n     *@param _NFTContract NFT contract address\\n     *@param owner token owner\\n     *@return true if this contract is apporved , false if not\\n     */\\n    function _isAllTokenApproved(address _NFTContract,address owner) internal view returns (bool) {\\n        return IERC721(_NFTContract).isApprovedForAll(owner, address(this));\\n    }  \\n\\n      /******************************************* state functions go here ********************************************************* */\\n\\n    \\n    /**\\n        * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n        *\\n        * See {setApprovalForAll}\\n     */\\n     function _changeMarketPlaceName(string memory _name)internal {\\n      _marketPlaceName=_name;  \\n     }\\n  \\n      /**\\n        * @dev  Safely transfers `tokenId` token from `from` to `to`. by calling the base erc721 contract\\n        *@param _NFTContract NFT contract address\\n        *@param tokenId token id\\n        *@param from sender \\n        *@param to recipient\\n        * @return true if it's done\\n        * See {safeTransferFrom}\\n     */\\n    function _safeNFTTransfer(address _NFTContract, uint256 tokenId, address from, address to) internal returns (bool) {\\n       IERC721(_NFTContract). safeTransferFrom( from,  to,  tokenId);\\n       return true;\\n    }\\n\\n\\n\\n}  \\n\\n   \\n\",\"keccak256\":\"0x63241c143be1ba5a78c43d0a7e75158416fb0e3c100e5411a96d447707e48f39\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/MarketPlaceBid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  MarketPlace Bid\\n * [ desc ] : contract handles all the bid related functions for marketplace\\n */\\ncontract MarketPlaceBid  {\\n \\n    // using Address for address;\\n    // using EnumerableSet for EnumerableSet.UintSet;\\n    // using EnumerableSet for EnumerableSet.AddressSet;\\n  struct Bid {\\n        bytes32 bidId;\\n        address nFTContract;\\n        uint256 tokenId;\\n        uint256 bidPrice;\\n        bool isPurchased;\\n       \\n    }\\n  struct WinningBid {\\n        bytes32 bidId;\\n        address bidder;       \\n    }\\n    // lisingId to bid key to bid details \\n  mapping(bytes32 => mapping(address=>Bid)) internal listingBids;\\n  // track the bid latest bid id\\n  mapping (bytes32=>WinningBid) internal bidToListing;\\n\\n\\n /******************************************* read state functions go here ********************************************************* */\\n    /**\\n    * \\n      * @dev   called by dapp or any contract to get info about a winner bid    \\n      * @param listingId listing id      \\n      * @return bidId bid id\\n      * @return bidder bidder address\\n      * @return nFTContract  nft contract address\\n      * @return tokenId nft token id\\n      * @return bidPrice bid price\\n      * @return isPurchased true if purchased\\n     */\\nfunction winnerBid(bytes32 listingId) view external returns (bytes32 bidId, address bidder, address nFTContract,uint256 tokenId,uint256 bidPrice,bool isPurchased ) {\\n  bidId=bidToListing[listingId].bidId;\\n  bidder=bidToListing[listingId].bidder;\\n  nFTContract=listingBids[listingId][bidder].nFTContract;\\n  tokenId=listingBids[listingId][bidder].tokenId;\\n  bidPrice=listingBids[listingId][bidder].bidPrice;\\n  isPurchased=listingBids[listingId][bidder].isPurchased;\\n}\\n    /**\\n    * \\n      * @dev   called by dapp or any contract to get info about a given bidder in a listing    \\n      * @param listingId listing id      \\n      * @param bidder bidder address\\n      * @return bidId bid id\\n      * @return nFTContract  nft contract address\\n      * @return tokenId nft token id\\n      * @return bidPrice bid price\\n     */\\nfunction getAuctionBidDetails(bytes32 listingId,address bidder ) view external returns (bytes32 bidId,  address nFTContract,uint256 tokenId,uint256 bidPrice,bool isPurchased ) {\\n    bidId=listingBids[listingId][bidder].bidId;\\n   nFTContract=listingBids[listingId][bidder].nFTContract;\\n  tokenId=listingBids[listingId][bidder].tokenId;\\n  bidPrice=listingBids[listingId][bidder].bidPrice;\\n  isPurchased=listingBids[listingId][bidder].isPurchased;\\n}\\n /******************************************* change state functions go here ********************************************************* */\\n\\n    /**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  add new bid , update the latest bidder to be his bid\\n    * @param bidId bid id\\n    * @param listingId listing id \\n    * @param tokenAddress nft contract address\\n    * @param bidder bidder address\\n    * @param tokenId token id \\n    * @param bidPrice price \\n    * @return true if it's done \\n     */\\nfunction _bid(bytes32 bidId , bytes32 listingId, address tokenAddress,address bidder, uint256 tokenId, uint256 bidPrice) internal  returns(    bool){\\n \\n            // where bid winner is the last bidder updated\\n            bidToListing[listingId]=WinningBid(bidId, bidder);\\n           listingBids[listingId][bidder]= Bid(bidId,tokenAddress,tokenId,bidPrice,false);\\n           return true;\\n}\\n\\n \\n\\n\\n}  \\n\\n   \\n\",\"keccak256\":\"0xd5ba039570a896c4dfa0053793a6389a6b7f3d1e6f9f7a0cb4bcf1b1feed68fe\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/MarketPlaceListing.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  MarketPlace Listing\\n * [ desc ] : contract handle all item list in marketplace related function\\n */\\ncontract MarketPlaceListing  {\\n  // all fees are in perentage \\n\\n      // delist after 6 month\\n      uint256 public delistAfter= 6*30 days;\\n    constructor(\\n     \\n    )  {\\n      \\n    }\\n    // using Address for address;\\n    // using EnumerableSet for EnumerableSet.UintSet;\\n    // using EnumerableSet for EnumerableSet.AddressSet;\\n  struct Listing {\\n        address nFTContract;\\n        uint256 tokenId;\\n        uint256 listingPrice;\\n        uint256 endPrice;\\n        address seller;\\n        address buyer;\\n        bool bedEnabeled;\\n        bool sellForEnabled;\\n        // only if bed and sell for enabled \\n        uint256 releaseTime;\\n        uint256 qualifyAmount;\\n        uint256 sellFor;\\n        ListingStatus status ;\\n    }\\n    enum ListingStatus {Sold,OnMarket, onAuction,Canceled }\\n    // listing key  to lisitng details \\n   mapping(bytes32=>Listing) internal _tokenListings;\\n  // track the Listinger total amount of Listings\\n  // mapping (address=>uint256) private userTotalListings;\\n  /******************************************* read state functions go here ********************************************************* */\\n /**\\n    * \\n      * @dev   called by dapp or any contract to get info about a gevin listing    \\n      * @param listingId listing id      \\n\\n      * @return tokenAddress  nft contract address\\n      * @return tokenId NFT token Id \\n      * @return listingPrice initial price or minimum price that the seller can accept\\n      * @return endPrice purchase price\\n      * @return seller  nft seller address\\n      * @return buyer  nft buyer address\\n      * @return bedEnabeled true if auction enabled  \\n      * @return sellForEnabled true if auction enable direct selling\\n      * @return releaseTime  when auction ends\\n      * @return qualifyAmount  amount of token locked as qualify for any bidder wants bid \\n      * @return sellFor if sell for enabled for auction, this should be more than zero\\n      * @return status in number {Sold,OnMarket, onAuction,Canceled}\\n     */\\nfunction getListingDetails(bytes32 listingId ) view external returns ( address tokenAddress,        uint256 tokenId,uint256 listingPrice,uint256 endPrice,address seller,address buyer,bool bedEnabeled,bool sellForEnabled,uint256 releaseTime,uint256 qualifyAmount,uint256 sellFor,uint status ) {\\n      tokenAddress=_tokenListings[listingId].nFTContract ;\\n      tokenId=_tokenListings[listingId].tokenId ;\\n      listingPrice=_tokenListings[listingId].listingPrice ;\\n      endPrice=_tokenListings[listingId]. endPrice;\\n      seller=_tokenListings[listingId]. seller;\\n      buyer=_tokenListings[listingId].buyer ;\\n      bedEnabeled=_tokenListings[listingId].bedEnabeled ;\\n      sellForEnabled=_tokenListings[listingId].sellForEnabled ;\\n      releaseTime=_tokenListings[listingId]. releaseTime;\\n      qualifyAmount=_tokenListings[listingId].qualifyAmount ;\\n      sellFor=_tokenListings[listingId]. sellFor;\\n      status=uint(_tokenListings[listingId]. status);\\n}\\n// list \\n\\n  /**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  add new item for sale in marketplace  \\n    * @param listId listing id\\n    * @param tokenAddress nft contract address\\n    * @param seller seller address\\n    * @param tokenId token id \\n    * @param listingPrice min price \\n    * @param releaseTime  time to delist for free \\n     * @return true if it's done \\n     */\\nfunction _listOnMarketPlace( \\n        bytes32 listId,\\n        address tokenAddress,\\n        address seller,\\n        uint256 tokenId,\\n        uint256 listingPrice,\\n        uint256 releaseTime\\n         ) internal returns (bool)\\n        {\\n  \\n              _tokenListings[listId]=Listing(tokenAddress,tokenId,listingPrice,0,seller,address(0),\\n              false,false,releaseTime,0,0,ListingStatus.OnMarket);\\n              return true;\\n        }\\n  /**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  add new auction  \\n    * @param listId listing id\\n    * @param tokenAddress nft contract address\\n    * @param seller seller address\\n    * @param tokenId token id \\n    * @param listingPrice min price \\n    * @param sellForEnabled true if auction enable direct selling\\n    * @param sellFor  price  to sell with if sellForEnabled=true\\n    * @param releaseTime  when auction ends\\n    * @param qualifyAmount  amount of token locked as qualify for any bidder wants bid \\n    * @return true if it's done \\n     */\\nfunction _creatAuction( \\n        bytes32 listId,\\n        address tokenAddress,\\n        address seller,\\n        uint256 tokenId,\\n        uint256 listingPrice,     \\n        bool sellForEnabled,\\n        uint256 sellFor,\\n        uint256 releaseTime,\\n        uint256 qualifyAmount\\n        ) internal returns (bool)\\n        {\\n  \\n              _tokenListings[listId]=Listing(tokenAddress,tokenId,listingPrice,0,seller,address(0),\\n              true,sellForEnabled,releaseTime,qualifyAmount,sellFor,ListingStatus.onAuction);\\n              return true;\\n        }\\n        function _finalizeListing(  bytes32 listId,address buyer, ListingStatus status) internal  {\\n          _tokenListings[listId].status=status;\\n          if(buyer!=address(0)){\\n             _tokenListings[listId].buyer=buyer;\\n          }\\n          \\n        }\\n\\n    /**\\n    *  @notice  all conditions and checks are made prior to this function \\n    * @dev  delist an item by mark status as canceled\\n    * @param listingId listing id\\n    *  \\n     */\\n  function _deList(bytes32 listingId) internal {\\n          _tokenListings[listingId].status=ListingStatus.Canceled;\\n        }\\n\\n /**\\n    *  @notice  all conditions and checks are made prior to this function \\n    * @dev  change the duration of which user can delist thier nfts for free after it\\n    * @param duration in seconds , eg 30 days in desconds\\n    *  \\n     */\\n  function _changeDelistAfter(uint256 duration) internal {\\n         delistAfter =duration;\\n        }\\n\\n}  \\n\\n   \\n\",\"keccak256\":\"0x37476ba45fba518256eed8d1393b87d817971367471aff49eb8e055aada4342a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartFiMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\nimport \\\"./StartfiMarketPlaceFinance.sol\\\";\\nimport \\\"./MarketPlaceListing.sol\\\";\\nimport \\\"./MarketPlaceBid.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title StartFi MarketPlace\\n *desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares   \\n * \\n */\\ncontract StartFiMarketPlace is  Ownable ,Pausable, MarketPlaceListing, MarketPlaceBid,StartfiMarketPlaceFinance {\\n  \\n  /******************************************* decalrations go here ********************************************************* */\\n // TODO: to be updated ( using value or percentage?? develop function to ready and update the value)\\nuint256 minQualifyAmount =10;\\n\\n// events when auction created auction bid auction cancled auction fullfiled item listed , item purchesed , itme delisted , item delist with deduct , item  disputed , user free reserved , \\n///\\nevent ListOnMarketplace(  bytes32 listId,address nFTContract,address buyer,uint256 tokenId,uint256 listingPrice,uint256 releaseTime,uint256 qualifyAmount,   uint256 timestamp );\\nevent DeListOffMarketplace(  bytes32 listId,address nFTContract,address owner,uint256 tokenId,uint256 fineFees, uint256 remaining,uint256 releaseTime,  uint256 timestamp );\\n\\nevent CreateAuction(   bytes32 listId,address nFTContract,address seller,uint256 tokenId,uint256 listingPrice,bool sellForEnabled,uint256 sellFor,uint256 releaseTime,uint256 qualifyAmount,uint256 timestamp );\\n\\nevent BidOnAuction(bytes32 bidId , bytes32 listingId, address tokenAddress,address bidder, uint256 tokenId, uint256 bidPrice,uint256 timestamp );\\n \\n event FullfillBid(bytes32 bidId , bytes32 listingId, address tokenAddress,address bidder, uint256 tokenId, uint256 bidPrice,address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice ,uint256 timestamp );\\n\\n event DisputeAuction(bytes32 bidId , bytes32 listingId, address tokenAddress,address bidder, uint256 tokenId  ,address seller,uint256 qualifyAmount, uint256 remaining,uint256 finefees,uint256 timestamp );\\n\\n event BuyNow(  bytes32 listId,address nFTContract,address buyer,uint256 tokenId,uint256 sellingPrice,address seller,bool isAucton,address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice,   uint256 timestamp );\\nevent UserReservesFree(address user, uint256 lastReserves,uint256 newReserves,uint256 timestamp );\\n\\n\\n\\n\\n /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n          string memory _marketPlaceName,\\n          address _paymentContract,\\n          address _stakeContract,\\n           address _reputationContract\\n    )   StartfiMarketPlaceFinance(_marketPlaceName,_paymentContract,_reputationContract){\\n       stakeContract=_stakeContract;\\n    }\\n\\n  /******************************************* modifiers go here ********************************************************* */\\n\\n    modifier isOpenAuction(bytes32 listingId) {\\n        require(  _tokenListings[listingId].releaseTime> block.timestamp && _tokenListings[listingId].status!=ListingStatus.onAuction,\\\"Auction is ended\\\");\\n        _;\\n    }\\n    modifier canFullfillBid(bytes32 listingId) {\\n        require(  _tokenListings[listingId].releaseTime< block.timestamp && _tokenListings[listingId].status!=ListingStatus.onAuction,\\\"Auction is ended\\\");\\n        _;\\n    }\\n    modifier isOpenForSale(bytes32 listingId) {\\n        require(_tokenListings[listingId].status==ListingStatus.OnMarket,\\\"Item is not for sale\\\");\\n        _;\\n    }\\nmodifier isNotZero(uint256 val) {\\n    require(val>0,\\\"Zero Value is not allowed\\\");\\n    _;\\n}\\n\\n  /******************************************* read state functions go here ********************************************************* */\\n\\n  /******************************************* state functions go here ********************************************************* */\\n\\n// list\\n     /**\\n    * @dev  called by dapps to list new item \\n    * @param nFTContract nft contract address\\n    * @param tokenId token id \\n    * @param listingPrice min price \\n     * @return listId listing id\\n     */\\n    function listOnMarketplace( address nFTContract,\\n          uint256 tokenId,\\n            uint256 listingPrice ) external isNotZero(listingPrice) returns (bytes32 listId) {\\n            uint256 releaseTime = _calcSum(block.timestamp,delistAfter);\\n            listId = keccak256(abi.encodePacked(nFTContract,tokenId,_msgSender(),releaseTime));\\n            // calc qualified ammount\\n            uint256 listQualifyAmount =_getListingQualAmount(listingPrice);\\n\\n          // check that sender is qualified \\n          require(_getStakeAllowance(_msgSender()/*, 0*/)>= listQualifyAmount,\\\"Not enough reserves\\\");\\n          require( _isTokenApproved(nFTContract,  tokenId) ,\\\"Marketplace is not allowed to transfer your token\\\");\\n\\n            // transfer token to contract \\n          require( _safeNFTTransfer(nFTContract,tokenId,_msgSender(),address(this)),\\\"NFT token couldn't be transfered\\\");\\n\\n          // update reserved\\n            _updateUserReserves(_msgSender() ,listQualifyAmount,true);\\n            bytes32  [] storage listings = userListing[_msgSender()];\\n            listings.push(listId);\\n            userListing[_msgSender()]=listings;\\n          // list \\n          require(_listOnMarketPlace( listId,nFTContract,_msgSender(),tokenId,listingPrice,releaseTime) ,\\\"Couldn't list the item\\\");\\n          emit ListOnMarketplace( listId,nFTContract,_msgSender(),tokenId,listingPrice,releaseTime,listQualifyAmount, block.timestamp);\\n        \\n    }\\n// create auction\\n  /**\\n    * @dev  called by dapps to create  new auction \\n    * @param nFTContract nft contract address\\n    * @param tokenId token id \\n    * @param listingPrice min price \\n    * @param qualifyAmount  amount of token locked as qualify for any bidder wants bid \\n    * @param sellForEnabled true if auction enable direct selling\\n    * @param sellFor  price  to sell with if sellForEnabled=true\\n    * @param duration  when auction ends\\n    * @return listId listing id\\n     */\\n    function createAuction( address nFTContract,\\n          uint256 tokenId,\\n            uint256 listingPrice,\\n            uint256 qualifyAmount,\\n            bool sellForEnabled,\\n            uint256 sellFor,\\n            uint256 duration\\n            ) external isNotZero(listingPrice) returns (bytes32 listId) {\\n            require(duration>12 hours,\\\"Auction should be live for more than 12 hours\\\");\\n            require(qualifyAmount>=minQualifyAmount,\\\"Invalid Auction qualify Amount\\\");\\n\\n            uint256 releaseTime = _calcSum(block.timestamp,duration);\\n            listId = keccak256(abi.encodePacked(nFTContract,tokenId,_msgSender(),releaseTime));\\n            if(sellForEnabled){\\n              require(sellFor>0,\\\"Zero price is not allowed\\\");\\n            }\\n          // check that sender is qualified \\n            require( _isTokenApproved(nFTContract,  tokenId) ,\\\"Marketplace is not allowed to transfer your token\\\");\\n\\n            // transfer token to contract \\n          require( _safeNFTTransfer(nFTContract,tokenId,_msgSender(),address(this)),\\\"NFT token couldn't be transfered\\\");\\n\\n            // update reserved\\n            // create auction\\n\\n          require(_creatAuction( listId,nFTContract,_msgSender(),tokenId,listingPrice,   sellForEnabled,sellFor,releaseTime,qualifyAmount) ,\\\"Couldn't list the item\\\");\\n           emit CreateAuction( listId,nFTContract,_msgSender(),tokenId,listingPrice,   sellForEnabled,sellFor,releaseTime,qualifyAmount,block.timestamp); \\n        \\n    }\\n      /**\\n    * @dev called by dapps to bid on an auction\\n    * \\n    * @param listingId listing id \\n    * @param bidPrice price \\n    * @return bidId bid id\\n     */\\n    function bid(bytes32 listingId, uint256 bidPrice) \\n        external isOpenAuction(listingId) returns (bytes32 bidId){\\n           address tokenAddress = _tokenListings[listingId].nFTContract;\\n           uint256 tokenId = _tokenListings[listingId].tokenId;\\n         bidId = keccak256(abi.encodePacked(listingId,tokenAddress,_msgSender(),tokenId));\\n         // bid should be more than than the mini and more than the last bid\\n        address lastbidder= bidToListing[listingId].bidder;\\n            uint256 qualifyAmount =  _tokenListings[listingId].qualifyAmount;\\n         if(lastbidder==address(0)){\\n             require(bidPrice>= _tokenListings[listingId].listingPrice,\\\"bid price must be more than or equal the minimum price\\\");\\n\\n         }else{\\n            require(bidPrice>listingBids[listingId][lastbidder].bidPrice,\\\"bid price must be more than the last bid\\\");\\n\\n                          \\n         }\\n         // if this is the bidder first bid, the price will be 0 \\n       uint256 prevAmount= listingBids[listingId][_msgSender()].bidPrice;\\n       if(prevAmount==0){\\n                  // check that he has reserved\\n         require(_getStakeAllowance(_msgSender()/*, 0*/)>= qualifyAmount,\\\"Not enough reserves\\\");\\n          bytes32 [] storage listings = userListing[_msgSender()];\\n            listings.push(listingId);\\n            userListing[_msgSender()]=listings;\\n         // update user reserves\\n         // reserve Zero couldn't be at any case\\n        require( _updateUserReserves(_msgSender() ,qualifyAmount,true)>0,\\\"Reserve Zero is not allowed\\\");\\n       }\\n       \\n         // bid \\n         require(_bid( bidId, listingId,  tokenAddress, _msgSender(),   tokenId,   bidPrice),\\\"Couldn't Bid\\\");\\n         emit BidOnAuction( bidId, listingId,  tokenAddress, _msgSender(),   tokenId,   bidPrice,block.timestamp);\\n     \\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n    /**\\n    * @dev called by bidder through dapps when bidder win an auction and wants to pay to get the NFT \\n    * \\n    * @param listingId listing id \\n    * @return _NFTContract nft contract address\\n    * @return tokenId token id \\n     */\\n    function fullfillBid(bytes32 listingId) \\n        external canFullfillBid(listingId) returns (address _NFTContract,uint256 tokenId){\\n         address winnerBidder= bidToListing[listingId].bidder;\\n          address seller= _tokenListings[listingId].seller;\\n           _NFTContract= _tokenListings[listingId]. nFTContract;\\n           tokenId= _tokenListings[listingId]. tokenId;\\n        require(winnerBidder==_msgSender(),\\\"Caller is not the winner\\\");\\n         // if it's new, the price will be 0 \\n        uint256 bidPrice= listingBids[listingId][winnerBidder].bidPrice;\\n         // check that contract is allowed to transfer tokens \\n         require(_getAllowance(winnerBidder)>= bidPrice,\\\"Marketplace is not allowed to withdraw the required amount of tokens\\\");\\n        // transfer price \\n    \\n        (address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice) = _getListingFinancialInfo( _NFTContract,tokenId, bidPrice) ;\\n      \\n       require(_safeTokenTransferFrom(winnerBidder,owner(), fees),\\\"Couldn't transfer token as fees\\\");\\n       if(issuer!=address(0)){\\n       require(_safeTokenTransferFrom(winnerBidder,issuer, royaltyAmount),\\\"Couldn't transfer token to issuer\\\");\\n       }\\n\\n        // token value could be zero ater taking the roylty share ??? need to ask?\\n        require(_safeTokenTransferFrom(winnerBidder,seller, netPrice),\\\"Couldn't transfer token to buyer\\\");\\n          // trnasfer token\\n        require( _safeNFTTransfer(_NFTContract,tokenId,address(this), winnerBidder),\\\"NFT token couldn't be transfered\\\");\\n         // update user reserves\\n         // reserve nigative couldn't be at any case\\n        require( _updateUserReserves(winnerBidder,_tokenListings[listingId].qualifyAmount,false)>=0,\\\"negative reserve is not allowed\\\");\\n        listingBids[listingId][_msgSender()].isPurchased=true;\\n       // TODO: add reputation points to both seller and buyer\\n              _addreputationPoints(  seller, winnerBidder, bidPrice);\\n      \\n        // finish listing \\n        _finalizeListing(listingId,winnerBidder, ListingStatus.Sold);\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n        emit FullfillBid(  bidToListing[listingId].bidId ,   listingId,   _NFTContract, winnerBidder,  tokenId,  bidPrice,  issuer,  royaltyAmount,   fees,   netPrice ,block.timestamp );\\n    }\\n// delist\\n    /**\\n    * @dev called by seller through dapps when s/he wants to remove this token from the marketplace   \\n    * @notice auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine\\n    * @param listingId listing id \\n    * @return _NFTContract nft contract address\\n    * @return tokenId token id \\n     */\\n    function deList(bytes32 listingId) \\n        external  returns ( address _NFTContract,uint256 tokenId){\\n        ListingStatus status= _tokenListings[listingId].status;\\n        address buyer = _tokenListings[listingId].buyer;\\n        address owner= _tokenListings[listingId].seller;\\n        _NFTContract= _tokenListings[listingId]. nFTContract;\\n         uint256 releaseTime= _tokenListings[listingId]. releaseTime;\\n         uint256 listingPrice= _tokenListings[listingId]. listingPrice;\\n         tokenId= _tokenListings[listingId]. tokenId;\\n         require(owner==_msgSender(),\\\"Caller is not the owner\\\");\\n         require(buyer==address(0),\\\"Already bought token\\\");\\n      uint256 timeToDelistAuction= _calcSum( releaseTime,3 days);\\n\\n        // require(status==ListingStatus.OnMarket || status==ListingStatus.onAuction,\\\"Already bought or canceled token\\\");\\n        require((timeToDelistAuction<=block.timestamp && status==ListingStatus.onAuction)|| (status==ListingStatus.OnMarket),\\\"Can't delist\\\");\\n        uint256 fineAmount ;\\n         uint256 remaining;\\n        // if realse time < now , pay \\n\\n        if(releaseTime<block.timestamp){\\n          // if it's not auction ? pay, \\n         ( fineAmount ,  remaining)= _getDeListingQualAmount(listingPrice);\\n              //TODO: deduct the fine from his stake contract \\n            \\n               require(_deduct(owner,getAdminWallet(), fineAmount),\\\"couldn't deduct the fine\\\");\\n        }else{\\n       remaining=  _getListingQualAmount( listingPrice);\\n        }\\n\\n        // trnasfer token\\n        require( _safeNFTTransfer(_NFTContract,tokenId,address(this), owner),\\\"NFT token couldn't be transfered\\\");\\n         // update user reserves\\n         // reserve nigative couldn't be at any case\\n        require( _updateUserReserves(_msgSender() ,remaining,false)>=0,\\\"negative reserve is not allowed\\\");\\n        // finish listing \\n         _finalizeListing(listingId,address(0),ListingStatus.Canceled);\\n         emit DeListOffMarketplace(listingId,  _NFTContract,  owner,  tokenId,  fineAmount ,  remaining,  releaseTime,  block.timestamp );\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n\\n\\n// buynow\\n /**\\n    * @dev called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace   \\n    * @notice  if auction, the seller must enabe forSale. prices should be more than or equal the listing price\\n    * @param listingId listing id \\n    * @param price gevin price\\n    * @return _NFTContract nft contract address\\n    * @return tokenId token id \\n     */\\n    function buyNow(bytes32 listingId, uint256 price) \\n        external  returns (address _NFTContract,uint256 tokenId){\\n          bool sellForEnabled= _tokenListings[listingId].sellForEnabled;\\n         address seller= _tokenListings[listingId].seller;\\n           _NFTContract= _tokenListings[listingId]. nFTContract;\\n           tokenId= _tokenListings[listingId]. tokenId;\\n         require(price>=_tokenListings[listingId]. listingPrice,\\\"Invalid price\\\");\\n        require(_tokenListings[listingId].status==ListingStatus.OnMarket || (_tokenListings[listingId].status==ListingStatus.onAuction && sellForEnabled==true && _tokenListings[listingId].releaseTime> block.timestamp ),\\\"Token isnot for sale \\\");\\n         // check that contract is allowed to transfer tokens \\n         require(_getAllowance(_msgSender())>= price,\\\"Marketplace is not allowed to withdraw the required amount of tokens\\\");\\n        // transfer price \\n    \\n        (address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice) = _getListingFinancialInfo( _NFTContract,tokenId, price) ;\\n      \\n       require(_safeTokenTransferFrom(_msgSender(),owner(), fees),\\\"Couldn't transfer token as fees\\\");\\n       if(issuer!=address(0)){\\n       require(_safeTokenTransferFrom(_msgSender(),issuer, royaltyAmount),\\\"Couldn't transfer token to issuer\\\");\\n       }\\n\\n        // token value could be zero ater taking the roylty share ??? need to ask?\\n        require(_safeTokenTransferFrom(_msgSender(),seller, netPrice),\\\"Couldn't transfer token to seller\\\");\\n          // trnasfer token\\n        require( _safeNFTTransfer(_NFTContract,tokenId,address(this), _msgSender()),\\\"NFT token couldn't be transfered\\\");\\n           uint256 ListingQualAmount =  _getListingQualAmount( _tokenListings[listingId]. listingPrice);\\n\\n            require( _updateUserReserves(seller ,ListingQualAmount,false)>=0,\\\"negative reserve is not allowed\\\");\\n\\n        // finish listing \\n        _finalizeListing(listingId,_msgSender(), ListingStatus.Sold);\\n             // TODO: add reputation points to both seller and buyer\\n        _addreputationPoints(  seller, _msgSender(), price);\\n      emit BuyNow  (listingId,_NFTContract, _msgSender() ,  tokenId,  price,seller,sellForEnabled,  issuer,  royaltyAmount,   fees,   netPrice,   block. timestamp );\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n\\n /**\\n    * @dev called by seller through dapps when his/her auction is  not fullfilled after 3 days\\n    *  @notice  after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner\\n    * @param listingId listing id \\n    * @return _NFTContract nft contract address\\n    * @return tokenId token id \\n     */\\n    function disputeAuction(bytes32 listingId) \\n        external  returns (address _NFTContract,uint256 tokenId){\\n         address winnerBidder= bidToListing[listingId].bidder;\\n         address seller= _tokenListings[listingId].seller;\\n           _NFTContract= _tokenListings[listingId]. nFTContract;\\n           tokenId= _tokenListings[listingId]. tokenId;\\n           uint256 qualifyAmount =  _tokenListings[listingId].qualifyAmount;\\n            uint256 timeToDispute= _calcSum(_tokenListings[listingId]. releaseTime,3 days);\\n         require(winnerBidder!=address(0) && timeToDispute>=block.timestamp,\\\"No bids or still running auction\\\");\\n       require(seller==_msgSender(),\\\"Caller is not the owner\\\");\\n      require(!listingBids[listingId][winnerBidder].isPurchased,\\\"Already purchased\\\");\\n          // call staking contract to deduct \\n        (uint256 fineAmount ,uint256  remaining)= _calcBidDisputeFees(qualifyAmount);\\n        require(_deduct(winnerBidder,getAdminWallet(), fineAmount),\\\"couldn't deduct the fine for the admin wallet\\\");\\n        require(_deduct(winnerBidder, seller, remaining),\\\"couldn't deduct the fine for the admin wallet\\\");\\n           // trnasfer token\\n        require( _safeNFTTransfer(_NFTContract,tokenId,address(this),seller),\\\"NFT token couldn't be transfered\\\");\\n            require( _updateUserReserves(winnerBidder ,qualifyAmount,false)>=0,\\\"negative reserve is not allowed\\\");\\n\\n        // finish listing \\n         _finalizeListing(listingId,address(0),ListingStatus.Canceled);\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n         emit DisputeAuction(  bidToListing[listingId].bidId ,   listingId,  _NFTContract ,winnerBidder,   tokenId,    seller,  qualifyAmount, remaining,  fineAmount, block. timestamp );\\n\\n    }\\n\\n     /**\\n    * @dev called by user through dapps when his/her wants to free his reserved tokens which are no longer in active auction or listing\\n    *  @notice this function is greedy, called by user only when s/he wants rather than force the check & updates with every transaction which might be very costly .\\n  \\n    * @return curentReserves user reserves after freeing the unused reservd\\n\\n     */\\n\\n    function freeReserves() external returns (uint256 curentReserves) {\\n      // TODo: Check allternative for gas consumptions\\n      // iterate over the listng key map \\n      // if it's sold, canceled,  free if he is participating on this listing\\n            uint256 lastReserves =userReserves[_msgSender()];\\n            bytes32 [] memory listings = userListing[_msgSender()];\\n            delete userListing[_msgSender()];\\n            bytes32 [] storage newListings = userListing[_msgSender()]  ;\\n             \\n\\n            // loop\\n        for (uint256 index = 0; index < listings.length; index++) {\\n        if( _tokenListings[ listings[index]].status==ListingStatus.onAuction){\\n              newListings.push(listings[index]);\\n              curentReserves = _calcSum(curentReserves,_tokenListings[ listings[index]].qualifyAmount);\\n\\n        }else if ( _tokenListings[ listings[index]].status==ListingStatus.OnMarket){\\n                        newListings.push(listings[index]);\\n                      uint256 listQualifyAmount =_getListingQualAmount(_tokenListings[ listings[index]].listingPrice);\\n\\n                     curentReserves = _calcSum(curentReserves,listQualifyAmount);\\n\\n        }\\n        }       \\n      userListing[_msgSender()]=newListings;\\n      require( _setUserReserves(_msgSender() ,curentReserves),\\\"set reserve faild\\\");\\n      emit UserReservesFree(_msgSender(),  lastReserves,curentReserves,block. timestamp );\\n\\n    }\\n\\n    // ubnormal isssue with calling owner() in deList unction , we have implemented this func as a workaround \\n    function getAdminWallet() view private returns (address) {\\n      return owner() ;\\n    }\\n}\",\"keccak256\":\"0x15b91319d74ba32f58bb2a558cb1ad16233567735346566a3790979f74c8ac25\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartfiMarketPlaceFinance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\nimport \\\"./interface/IStartFiReputation.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./interface/IStartFiStakes.sol\\\";\\nimport \\\"./MarketPlaceBase.sol\\\";\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *desc   contract to handle all financial work for the marketplace\\n * @title Startfi Marketplace Finance\\n */\\ncontract StartfiMarketPlaceFinance is MarketPlaceBase {\\n /******************************************* decalrations go here ********************************************************* */\\n    using SafeMath for uint256;\\n    address public _paymentToken;\\n    uint256 public _feeFraction = 1;\\n    uint256 public _feeBase = 100;\\n    uint256 bidPenaltyPercentage =1;\\n    uint256 public delistFeesPercentage=1;\\n    uint256 public listqualifyPercentage=1;\\n    uint256 public bidPenaltyPercentageBase =100;\\n    uint256 public delistFeesPercentageBase=100;\\n    uint256 public listqualifyPercentageBase=100;\\n   mapping (address=>uint256) userReserves;\\n   mapping (address=>bytes32[]) userListing;\\n   address public stakeContract;\\n   address reputationContract;\\n\\n /******************************************* constructor goes here ********************************************************* */\\n\\n  constructor(\\n        string memory _name ,\\n        address _paymentContract,\\n        address _reputationContract\\n    )   MarketPlaceBase(_name){\\n         \\n       \\n        _paymentToken = _paymentContract;\\n        reputationContract = _reputationContract;\\n\\n      \\n    }\\n\\n\\n  /******************************************* modifiers go here ********************************************************* */\\n\\n\\n\\n  /******************************************* read state functions go here ********************************************************* */\\n    \\n    function _calcSum(uint256 a, uint256 b) pure public returns (uint256 result) {\\n        result= a.add(b);        \\n    }\\n    /**\\n     @dev calculat the platform fees\\n    *@param price  : item  price\\n    *@return fees the value that the platform will get\\n     */\\n    function _calcFees(uint256 price) view public returns (uint256 fees) {\\n\\n        fees= price.mul(_feeFraction).div(_feeBase );    \\n    }\\n    /**\\n     @dev calculat the platform fine amount when seller delist before time\\n    *@param listingPrice  : item listing price\\n    *@return amount the value that the platform will get\\n     */\\n    function _getListingQualAmount(uint256 listingPrice) view public returns (uint256 amount) {\\n        amount= listingPrice.mul(listqualifyPercentage).div( listqualifyPercentageBase);    \\n    }\\n/**\\n     @dev calculat the platform fine amount when seller delist before time\\n    *@param listingPrice  : item listing price\\n    *@return fineAmount the value that the platform will get\\n    *@return remaining the value remaing after subtracting the fine\\n     */\\n    function _getDeListingQualAmount(uint256 listingPrice) view public returns (uint256 fineAmount , uint256 remaining) {\\n        fineAmount= listingPrice.mul(delistFeesPercentage).div( delistFeesPercentageBase);    \\n        remaining =  _getListingQualAmount( listingPrice).sub(fineAmount);\\n    }\\n      /**\\n      @dev calculat the platform share when seller call disput\\n    *@param qualifyAmount  : seller defind value to be staked in order to participate in a gevin auction\\n    * @return fineAmount the value that the platform will get\\n    * @return remaining the value that the auction woner will get\\n     */\\n      function _calcBidDisputeFees(uint256 qualifyAmount) view public returns (uint256 fineAmount , uint256 remaining) {   \\n        fineAmount= qualifyAmount.mul(bidPenaltyPercentage).div( bidPenaltyPercentageBase);    \\n        remaining = qualifyAmount.sub(fineAmount);\\n    }\\n   function _getListingFinancialInfo(address _NFTContract,uint256 tokenId, uint256 bidPrice)  view public returns   (address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice) {\\n             fees = _calcFees(bidPrice);\\n      netPrice = bidPrice.sub(fees);\\n          // royalty check\\n          if(_supportRoyalty(_NFTContract)){\\n               ( issuer, royaltyAmount) =_getRoyaltyInfo( _NFTContract,  tokenId, bidPrice);\\n               if(royaltyAmount>0 && issuer!=address(0)){\\n                   netPrice= netPrice.sub(royaltyAmount);\\n               }\\n          }\\n      \\n   }\\n    /**\\n    *@param user  : participant address\\n    * @return the value of user reserves\\n     */\\n    function getUserReserved(address user) external  view returns (uint256)  {\\n        return userReserves[user];\\n    }\\n     /**\\n    *\\n    * @return the value of the state variable `_feeFraction`\\n     */\\n         function getServiceFee() external view returns (uint256) {\\n        return _feeFraction;\\n    }\\n     /**\\n     * @dev :wrap function to get the total allowed number of tokens that this contract can transfer from the given account \\n\\n    * @param owner: owner address\\n    * @return allowed number of tokens that this contract can transfer from the owner account\\n     */\\n    function _getAllowance(address owner) view public returns (uint256 ) {\\n        return IERC20(_paymentToken).allowance( owner, address(this));\\n    }\\n      /**\\n        * @dev this function calls StartFiStakes contract to get the total staked tokens for 'user' an substract the current reserves to get the total number of free tokens\\n        * @param staker : participant address\\n        * @return allowed number of tokens that this contract can transfer from the owner account\\n      */\\n    function _getStakeAllowance(address staker /*,uint256 prevAmount*/) view public returns (uint256 ) {\\n        // user can bid multi time, we want to make sure we don't calc the old bid as sperated bid \\n        uint256 userActualReserved= userReserves[staker];//.sub(prevAmount);\\n        return IStartFiStakes(stakeContract).getReserves( staker).sub(userActualReserved);\\n    }\\n  \\n\\n      /******************************************* state functions go here ********************************************************* */\\n     /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev this function calls StartFiStakes contract to subtract the user stakes and add that value to the 'to'\\n        * @param finePayer : fine payer address\\n        * @param to : participant address\\n        * @param amount : value to be deducted from his stakes as a fine\\n        * @return true if it's done\\n      */\\n  function _deduct(address finePayer, address to, uint256 amount)  public returns (bool ) {\\n          return IStartFiStakes(stakeContract).deduct(finePayer, to, amount);\\n    }\\n        /**\\n        * @notice  all conditions and checks are made prior to this function. math of point calcualtion is not done yet\\n        * @dev this function calls StartFiReputation contract to mint reputation points for both seller and buyer\\n        * @param seller : seller address\\n        * @param buyer : buyer address\\n        * @param amount : price\\n        * @return buyerBalance : buyer current reputation balance\\n        * @return sellerBalance : seller current reputation balance\\n      */\\n  function _addreputationPoints(address seller, address buyer, uint256 amount)  public returns (uint256 buyerBalance, uint256 sellerBalance ) {\\n         // calc how much pint for both of them ??\\n         // TODO: math and logic for calc the point based on the amount\\n         uint256 sellerPoints=amount.div(2);\\n         uint256 buyerPoints=amount.div(2);\\n          sellerBalance= IStartFiReputation(reputationContract).mintReputation(seller,sellerPoints );\\n          buyerBalance= IStartFiReputation(reputationContract).mintReputation(buyer,buyerPoints );\\n    }\\n    function _safeTokenTransfer(address to, uint256 amount) public returns (bool) {\\n        return IERC20(_paymentToken). transfer( to,  amount);\\n    }\\n        /**\\n        * @dev  Safely transfers `amount` of token from `from` to `to`.\\n        * @param from address representing the previous owner of the token\\n        * @param to target address that will receive the tokens\\n        * @param amount number of tokens to be transferred\\n        * See {transferFrom}\\n     */\\n    function _safeTokenTransferFrom(address from,address to, uint256 amount) public returns (bool) {\\n        return IERC20(_paymentToken). transferFrom(from, to,  amount);\\n    }\\n     /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev called to set user reserves\\n        * @param user : participant address\\n        * @param newReservedValue : value to be sored as user reserve\\n      */\\n    function _setUserReserves(address user, uint256 newReservedValue) public returns (bool) {\\n        userReserves[user]=newReservedValue;\\n        return true;\\n    }\\n          /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev called to increase or decrease user reserves\\n        * @param user : participant address\\n        * @param newReserves : value to be added or substracted\\n        * @param isAddition : true if we are adding the new value \\n     */\\n    function _updateUserReserves(address user, uint256 newReserves, bool isAddition) public returns (uint256 _userReserves) {\\n        _userReserves=  isAddition? userReserves[user].add(newReserves): userReserves[user].sub(newReserves);\\n        userReserves[user]=_userReserves;\\n        return _userReserves;\\n    }\\n\\n    /**\\n    *   * @notice  all conditions and checks are made prior to this function\\n        * @dev  the formula is (fees * 1000)/base \\n        * @param newFees  the new fees value to be stored \\n        * @param newBase  the new basefees value to be stored \\n        * @return percentage the value of the state variable `_feeFraction`\\n     */\\n     function changeFees(uint256 newFees, uint256 newBase) public returns (uint256 percentage) {\\n        require(newFees <= newBase, \\\"Fee fraction exceeded base.\\\");\\n          percentage = (newFees. mul( 1000)) .div( newBase);\\n        require(percentage <= 30 && percentage < 10, \\\"Percentage should be from 1-3 %\\\");\\n\\n        _feeFraction = newFees;\\n        _feeBase = newBase;\\n     }\\n     \\n      /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev for later on upgrade , if we have\\n        * @param _token : startfi new utility contract\\n     */\\nfunction _changeUtiltiyToken(address _token) public {\\n      _paymentToken=_token;  \\n     }\\n      /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev for later on upgrade , if we have\\n        * @param _reputationContract : startfi new reputation contract\\n     */\\nfunction _changeReputationContract(address _reputationContract) public {\\n      reputationContract=_reputationContract;  \\n     }\\n/**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  the formula is (fees * 1000)/base \\n    * @param newFees  the new fees value to be stored \\n    * @param newBase  the new basefees value to be stored \\n    * @return percentage the value of the state variable `_feeFraction`\\n*/\\nfunction _changeBidPenaltyPercentage(uint256 newFees, uint256 newBase) public returns (uint256 percentage) {\\n            require(newFees <= newBase, \\\"Fee fraction exceeded base.\\\");\\n            percentage = (newFees. mul( 1000)) .div( newBase);\\n            require(percentage <= 40 && percentage < 10, \\\"Percentage should be from 1-4 %\\\");\\n\\n            bidPenaltyPercentage =newFees;\\n            bidPenaltyPercentageBase =newBase;\\n        }\\n/**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  the formula is (fees * 1000)/base \\n    * @param newFees  the new fees value to be stored \\n    * @param newBase  the new basefees value to be stored \\n    * @return percentage the value of the state variable `_feeFraction`\\n    */\\n\\nfunction _changeDelistFeesPerentage(uint256 newFees, uint256 newBase) public returns (uint256 percentage) {\\n            require(newFees <= newBase, \\\"Fee fraction exceeded base.\\\");\\n            percentage = (newFees. mul( 1000)) .div( newBase);\\n            require(percentage <= 40 && percentage < 10, \\\"Percentage should be from 1-4 %\\\");\\n\\n            delistFeesPercentage =newFees;\\n            delistFeesPercentageBase =newBase;\\n        }\\n  /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev  the formula is (fees * 1000)/base \\n        * @param newFees  the new fees value to be stored \\n        * @param newBase  the new basefees value to be stored \\n        * @return percentage the value of the state variable `_feeFraction`\\n     */\\nfunction _changeListqualifyAmount(uint256 newFees, uint256 newBase) public returns (uint256 percentage) {\\n            require(newFees <= newBase, \\\"Fee fraction exceeded base.\\\");\\n            percentage = (newFees. mul( 1000)) .div( newBase);\\n            require(percentage <= 40 && percentage < 10, \\\"Percentage should be from 1-4 %\\\");\\n\\n            listqualifyPercentage =newFees;\\n            listqualifyPercentageBase =newBase;\\n        }\\n\\n} \",\"keccak256\":\"0x58c2706afb993bbbeece5bc08ea8cde81236c821e41347935812322a724ff56a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC721Royalty {\\n function royaltyInfo(uint256 _tokenId, uint256 _value) external view returns (address issuer, uint256 _royaltyAmount) ;  \\n}\",\"keccak256\":\"0x8ce52008cb269ca93b527e46f9e6250c018feda6b083276e2ffc806dc72ce23a\",\"license\":\"MIT\"},\"contracts/interface/IStartFiReputation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\npragma experimental SMTChecker;\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  Startfi Reputation contract\\n * desc contract to mamange the reputation for startfi users\\n */\\ninterface IStartFiReputation   {\\n\\n\\n  function mintReputation(address to, uint256 amount)  external returns(uint256 balance) ;\\n  function burnReputation(address to, uint256 amount)  external returns(uint256 balance) ;\\n\\n function getUserReputation(address user) view external returns (uint256 balance) ;\\n}\\n\",\"keccak256\":\"0x87c4214b86f35faf24eec5133281a1501487dc4a560c5265eb1eab3116426c4a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IStartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IStartFiStakes {\\n function getReserves(address owner) external view returns ( uint256) ;\\n function deduct(address finePayer, address to, uint256 amount) external returns (bool);  \\n}\",\"keccak256\":\"0xc78a6ce22ecb3460e2f25c5402cad95f4bba6896cb87b3be5a9938abdb8c54bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262ed4e0060019081556006805463ffffffff1916632a55205a1790556007819055606460088190556009829055600a828155600b92909255600c819055600d819055600e556013553480156200005957600080fd5b5060405162004265380380620042658339810160408190526200007c916200021b565b8383828260006200008c62000154565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690558051620000f890600590602084019062000158565b5050600680546001600160a01b0393841664010000000002600160201b600160c01b0319909116179055601280549183166001600160a01b03199283161790556011805495909216941693909317909255506200037792505050565b3390565b828054620001669062000324565b90600052602060002090601f0160209004810192826200018a5760008555620001d5565b82601f10620001a557805160ff1916838001178555620001d5565b82800160010185558215620001d5579182015b82811115620001d5578251825591602001919060010190620001b8565b50620001e3929150620001e7565b5090565b5b80821115620001e35760008155600101620001e8565b80516001600160a01b03811681146200021657600080fd5b919050565b6000806000806080858703121562000231578384fd5b84516001600160401b038082111562000248578586fd5b818701915087601f8301126200025c578586fd5b81518181111562000271576200027162000361565b6040516020601f8301601f191682018101848111838210171562000299576200029962000361565b60405282825284830181018b1015620002b0578889fd5b8893505b82841015620002d35784840181015182850182015292830192620002b4565b82841115620002e457888184840101525b819850620002f4818b01620001fe565b975050505050506200030960408601620001fe565b91506200031960608601620001fe565b905092959194509250565b6002810460018216806200033957607f821691505b602082108114156200035b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b613ede80620003876000396000f3fe608060405234801561001057600080fd5b50600436106102bb5760003560e01c8063715018a611610182578063a44e53fd116100e9578063d4ef929a116100a2578063e1a1d7ed1161007c578063e1a1d7ed14610609578063f2fde38b1461062d578063f99e54b714610640578063ff90ec0614610653576102bb565b8063d4ef929a146105d0578063dbb26e26146105e3578063e123ff58146105f6576102bb565b8063a44e53fd14610569578063ab993d4614610571578063b38fb88814610584578063b72bf13514610597578063b9860648146105aa578063cd772f5c146105bd576102bb565b80638da5cb5b1161013b5780638da5cb5b146104e25780638ef291e9146104ea5780638fcaa754146104ff578063939ad5b3146105225780639d45ab8314610543578063a0f88fe114610556576102bb565b8063715018a61461046e5780637156eea81461047657806375b4a5e814610489578063774e41c5146104915780637b356561146104a4578063898c2a9d146104cf576102bb565b806352c7acfb116102265780635cc310ba116101df5780635cc310ba146104285780635dd6ae5814610430578063649ee6831461044357806365f3895d1461044b5780636b0415471461045e5780636bb5981614610466576102bb565b806352c7acfb146103d457806356461e8e146103dc57806356e9d1f3146103e45780635a2f5963146104055780635bbd49f41461040d5780635c975abb14610420576102bb565b80631a186227116102785780631a1862271461034e5780631f78fd0b1461036357806321ecff5b1461037657806329c5cdf3146103895780634b3ee2bb1461039c578063528565ed146103c1576102bb565b80630160cb07146102c05780630a42e75a146102e95780630ae708d9146102f15780630fefe6a61461030657806311a1933c14610326578063150b7a021461032e575b600080fd5b6102d36102ce366004613142565b610666565b6040516102e091906132f2565b60405180910390f35b6102d36106e2565b6103046102ff366004612e63565b6106e8565b005b610319610314366004612fab565b61070a565b6040516102e091906132e7565b6102d361072e565b61034161033c366004612edb565b610734565b6040516102e0919061354f565b610356610744565b6040516102e091906131e6565b6102d3610371366004612e63565b610753565b6102d3610384366004613142565b610772565b6102d3610397366004613044565b6107df565b6103af6103aa3660046130fb565b6109e4565b6040516102e096959493929190613366565b6103196103cf366004612fab565b610a3e565b6102d3610ad2565b6102d3610ad8565b6103f76103f23660046130fb565b610ade565b6040516102e0929190613238565b610356610d23565b6102d361041b366004613078565b610d3a565b610319610eea565b6102d3610efa565b61031961043e366004612e9b565b610f00565b6102d3610f8f565b6102d3610459366004613142565b610f95565b6102d3611002565b6102d3611008565b6103046113ef565b6102d3610484366004613142565b611478565b6102d36114e5565b61030461049f366004612e63565b6114eb565b6104b76104b23660046130fb565b611519565b6040516102e09c9b9a99989796959493929190613277565b6102d36104dd366004612e63565b6115bd565b61035661165d565b6104f261166c565b6040516102e09190613564565b61051261050d366004613044565b6116fe565b6040516102e09493929190613251565b6105356105303660046130fb565b61176b565b6040516102e0929190613d87565b610319610551366004612e9b565b61179f565b6102d3610564366004612e63565b6117dc565b6102d3611867565b6102d361057f3660046130fb565b61186d565b6102d3610592366004613003565b61188a565b6105356105a5366004612e9b565b611900565b6105356105b83660046130fb565b611a34565b6102d36105cb366004613142565b611a5e565b6103f76105de3660046130fb565b611d67565b6102d36105f1366004613142565b612053565b6103f76106043660046130fb565b61205f565b61061c610617366004613113565b61228e565b6040516102e0959493929190613431565b61030461063b366004612e63565b6122d6565b6102d361064e3660046130fb565b612396565b6103f7610661366004613142565b6123b3565b6000818311156106915760405162461bcd60e51b815260040161068890613c6d565b60405180910390fd5b6106a7826106a1856103e86126ad565b906126b9565b9050602881111580156106ba5750600a81105b6106d65760405162461bcd60e51b815260040161068890613ac5565b600b92909255600e5590565b60015481565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600f6020526040902081905560015b92915050565b60075490565b630a85bd0160e11b949350505050565b6011546001600160a01b031681565b6001600160a01b0381166000908152600f60205260409020545b919050565b6000818311156107945760405162461bcd60e51b815260040161068890613c6d565b6107a4826106a1856103e86126ad565b9050601e81111580156107b75750600a81105b6107d35760405162461bcd60e51b81526004016106889061388a565b60079290925560085590565b600081600081116108025760405162461bcd60e51b815260040161068890613c36565b600061081042600154612053565b9050858561081c6126c5565b83604051602001610830949392919061317b565b60405160208183030381529060405280519060200120925060006108538561186d565b9050806108616104dd6126c5565b101561087f5760405162461bcd60e51b815260040161068890613952565b61088987876126c9565b6108a55760405162461bcd60e51b815260040161068890613be5565b6108b887876108b26126c5565b3061275e565b6108d45760405162461bcd60e51b815260040161068890613ca4565b6108e76108df6126c5565b82600161188a565b506000601060006108f66126c5565b6001600160a01b031681526020808201929092526040016000908120805460018101825581835292822090920187905590915081906010906109366126c5565b6001600160a01b031681526020810191909152604001600020815461095b9290612ddd565b5061097185896109696126c5565b8a8a886127ce565b61098d5760405162461bcd60e51b8152600401610688906136a4565b7f4273eae081fe1625584d9ab2b9e558adb9b60b846999d5b07de6e4664464767c85896109b86126c5565b8a8a8888426040516109d19897969594939291906133ef565b60405180910390a1505050509392505050565b6000908152600460208181526040808420805460019182015460038086528488206001600160a01b03928316808a529652939096209182015460028301549383015492909501549096939594909416939192909160ff1690565b60065460405163a9059cbb60e01b815260009164010000000090046001600160a01b03169063a9059cbb90610a799086908690600401613238565b602060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acb91906130df565b9392505050565b60085481565b600e5481565b600081815260026020819052604090912060098101546005820154600483015483546006850154958501546001909501546001600160a01b0391821696909560ff90951694938216939290911691610b346126c5565b6001600160a01b0316836001600160a01b031614610b645760405162461bcd60e51b81526004016106889061366d565b6001600160a01b03841615610b8b5760405162461bcd60e51b8152600401610688906137da565b6000610b9a836203f480612053565b9050428111158015610bcb57506002866003811115610bc957634e487b7160e01b600052602160045260246000fd5b145b80610bf557506001866003811115610bf357634e487b7160e01b600052602160045260246000fd5b145b610c115760405162461bcd60e51b815260040161068890613d00565b60008042851015610c5d57610c258461176b565b9092509050610c3c86610c3661298f565b84610f00565b610c585760405162461bcd60e51b815260040161068890613a63565b610c69565b610c668461186d565b90505b610c758a8a308961275e565b610c915760405162461bcd60e51b815260040161068890613ca4565b6000610ca6610c9e6126c5565b83600061188a565b1015610cc45760405162461bcd60e51b81526004016106889061391b565b610cd18b6000600361299e565b7f55058811c463cd1d9f3952e51fdb7eb2760b904e998811cb7485a7f33a1ff4af8b8b888c86868b42604051610d0e9897969594939291906133ef565b60405180910390a15050505050505050915091565b60065464010000000090046001600160a01b031681565b60008560008111610d5d5760405162461bcd60e51b815260040161068890613c36565b61a8c08311610d7e5760405162461bcd60e51b815260040161068890613b57565b601354861015610da05760405162461bcd60e51b8152600401610688906135b7565b6000610dac4285612053565b90508989610db86126c5565b83604051602001610dcc949392919061317b565b6040516020818303038152906040528051906020012092508515610e0a5760008511610e0a5760405162461bcd60e51b815260040161068890613a2c565b610e148a8a6126c9565b610e305760405162461bcd60e51b815260040161068890613be5565b610e3d8a8a6108b26126c5565b610e595760405162461bcd60e51b815260040161068890613ca4565b610e71838b610e666126c5565b8c8c8b8b888f612a1e565b610e8d5760405162461bcd60e51b8152600401610688906136a4565b7fd7f1b8f328c218ec2774158bb7329aaa002cda2cb72482f7927b5c1991697f1b838b610eb86126c5565b8c8c8b8b888f42604051610ed59a9998979695949392919061339c565b60405180910390a15050979650505050505050565b600054600160a01b900460ff1690565b600d5481565b60115460405163929c517960e01b81526000916001600160a01b03169063929c517990610f3590879087908790600401613214565b602060405180830381600087803b158015610f4f57600080fd5b505af1158015610f63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8791906130df565b949350505050565b600b5481565b600081831115610fb75760405162461bcd60e51b815260040161068890613c6d565b610fc7826106a1856103e86126ad565b905060288111158015610fda5750600a81105b610ff65760405162461bcd60e51b815260040161068890613ac5565b600992909255600c5590565b600a5481565b600080600f60006110176126c5565b6001600160a01b03166001600160a01b031681526020019081526020016000205490506000601060006110486126c5565b6001600160a01b03166001600160a01b031681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156110b257602002820191906000526020600020905b81548152602001906001019080831161109e575b50505050509050601060006110c56126c5565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006110f19190612e2d565b6000601060006110ff6126c5565b6001600160a01b03166001600160a01b03168152602001908152602001600020905060005b825181101561134457600280600085848151811061115257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000206009015460ff16600381111561119257634e487b7160e01b600052602160045260246000fd5b141561122b57818382815181106111b957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825460018101845560009384529183209091015583516112249187916002919087908690811061120557634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060070154612053565b9450611332565b60016002600085848151811061125157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000206009015460ff16600381111561129157634e487b7160e01b600052602160045260246000fd5b141561133257818382815181106112b857634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845291832090910155835161132290600290839087908690811061130357634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206002015461186d565b905061132e8682612053565b9550505b8061133c81613e3e565b915050611124565b5080601060006113526126c5565b6001600160a01b03168152602081019190915260400160002081546113779290612ddd565b506113896113836126c5565b8561070a565b6113a55760405162461bcd60e51b8152600401610688906138f0565b7f0d0e56539d6f587bb6a3924f7dee452834a223586e9bb60d3827f4006cb0655d6113ce6126c5565b8486426040516113e19493929190613251565b60405180910390a150505090565b6113f76126c5565b6001600160a01b031661140861165d565b6001600160a01b03161461142e5760405162461bcd60e51b815260040161068890613afc565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60008183111561149a5760405162461bcd60e51b815260040161068890613c6d565b6114aa826106a1856103e86126ad565b9050602881111580156114bd5750600a81105b6114d95760405162461bcd60e51b815260040161068890613ac5565b600a92909255600d5590565b600c5481565b600680546001600160a01b0390921664010000000002640100000000600160c01b0319909216919091179055565b600081815260026020819052604082208054600182015492820154600380840154600485015460058601546006870154600788015460088901546009909901546001600160a01b039889169b97999598948516979484169660ff600160a01b8604811697600160a81b909604811696949593949216908111156115ac57634e487b7160e01b600052602160045260246000fd5b905091939597999b5091939597999b565b6001600160a01b038082166000908152600f6020526040808220546011549151630fa6707960e21b815292939092610acb9284921690633e99c1e4906116079088906004016131e6565b60206040518083038186803b15801561161f57600080fd5b505afa158015611633573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116579190613163565b90612bdf565b6000546001600160a01b031690565b60606005805461167b90613e03565b80601f01602080910402602001604051908101604052809291908181526020018280546116a790613e03565b80156116f45780601f106116c9576101008083540402835291602001916116f4565b820191906000526020600020905b8154815290600101906020018083116116d757829003601f168201915b5050505050905090565b60008060008061170d85612396565b91506117198583612bdf565b905061172487612beb565b1561176257611734878787612c7d565b9094509250821580159061175057506001600160a01b03841615155b156117625761175f8184612bdf565b90505b93509350935093565b600080611789600d546106a1600a54866126ad90919063ffffffff16565b9150611798826116578561186d565b9050915091565b6006546040516323b872dd60e01b815260009164010000000090046001600160a01b0316906323b872dd90610f3590879087908790600401613214565b600654604051636eb1769f60e11b815260009164010000000090046001600160a01b03169063dd62ed3e9061181790859030906004016131fa565b60206040518083038186803b15801561182f57600080fd5b505afa158015611843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107289190613163565b60075481565b6000610728600e546106a1600b54856126ad90919063ffffffff16565b6000816118b9576001600160a01b0384166000908152600f60205260409020546118b49084612bdf565b6118dc565b6001600160a01b0384166000908152600f60205260409020546118dc9084612d09565b6001600160a01b0385166000908152600f6020526040902081905590509392505050565b6000808061190f8460026126b9565b9050600061191e8560026126b9565b601254604051631287995760e31b81529192506001600160a01b03169063943ccab890611951908a908690600401613238565b602060405180830381600087803b15801561196b57600080fd5b505af115801561197f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a39190613163565b601254604051631287995760e31b81529194506001600160a01b03169063943ccab8906119d69089908590600401613238565b602060405180830381600087803b1580156119f057600080fd5b505af1158015611a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a289190613163565b93505050935093915050565b600080611a52600c546106a1600954866126ad90919063ffffffff16565b91506117988383612bdf565b600082815260026020526040812060060154839042108015611ab45750600260008281526002602052604090206009015460ff166003811115611ab157634e487b7160e01b600052602160045260246000fd5b14155b611ad05760405162461bcd60e51b815260040161068890613d5d565b600084815260026020526040902080546001909101546001600160a01b03909116908582611afc6126c5565b83604051602001611b1094939291906131b4565b60408051601f19818403018152918152815160209283012060008981526004845282812060010154600290945291909120600701549095506001600160a01b039091169081611b905760008881526002602081905260409091200154871015611b8b5760405162461bcd60e51b815260040161068890613784565b611bd3565b60008881526003602081815260408084206001600160a01b038716855290915290912001548711611bd35760405162461bcd60e51b8152600401610688906135ee565b600088815260036020526040812081611bea6126c5565b6001600160a01b03168152602081019190915260400160002060030154905080611ce05781611c1a6104dd6126c5565b1015611c385760405162461bcd60e51b815260040161068890613952565b600060106000611c466126c5565b6001600160a01b03168152602080820192909252604001600090812080546001810182558183529282209092018c90559091508190601090611c866126c5565b6001600160a01b0316815260208101919091526040016000208154611cab9290612ddd565b506000611cc1611cb96126c5565b85600161188a565b11611cde5760405162461bcd60e51b815260040161068890613636565b505b611cf5878a87611cee6126c5565b888d612d15565b611d115760405162461bcd60e51b815260040161068890613b31565b7f2d4cfcefc09a529d21dfffe1fc49a95663a8e6ee7aa367506e419a6d43788285878a87611d3d6126c5565b888d42604051611d539796959493929190613513565b60405180910390a150505050505092915050565b6000818152600260205260408120600601548190839042118015611dbf5750600260008281526002602052604090206009015460ff166003811115611dbc57634e487b7160e01b600052602160045260246000fd5b14155b611ddb5760405162461bcd60e51b815260040161068890613d5d565b60008481526004602081815260408084206001908101546002909352932091820154825492909301546001600160a01b039283169650945081169116611e1f6126c5565b6001600160a01b0316826001600160a01b031614611e4f5760405162461bcd60e51b8152600401610688906139f5565b60008681526003602081815260408084206001600160a01b0387168552909152909120015480611e7e846117dc565b1015611e9c5760405162461bcd60e51b81526004016106889061371a565b600080600080611ead8a8a876116fe565b9350935093509350611ec787611ec161165d565b8461179f565b611ee35760405162461bcd60e51b815260040161068890613d26565b6001600160a01b03841615611f1957611efd87858561179f565b611f195760405162461bcd60e51b81526004016106889061397f565b611f2487878361179f565b611f405760405162461bcd60e51b8152600401610688906139c0565b611f4c8a8a308a61275e565b611f685760405162461bcd60e51b815260040161068890613ca4565b60008b815260026020526040812060070154611f869089908361188a565b1015611fa45760405162461bcd60e51b81526004016106889061391b565b60008b8152600360205260408120600191611fbd6126c5565b6001600160a01b031681526020810191909152604001600020600401805460ff1916911515919091179055611ff3868887611900565b50506120018b88600061299e565b60008b815260046020526040908190205490517fe70f4aad9f39db984a04bce8b0cd7a269c046c57fd6878c9dbf2f6af19a47ecd91610d0e918e908e908c908f908c908c908c908c908c9042906134b4565b6000610acb8383612d09565b600081815260046020818152604080842060019081015460029093529084209283015483549184015460078501546006909501546001600160a01b039384169691959484169492909316926120b7906203f480612053565b90506001600160a01b038416158015906120d15750428110155b6120ed5760405162461bcd60e51b815260040161068890613855565b6120f56126c5565b6001600160a01b0316836001600160a01b0316146121255760405162461bcd60e51b81526004016106889061366d565b60008781526003602090815260408083206001600160a01b038816845290915290206004015460ff161561216b5760405162461bcd60e51b815260040161068890613a9a565b60008061217784611a34565b9150915061218786610c3661298f565b6121a35760405162461bcd60e51b815260040161068890613808565b6121ae868683610f00565b6121ca5760405162461bcd60e51b815260040161068890613808565b6121d68888308861275e565b6121f25760405162461bcd60e51b815260040161068890613ca4565b60006122008786600061188a565b101561221e5760405162461bcd60e51b81526004016106889061391b565b61222b896000600361299e565b600089815260046020526040908190205490517fb46a91724b95c8764d64242653194717e2ab549e1b76e207124d3bddc39aed6d9161227b918c908c908b908d908c908c908a908c90429061345f565b60405180910390a1505050505050915091565b60009182526003602081815260408085206001600160a01b0394851686529091529092208054600182015460028301549483015460049093015491959316939260ff90911690565b6122de6126c5565b6001600160a01b03166122ef61165d565b6001600160a01b0316146123155760405162461bcd60e51b815260040161068890613afc565b6001600160a01b03811661233b5760405162461bcd60e51b8152600401610688906136d4565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006107286008546106a1600754856126ad90919063ffffffff16565b6000828152600260208190526040909120600581015460048201548254600184015493909401546001600160a01b0394851694600160a81b90930460ff1692909116908510156124155760405162461bcd60e51b815260040161068890613cd9565b600160008781526002602052604090206009015460ff16600381111561244b57634e487b7160e01b600052602160045260246000fd5b14806124b35750600260008781526002602052604090206009015460ff16600381111561248857634e487b7160e01b600052602160045260246000fd5b14801561249757506001821515145b80156124b3575060008681526002602052604090206006015442105b6124cf5760405162461bcd60e51b8152600401610688906138c1565b846124db6105646126c5565b10156124f95760405162461bcd60e51b81526004016106889061371a565b60008060008061250a88888b6116fe565b935093509350935061252561251d6126c5565b611ec161165d565b6125415760405162461bcd60e51b815260040161068890613d26565b6001600160a01b0384161561257e5761256261255b6126c5565b858561179f565b61257e5760405162461bcd60e51b81526004016106889061397f565b6125906125896126c5565b868361179f565b6125ac5760405162461bcd60e51b815260040161068890613ba4565b6125bf8888306125ba6126c5565b61275e565b6125db5760405162461bcd60e51b815260040161068890613ca4565b60008a8152600260208190526040822001546125f69061186d565b905060006126068783600061188a565b10156126245760405162461bcd60e51b81526004016106889061391b565b6126378b6126306126c5565b600061299e565b612649866126436126c5565b8c611900565b50507ff18fd7f8585dc258636a453d4a87ee3dd6edda50c1f438348bddf640ca6fbbec8b8a6126766126c5565b8b8e8b8d8c8c8c8c426040516126979c9b9a999897969594939291906132fb565b60405180910390a1505050505050509250929050565b6000610acb8284613dcd565b6000610acb8284613dad565b3390565b60405163020604bf60e21b81526000906001600160a01b0384169063081812fc906126f89085906004016132f2565b60206040518083038186803b15801561271057600080fd5b505afa925050508015612740575060408051601f3d908101601f1916820190925261273d91810190612e7f565b60015b61274c57506000610728565b6001600160a01b031630149050610728565b604051632142170760e11b81526000906001600160a01b038616906342842e0e9061279190869086908990600401613214565b600060405180830381600087803b1580156127ab57600080fd5b505af11580156127bf573d6000803e3d6000fd5b50600198975050505050505050565b6000604051806101800160405280876001600160a01b0316815260200185815260200184815260200160008152602001866001600160a01b0316815260200160006001600160a01b0316815260200160001515815260200160001515815260200183815260200160008152602001600081526020016001600381111561286457634e487b7160e01b600052602160045260246000fd5b9052600088815260026020818152604092839020845181546001600160a01b039182166001600160a01b03199182161783559286015160018084019190915594860151938201939093556060850151600380830191909155608086015160048301805491861691851691909117905560a086015160058301805460c089015160e08a01511515600160a81b0260ff60a81b19911515600160a01b0260ff60a01b199590991692909716919091179290921695909517169290921790925561010084015160068301556101208401516007830155610140840151600883015561016084015160098301805493949193909260ff199091169190849081111561297b57634e487b7160e01b600052602160045260246000fd5b021790555060019998505050505050505050565b600061299961165d565b905090565b6000838152600260205260409020600901805482919060ff191660018360038111156129da57634e487b7160e01b600052602160045260246000fd5b02179055506001600160a01b03821615612a1957600083815260026020526040902060050180546001600160a01b0319166001600160a01b0384161790555b505050565b60006040518061018001604052808a6001600160a01b0316815260200188815260200187815260200160008152602001896001600160a01b0316815260200160006001600160a01b03168152602001600115158152602001861515815260200184815260200183815260200185815260200160026003811115612ab157634e487b7160e01b600052602160045260246000fd5b905260008b815260026020818152604092839020845181546001600160a01b039182166001600160a01b03199182161783559286015160018084019190915594860151938201939093556060850151600380830191909155608086015160048301805491861691851691909117905560a086015160058301805460c089015160e08a01511515600160a81b0260ff60a81b19911515600160a01b0260ff60a01b199590991692909716919091179290921695909517169290921790925561010084015160068301556101208401516007830155610140840151600883015561016084015160098301805493949193909260ff1990911691908490811115612bc857634e487b7160e01b600052602160045260246000fd5b021790555060019c9b505050505050505050505050565b6000610acb8284613dec565b6006546040516301ffc9a760e01b81526000916001600160a01b038416916301ffc9a791612c229160e09190911b9060040161354f565b60206040518083038186803b158015612c3a57600080fd5b505afa925050508015612c6a575060408051601f3d908101601f19168201909252612c67918101906130df565b60015b612c765750600061076d565b905061076d565b600080846001600160a01b0316632a55205a85856040518363ffffffff1660e01b8152600401612cae929190613d87565b604080518083038186803b158015612cc557600080fd5b505afa158015612cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfd9190612fd6565b90969095509350505050565b6000610acb8284613d95565b6040805180820182528781526001600160a01b03948516602080830182815260008a8152600480845286822095518655915160019586018054918b166001600160a01b0319928316179055865160a0810188529c8d529989168c84019081528c870198895260608d0197885260808d018281529b82526003808552878320958352949093529490942099518a555189830180549190971697169690961790945591516002870155519285019290925591519201805492151560ff199093169290921790915590565b828054828255906000526020600020908101928215612e1d5760005260206000209182015b82811115612e1d578254825591600101919060010190612e02565b50612e29929150612e4e565b5090565b5080546000825590600052602060002090810190612e4b9190612e4e565b50565b5b80821115612e295760008155600101612e4f565b600060208284031215612e74578081fd5b8135610acb81613e85565b600060208284031215612e90578081fd5b8151610acb81613e85565b600080600060608486031215612eaf578182fd5b8335612eba81613e85565b92506020840135612eca81613e85565b929592945050506040919091013590565b60008060008060808587031215612ef0578081fd5b8435612efb81613e85565b9350602085810135612f0c81613e85565b935060408601359250606086013567ffffffffffffffff80821115612f2f578384fd5b818801915088601f830112612f42578384fd5b813581811115612f5457612f54613e6f565b604051601f8201601f1916810185018381118282101715612f7757612f77613e6f565b60405281815283820185018b1015612f8d578586fd5b81858501868301379081019093019390935250939692955090935050565b60008060408385031215612fbd578182fd5b8235612fc881613e85565b946020939093013593505050565b60008060408385031215612fe8578182fd5b8251612ff381613e85565b6020939093015192949293505050565b600080600060608486031215613017578283fd5b833561302281613e85565b925060208401359150604084013561303981613e9a565b809150509250925092565b600080600060608486031215613058578283fd5b833561306381613e85565b95602085013595506040909401359392505050565b600080600080600080600060e0888a031215613092578283fd5b873561309d81613e85565b965060208801359550604088013594506060880135935060808801356130c281613e9a565b9699959850939692959460a0840135945060c09093013592915050565b6000602082840312156130f0578081fd5b8151610acb81613e9a565b60006020828403121561310c578081fd5b5035919050565b60008060408385031215613125578182fd5b82359150602083013561313781613e85565b809150509250929050565b60008060408385031215613154578182fd5b50508035926020909101359150565b600060208284031215613174578081fd5b5051919050565b6bffffffffffffffffffffffff19606095861b8116825260148201949094529190931b9091166034820152604881019190915260680190565b9384526bffffffffffffffffffffffff19606093841b811660208601529190921b166034830152604882015260680190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6001600160a01b039c8d168152602081019b909b5260408b019990995260608a019790975294891660808901529290971660a0870152151560c086015294151560e08501526101008401949094526101208301939093526101408201929092526101608101919091526101800190565b901515815260200190565b90815260200190565b9b8c526001600160a01b039a8b1660208d0152988a1660408c015260608b019790975260808a019590955292871660a089015290151560c088015290941660e08601526101008501939093526101208401929092526101408301919091526101608201526101800190565b9586526001600160a01b03948516602087015292909316604085015260608401526080830191909152151560a082015260c00190565b998a526001600160a01b0398891660208b015296909716604089015260608801949094526080870192909252151560a086015260c085015260e08401526101008301919091526101208201526101400190565b9788526001600160a01b0396871660208901529490951660408701526060860192909252608085015260a084015260c083019190915260e08201526101000190565b9485526001600160a01b03939093166020850152604084019190915260608301521515608082015260a00190565b998a5260208a01989098526001600160a01b0396871660408a015294861660608901526080880193909352931660a086015260c085019290925260e08401919091526101008301526101208201526101400190565b9a8b5260208b01999099526001600160a01b0397881660408b015295871660608a0152608089019490945260a088019290925290931660c086015260e08501929092526101008401919091526101208301526101408201526101600190565b96875260208701959095526001600160a01b039384166040870152919092166060850152608084019190915260a083015260c082015260e00190565b6001600160e01b031991909116815260200190565b6000602080835283518082850152825b8181101561359057858101830151858201604001528201613574565b818111156135a15783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601e908201527f496e76616c69642041756374696f6e207175616c69667920416d6f756e740000604082015260600190565b60208082526028908201527f626964207072696365206d757374206265206d6f7265207468616e20746865206040820152671b185cdd08189a5960c21b606082015260800190565b6020808252601b908201527f52657365727665205a65726f206973206e6f7420616c6c6f7765640000000000604082015260600190565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b602080825260169082015275436f756c646e2774206c69737420746865206974656d60501b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526044908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20776960408201527f7468647261772074686520726571756972656420616d6f756e74206f6620746f6060820152636b656e7360e01b608082015260a00190565b60208082526036908201527f626964207072696365206d757374206265206d6f7265207468616e206f7220656040820152757175616c20746865206d696e696d756d20707269636560501b606082015260800190565b60208082526014908201527320b63932b0b23c903137bab3b43a103a37b5b2b760611b604082015260600190565b6020808252602d908201527f636f756c646e277420646564756374207468652066696e6520666f722074686560408201526c0818591b5a5b881dd85b1b195d609a1b606082015260800190565b6020808252818101527f4e6f2062696473206f72207374696c6c2072756e6e696e672061756374696f6e604082015260600190565b6020808252601f908201527f50657263656e746167652073686f756c642062652066726f6d20312d33202500604082015260600190565b60208082526015908201527402a37b5b2b71034b9b737ba103337b91039b0b6329605d1b604082015260600190565b6020808252601190820152701cd95d081c995cd95c9d994819985a5b19607a1b604082015260600190565b6020808252601f908201527f6e656761746976652072657365727665206973206e6f7420616c6c6f77656400604082015260600190565b6020808252601390820152724e6f7420656e6f75676820726573657276657360681b604082015260600190565b60208082526021908201527f436f756c646e2774207472616e7366657220746f6b656e20746f2069737375656040820152603960f91b606082015260800190565b6020808252818101527f436f756c646e2774207472616e7366657220746f6b656e20746f206275796572604082015260600190565b60208082526018908201527f43616c6c6572206973206e6f74207468652077696e6e65720000000000000000604082015260600190565b60208082526019908201527f5a65726f207072696365206973206e6f7420616c6c6f77656400000000000000604082015260600190565b60208082526018908201527f636f756c646e277420646564756374207468652066696e650000000000000000604082015260600190565b602080825260119082015270105b1c9958591e481c1d5c98da185cd959607a1b604082015260600190565b6020808252601f908201527f50657263656e746167652073686f756c642062652066726f6d20312d34202500604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b10dbdd5b191b89dd08109a5960a21b604082015260600190565b6020808252602d908201527f41756374696f6e2073686f756c64206265206c69766520666f72206d6f72652060408201526c7468616e20313220686f75727360981b606082015260800190565b60208082526021908201527f436f756c646e2774207472616e7366657220746f6b656e20746f2073656c6c656040820152603960f91b606082015260800190565b60208082526031908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20747260408201527030b739b332b9103cb7bab9103a37b5b2b760791b606082015260800190565b60208082526019908201527f5a65726f2056616c7565206973206e6f7420616c6c6f77656400000000000000604082015260600190565b6020808252601b908201527f466565206672616374696f6e20657863656564656420626173652e0000000000604082015260600190565b6020808252818101527f4e465420746f6b656e20636f756c646e2774206265207472616e736665726564604082015260600190565b6020808252600d908201526c496e76616c696420707269636560981b604082015260600190565b6020808252600c908201526b10d85b89dd0819195b1a5cdd60a21b604082015260600190565b6020808252601f908201527f436f756c646e2774207472616e7366657220746f6b656e206173206665657300604082015260600190565b60208082526010908201526f105d58dd1a5bdb881a5cc8195b99195960821b604082015260600190565b918252602082015260400190565b60008219821115613da857613da8613e59565b500190565b600082613dc857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613de757613de7613e59565b500290565b600082821015613dfe57613dfe613e59565b500390565b600281046001821680613e1757607f821691505b60208210811415613e3857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613e5257613e52613e59565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612e4b57600080fd5b8015158114612e4b57600080fdfea2646970667358221220a99e594d369d9cf3a7053a2a98c069b5eccec123f630b6daee1772112b6b3cf764736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Eman Herawy, StartFi Team",
    "kind": "dev",
    "methods": {
      "_addreputationPoints(address,address,uint256)": {
        "details": "this function calls StartFiReputation contract to mint reputation points for both seller and buyer",
        "params": {
          "amount": ": price",
          "buyer": ": buyer address",
          "seller": ": seller address"
        },
        "returns": {
          "buyerBalance": ": buyer current reputation balance",
          "sellerBalance": ": seller current reputation balance"
        }
      },
      "_calcBidDisputeFees(uint256)": {
        "details": "calculat the platform share when seller call disput",
        "params": {
          "qualifyAmount": ": seller defind value to be staked in order to participate in a gevin auction"
        },
        "returns": {
          "fineAmount": "the value that the platform will get",
          "remaining": "the value that the auction woner will get"
        }
      },
      "_calcFees(uint256)": {
        "details": "calculat the platform fees",
        "params": {
          "price": ": item  price"
        },
        "returns": {
          "fees": "the value that the platform will get"
        }
      },
      "_changeBidPenaltyPercentage(uint256,uint256)": {
        "details": "the formula is (fees * 1000)/base ",
        "params": {
          "newBase": "the new basefees value to be stored ",
          "newFees": "the new fees value to be stored "
        },
        "returns": {
          "percentage": "the value of the state variable `_feeFraction`"
        }
      },
      "_changeDelistFeesPerentage(uint256,uint256)": {
        "details": "the formula is (fees * 1000)/base ",
        "params": {
          "newBase": "the new basefees value to be stored ",
          "newFees": "the new fees value to be stored "
        },
        "returns": {
          "percentage": "the value of the state variable `_feeFraction`"
        }
      },
      "_changeListqualifyAmount(uint256,uint256)": {
        "details": "the formula is (fees * 1000)/base ",
        "params": {
          "newBase": "the new basefees value to be stored ",
          "newFees": "the new fees value to be stored "
        },
        "returns": {
          "percentage": "the value of the state variable `_feeFraction`"
        }
      },
      "_changeReputationContract(address)": {
        "details": "for later on upgrade , if we have",
        "params": {
          "_reputationContract": ": startfi new reputation contract"
        }
      },
      "_changeUtiltiyToken(address)": {
        "details": "for later on upgrade , if we have",
        "params": {
          "_token": ": startfi new utility contract"
        }
      },
      "_deduct(address,address,uint256)": {
        "details": "this function calls StartFiStakes contract to subtract the user stakes and add that value to the 'to'",
        "params": {
          "amount": ": value to be deducted from his stakes as a fine",
          "finePayer": ": fine payer address",
          "to": ": participant address"
        },
        "returns": {
          "_0": "true if it's done"
        }
      },
      "_getAllowance(address)": {
        "details": ":wrap function to get the total allowed number of tokens that this contract can transfer from the given account ",
        "params": {
          "owner": ": owner address"
        },
        "returns": {
          "_0": "allowed number of tokens that this contract can transfer from the owner account"
        }
      },
      "_getDeListingQualAmount(uint256)": {
        "details": "calculat the platform fine amount when seller delist before time",
        "params": {
          "listingPrice": ": item listing price"
        },
        "returns": {
          "fineAmount": "the value that the platform will get",
          "remaining": "the value remaing after subtracting the fine"
        }
      },
      "_getListingQualAmount(uint256)": {
        "details": "calculat the platform fine amount when seller delist before time",
        "params": {
          "listingPrice": ": item listing price"
        },
        "returns": {
          "amount": "the value that the platform will get"
        }
      },
      "_getStakeAllowance(address)": {
        "details": "this function calls StartFiStakes contract to get the total staked tokens for 'user' an substract the current reserves to get the total number of free tokens",
        "params": {
          "staker": ": participant address"
        },
        "returns": {
          "_0": "allowed number of tokens that this contract can transfer from the owner account"
        }
      },
      "_safeTokenTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `amount` of token from `from` to `to`.",
        "params": {
          "amount": "number of tokens to be transferred See {transferFrom}",
          "from": "address representing the previous owner of the token",
          "to": "target address that will receive the tokens"
        }
      },
      "_setUserReserves(address,uint256)": {
        "details": "called to set user reserves",
        "params": {
          "newReservedValue": ": value to be sored as user reserve",
          "user": ": participant address"
        }
      },
      "_updateUserReserves(address,uint256,bool)": {
        "details": "called to increase or decrease user reserves",
        "params": {
          "isAddition": ": true if we are adding the new value ",
          "newReserves": ": value to be added or substracted",
          "user": ": participant address"
        }
      },
      "bid(bytes32,uint256)": {
        "details": "called by dapps to bid on an auction ",
        "params": {
          "bidPrice": "price ",
          "listingId": "listing id "
        },
        "returns": {
          "bidId": "bid id"
        }
      },
      "buyNow(bytes32,uint256)": {
        "details": "called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace   ",
        "params": {
          "listingId": "listing id ",
          "price": "gevin price"
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id "
        }
      },
      "changeFees(uint256,uint256)": {
        "details": "the formula is (fees * 1000)/base ",
        "params": {
          "newBase": "the new basefees value to be stored ",
          "newFees": "the new fees value to be stored "
        },
        "returns": {
          "percentage": "the value of the state variable `_feeFraction`"
        }
      },
      "createAuction(address,uint256,uint256,uint256,bool,uint256,uint256)": {
        "details": "called by dapps to create  new auction ",
        "params": {
          "duration": "when auction ends",
          "listingPrice": "min price ",
          "nFTContract": "nft contract address",
          "qualifyAmount": "amount of token locked as qualify for any bidder wants bid ",
          "sellFor": "price  to sell with if sellForEnabled=true",
          "sellForEnabled": "true if auction enable direct selling",
          "tokenId": "token id "
        },
        "returns": {
          "listId": "listing id"
        }
      },
      "deList(bytes32)": {
        "details": "called by seller through dapps when s/he wants to remove this token from the marketplace   ",
        "params": {
          "listingId": "listing id "
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id "
        }
      },
      "disputeAuction(bytes32)": {
        "details": "called by seller through dapps when his/her auction is  not fullfilled after 3 days",
        "params": {
          "listingId": "listing id "
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id "
        }
      },
      "freeReserves()": {
        "details": "called by user through dapps when his/her wants to free his reserved tokens which are no longer in active auction or listing",
        "returns": {
          "curentReserves": "user reserves after freeing the unused reservd"
        }
      },
      "fullfillBid(bytes32)": {
        "details": "called by bidder through dapps when bidder win an auction and wants to pay to get the NFT  ",
        "params": {
          "listingId": "listing id "
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id "
        }
      },
      "getAuctionBidDetails(bytes32,address)": {
        "details": "called by dapp or any contract to get info about a given bidder in a listing    ",
        "params": {
          "bidder": "bidder address",
          "listingId": "listing id      "
        },
        "returns": {
          "bidId": "bid id",
          "bidPrice": "bid price",
          "nFTContract": " nft contract address",
          "tokenId": "nft token id"
        }
      },
      "getListingDetails(bytes32)": {
        "details": "called by dapp or any contract to get info about a gevin listing    ",
        "params": {
          "listingId": "listing id      "
        },
        "returns": {
          "bedEnabeled": "true if auction enabled  ",
          "buyer": " nft buyer address",
          "endPrice": "purchase price",
          "listingPrice": "initial price or minimum price that the seller can accept",
          "qualifyAmount": " amount of token locked as qualify for any bidder wants bid ",
          "releaseTime": " when auction ends",
          "sellFor": "if sell for enabled for auction, this should be more than zero",
          "sellForEnabled": "true if auction enable direct selling",
          "seller": " nft seller address",
          "status": "in number {Sold,OnMarket, onAuction,Canceled}",
          "tokenAddress": " nft contract address",
          "tokenId": "NFT token Id "
        }
      },
      "getServiceFee()": {
        "returns": {
          "_0": "the value of the state variable `_feeFraction`"
        }
      },
      "getUserReserved(address)": {
        "params": {
          "user": ": participant address"
        },
        "returns": {
          "_0": "the value of user reserves"
        }
      },
      "listOnMarketplace(address,uint256,uint256)": {
        "details": "called by dapps to list new item ",
        "params": {
          "listingPrice": "min price ",
          "nFTContract": "nft contract address",
          "tokenId": "token id "
        },
        "returns": {
          "listId": "listing id"
        }
      },
      "marketPlaceName()": {
        "returns": {
          "_0": "market place name"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "winnerBid(bytes32)": {
        "details": "called by dapp or any contract to get info about a winner bid    ",
        "params": {
          "listingId": "listing id      "
        },
        "returns": {
          "bidId": "bid id",
          "bidPrice": "bid price",
          "bidder": "bidder address",
          "isPurchased": "true if purchased",
          "nFTContract": " nft contract address",
          "tokenId": "nft token id"
        }
      }
    },
    "title": "StartFi MarketPlace desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares    ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_addreputationPoints(address,address,uint256)": {
        "notice": "all conditions and checks are made prior to this function. math of point calcualtion is not done yet"
      },
      "_changeBidPenaltyPercentage(uint256,uint256)": {
        "notice": "all conditions and checks are made prior to this function"
      },
      "_changeDelistFeesPerentage(uint256,uint256)": {
        "notice": "all conditions and checks are made prior to this function"
      },
      "_changeListqualifyAmount(uint256,uint256)": {
        "notice": "all conditions and checks are made prior to this function"
      },
      "_changeReputationContract(address)": {
        "notice": "all conditions and checks are made prior to this function"
      },
      "_changeUtiltiyToken(address)": {
        "notice": "all conditions and checks are made prior to this function"
      },
      "_deduct(address,address,uint256)": {
        "notice": "all conditions and checks are made prior to this function"
      },
      "_setUserReserves(address,uint256)": {
        "notice": "all conditions and checks are made prior to this function"
      },
      "_updateUserReserves(address,uint256,bool)": {
        "notice": "all conditions and checks are made prior to this function"
      },
      "buyNow(bytes32,uint256)": {
        "notice": "if auction, the seller must enabe forSale. prices should be more than or equal the listing price"
      },
      "changeFees(uint256,uint256)": {
        "notice": "all conditions and checks are made prior to this function"
      },
      "deList(bytes32)": {
        "notice": "auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine"
      },
      "disputeAuction(bytes32)": {
        "notice": "after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner"
      },
      "freeReserves()": {
        "notice": "this function is greedy, called by user only when s/he wants rather than force the check & updates with every transaction which might be very costly ."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 685,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5162,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "delistAfter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5202,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_tokenListings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Listing)5192_storage)"
      },
      {
        "astId": 4970,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listingBids",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Bid)4958_storage))"
      },
      {
        "astId": 4975,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidToListing",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(WinningBid)4963_storage)"
      },
      {
        "astId": 4755,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_marketPlaceName",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4758,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "RORALTY_INTERFACE",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes4"
      },
      {
        "astId": 7478,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_paymentToken",
        "offset": 4,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7481,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_feeFraction",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7484,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_feeBase",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7487,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidPenaltyPercentage",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7490,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "delistFeesPercentage",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7493,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listqualifyPercentage",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7496,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidPenaltyPercentageBase",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7499,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "delistFeesPercentageBase",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7502,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listqualifyPercentageBase",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 7506,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "userReserves",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7511,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "userListing",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 7513,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "stakeContract",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 7515,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "reputationContract",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 5495,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "minQualifyAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(ListingStatus)5197": {
        "encoding": "inplace",
        "label": "enum MarketPlaceListing.ListingStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Bid)4958_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MarketPlaceBid.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)4958_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Bid)4958_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct MarketPlaceBid.Bid))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Bid)4958_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Listing)5192_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlaceListing.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)5192_storage"
      },
      "t_mapping(t_bytes32,t_struct(WinningBid)4963_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlaceBid.WinningBid)",
        "numberOfBytes": "32",
        "value": "t_struct(WinningBid)4963_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)4958_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceBid.Bid",
        "members": [
          {
            "astId": 4949,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4951,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "nFTContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4953,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4955,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4957,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "isPurchased",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Listing)5192_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceListing.Listing",
        "members": [
          {
            "astId": 5168,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "nFTContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5170,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5172,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "listingPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5174,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "endPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5176,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5178,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "buyer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5180,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bedEnabeled",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 5182,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "sellForEnabled",
            "offset": 21,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 5184,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "releaseTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5186,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "qualifyAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5188,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "sellFor",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5191,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(ListingStatus)5197"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(WinningBid)4963_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceBid.WinningBid",
        "members": [
          {
            "astId": 4960,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4962,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}