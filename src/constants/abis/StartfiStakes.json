{
  "address": "0x6b0fd362031384Dc813937acd9579b5858b058F6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stfiToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "finePayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketplace",
          "type": "address"
        }
      ],
      "name": "setMarketplace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1d261f39d0587e1106873806c3627e522c2bf1ddd5a5efd687798afb20bb83b8",
  "receipt": {
    "to": null,
    "from": "0x0F827B556771a6711dFC7d5DD342a744688a9CDb",
    "contractAddress": "0x6b0fd362031384Dc813937acd9579b5858b058F6",
    "transactionIndex": 0,
    "gasUsed": "607107",
    "logsBloom": "0x
    "blockHash": "0xcfe48a24fc6e32ce9a1ea5f49ae75b9796360aeff94dffc66d5efedb6ee14ff4",
    "transactionHash": "0x1d261f39d0587e1106873806c3627e522c2bf1ddd5a5efd687798afb20bb83b8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17854819,
        "transactionHash": "0x1d261f39d0587e1106873806c3627e522c2bf1ddd5a5efd687798afb20bb83b8",
        "address": "0x6b0fd362031384Dc813937acd9579b5858b058F6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f827b556771a6711dfc7d5dd342a744688a9cdb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcfe48a24fc6e32ce9a1ea5f49ae75b9796360aeff94dffc66d5efedb6ee14ff4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17854819,
        "transactionHash": "0x1d261f39d0587e1106873806c3627e522c2bf1ddd5a5efd687798afb20bb83b8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000f827b556771a6711dfc7d5dd342a744688a9cdb",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000102d345a11410000000000000000000000000000000000000000000000000003c254f4b02acf00000000000000000000000000000000000000000000000000b99ba053ed0511b380000000000000000000000000000000000000000000000003b227c056198e00000000000000000000000000000000000000000000000000b9abcd88471652b38",
        "logIndex": 1,
        "blockHash": "0xcfe48a24fc6e32ce9a1ea5f49ae75b9796360aeff94dffc66d5efedb6ee14ff4"
      }
    ],
    "blockNumber": 17854819,
    "cumulativeGasUsed": "607107",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3a7c0B90AF5DF1f149D22Bc8A69b59de1CafBE8C"
  ],
  "solcInputHash": "c43ab73aedbd503dda171840950295d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stfiToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"finePayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"setMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eman Herawy, StartFi Team\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Startfi Stakes [ desc ] : contract to hold users stakes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartfiStakes.sol\":\"StartfiStakes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xa909b5568d2d26a6616c4b360ef714aab7f32eeb15c8a487071d1801b83319cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x7ede682160d22a53e28112d6557533d15a6babbf4f9e67bf83a4982e0fce55bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6ccfa9bfe7d858830b660bd5f9d51252bec003f93b58f269ba3046b58ad458b0\",\"license\":\"MIT\"},\"contracts/StartfiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\n\\nimport './interface/IStartFiStakes.sol';\\nimport './interface/IStartFiMarketplace.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  Startfi Stakes\\n * [ desc ] : contract to hold users stakes\\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\\n */\\n\\ncontract StartfiStakes is Ownable, IStartFiStakes {\\n    /******************************************* decalrations go here ********************************************************* */\\n    mapping(address => uint256) stakerReserved;\\n    address marketplace;\\n    address stfiToken;\\n    /******************************************* modifiers go here ********************************************************* */\\n    modifier onlyMarketplace() {\\n        require(_msgSender() == marketplace, 'Caller is not the marketplace');\\n        _;\\n    }\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(address _stfiToken) {\\n        stfiToken = _stfiToken;\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    // deposit\\n    function deposit(address user, uint256 amount) external {\\n        require(_getAllowance(_msgSender()) >= amount, 'Invalid amount');\\n        _safeTokenTransferFrom(_msgSender(), address(this), amount);\\n        stakerReserved[user] = stakerReserved[user] + amount;\\n    }\\n\\n    function setMarketplace(address _marketplace) external onlyOwner {\\n        marketplace = _marketplace;\\n    }\\n\\n    function _safeTokenTransfer(address to, uint256 amount) private returns (bool) {\\n        return IERC20(stfiToken).transfer(to, amount);\\n    }\\n\\n    function _safeTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool) {\\n        return IERC20(stfiToken).transferFrom(from, to, amount);\\n    }\\n\\n    // withdraw\\n    function withdraw(uint256 amount) external {\\n        // TODO:check marketplace user reserves\\n        uint256 reserves = IStartFiMarketplace(marketplace).getUserReserved(_msgSender());\\n        uint256 allowance = stakerReserved[_msgSender()] - reserves;\\n        require(allowance <= amount, 'Invalid amount');\\n        _safeTokenTransfer(_msgSender(), amount);\\n        stakerReserved[_msgSender()] = stakerReserved[_msgSender()] - amount;\\n    }\\n\\n    // punish\\n    function deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount\\n    ) external override onlyMarketplace returns (bool) {\\n        require(stakerReserved[finePayer] <= amount, 'Invalid amount');\\n        stakerReserved[finePayer] = stakerReserved[finePayer] - amount;\\n        stakerReserved[to] = stakerReserved[to] + amount;\\n        return true;\\n    }\\n\\n    //getpoolinfo\\n    function getReserves(address owner) external view override returns (uint256) {\\n        return stakerReserved[owner];\\n    }\\n\\n    function _getAllowance(address owner) private view returns (uint256) {\\n        return IERC20(stfiToken).allowance(owner, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x2a99f38672da9d3e5e819d6b463fe830a58bfc32341d1152eb6a2d14d185cc37\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IStartFiMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IStartFiMarketplace {\\n    function getUserReserved(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdae90b5cb61a7dc0e4885142e690cb6250e8ad1dfcd83ef4bdf84660da532de9\",\"license\":\"MIT\"},\"contracts/interface/IStartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IStartFiStakes {\\n    function getReserves(address owner) external view returns (uint256);\\n\\n    function deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa1df0b81fe5235f7005c80728b3a2dbfd2e2257494058f8b00d37326954176ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516109f63803806109f683398101604081905261002f91610095565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b0319166001600160a01b03929092169190911790556100c5565b6000602082840312156100a757600080fd5b81516001600160a01b03811681146100be57600080fd5b9392505050565b610922806100d46000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806373ad6c2d1161005b57806373ad6c2d146100f95780638da5cb5b1461010c578063929c517914610127578063f2fde38b1461014a57600080fd5b80632e1a7d4d1461008d5780633e99c1e4146100a257806347e7ef24146100de578063715018a6146100f1575b600080fd5b6100a061009b366004610818565b61015d565b005b6100cb6100b0366004610775565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100a06100ec3660046107cc565b61026e565b6100a06102e6565b6100a0610107366004610775565b61035a565b6000546040516001600160a01b0390911681526020016100d5565b61013a610135366004610790565b6103a6565b60405190151581526020016100d5565b6100a0610158366004610775565b6104c0565b6002546000906001600160a01b0316631f78fd0b336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156101b157600080fd5b505afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e99190610831565b33600090815260016020526040812054919250906102089083906108bf565b9050828111156102335760405162461bcd60e51b815260040161022a9061084a565b60405180910390fd5b61023d33846105aa565b50336000908152600160205260409020546102599084906108bf565b33600090815260016020526040902055505050565b8061027833610638565b10156102965760405162461bcd60e51b815260040161022a9061084a565b6102a13330836106c2565b506001600160a01b0382166000908152600160205260409020546102c69082906108a7565b6001600160a01b0390921660009081526001602052604090209190915550565b6000546001600160a01b031633146103105760405162461bcd60e51b815260040161022a90610872565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146103845760405162461bcd60e51b815260040161022a90610872565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546000906001600160a01b0316336001600160a01b03161461040c5760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f7420746865206d61726b6574706c616365000000604482015260640161022a565b6001600160a01b0384166000908152600160205260409020548210156104445760405162461bcd60e51b815260040161022a9061084a565b6001600160a01b0384166000908152600160205260409020546104689083906108bf565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546104989083906108a7565b6001600160a01b03841660009081526001602081905260409091209190915590509392505050565b6000546001600160a01b031633146104ea5760405162461bcd60e51b815260040161022a90610872565b6001600160a01b03811661054f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60035460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063191906107f6565b9392505050565b600354604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e9060440160206040518083038186803b15801561068457600080fd5b505afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc9190610831565b92915050565b6003546040516323b872dd60e01b81526001600160a01b03858116600483015284811660248301526044820184905260009216906323b872dd90606401602060405180830381600087803b15801561071957600080fd5b505af115801561072d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075191906107f6565b949350505050565b80356001600160a01b038116811461077057600080fd5b919050565b60006020828403121561078757600080fd5b61063182610759565b6000806000606084860312156107a557600080fd5b6107ae84610759565b92506107bc60208501610759565b9150604084013590509250925092565b600080604083850312156107df57600080fd5b6107e883610759565b946020939093013593505050565b60006020828403121561080857600080fd5b8151801515811461063157600080fd5b60006020828403121561082a57600080fd5b5035919050565b60006020828403121561084357600080fd5b5051919050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156108ba576108ba6108d6565b500190565b6000828210156108d1576108d16108d6565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122058521a8aaa355b42f19076535aa77af69e938f55a0589f51ea5b4dd6b0c2872b64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806373ad6c2d1161005b57806373ad6c2d146100f95780638da5cb5b1461010c578063929c517914610127578063f2fde38b1461014a57600080fd5b80632e1a7d4d1461008d5780633e99c1e4146100a257806347e7ef24146100de578063715018a6146100f1575b600080fd5b6100a061009b366004610818565b61015d565b005b6100cb6100b0366004610775565b6001600160a01b031660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6100a06100ec3660046107cc565b61026e565b6100a06102e6565b6100a0610107366004610775565b61035a565b6000546040516001600160a01b0390911681526020016100d5565b61013a610135366004610790565b6103a6565b60405190151581526020016100d5565b6100a0610158366004610775565b6104c0565b6002546000906001600160a01b0316631f78fd0b336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156101b157600080fd5b505afa1580156101c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e99190610831565b33600090815260016020526040812054919250906102089083906108bf565b9050828111156102335760405162461bcd60e51b815260040161022a9061084a565b60405180910390fd5b61023d33846105aa565b50336000908152600160205260409020546102599084906108bf565b33600090815260016020526040902055505050565b8061027833610638565b10156102965760405162461bcd60e51b815260040161022a9061084a565b6102a13330836106c2565b506001600160a01b0382166000908152600160205260409020546102c69082906108a7565b6001600160a01b0390921660009081526001602052604090209190915550565b6000546001600160a01b031633146103105760405162461bcd60e51b815260040161022a90610872565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146103845760405162461bcd60e51b815260040161022a90610872565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6002546000906001600160a01b0316336001600160a01b03161461040c5760405162461bcd60e51b815260206004820152601d60248201527f43616c6c6572206973206e6f7420746865206d61726b6574706c616365000000604482015260640161022a565b6001600160a01b0384166000908152600160205260409020548210156104445760405162461bcd60e51b815260040161022a9061084a565b6001600160a01b0384166000908152600160205260409020546104689083906108bf565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546104989083906108a7565b6001600160a01b03841660009081526001602081905260409091209190915590509392505050565b6000546001600160a01b031633146104ea5760405162461bcd60e51b815260040161022a90610872565b6001600160a01b03811661054f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161022a565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60035460405163a9059cbb60e01b81526001600160a01b03848116600483015260248201849052600092169063a9059cbb90604401602060405180830381600087803b1580156105f957600080fd5b505af115801561060d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063191906107f6565b9392505050565b600354604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e9060440160206040518083038186803b15801561068457600080fd5b505afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc9190610831565b92915050565b6003546040516323b872dd60e01b81526001600160a01b03858116600483015284811660248301526044820184905260009216906323b872dd90606401602060405180830381600087803b15801561071957600080fd5b505af115801561072d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075191906107f6565b949350505050565b80356001600160a01b038116811461077057600080fd5b919050565b60006020828403121561078757600080fd5b61063182610759565b6000806000606084860312156107a557600080fd5b6107ae84610759565b92506107bc60208501610759565b9150604084013590509250925092565b600080604083850312156107df57600080fd5b6107e883610759565b946020939093013593505050565b60006020828403121561080857600080fd5b8151801515811461063157600080fd5b60006020828403121561082a57600080fd5b5035919050565b60006020828403121561084357600080fd5b5051919050565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156108ba576108ba6108d6565b500190565b6000828210156108d1576108d16108d6565b500390565b634e487b7160e01b600052601160045260246000fdfea264697066735822122058521a8aaa355b42f19076535aa77af69e938f55a0589f51ea5b4dd6b0c2872b64736f6c63430008070033",
  "devdoc": {
    "author": "Eman Herawy, StartFi Team",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Startfi Stakes [ desc ] : contract to hold users stakes",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": ": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/StartfiStakes.sol:StartfiStakes",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9920,
        "contract": "contracts/StartfiStakes.sol:StartfiStakes",
        "label": "stakerReserved",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9922,
        "contract": "contracts/StartfiStakes.sol:StartfiStakes",
        "label": "marketplace",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9924,
        "contract": "contracts/StartfiStakes.sol:StartfiStakes",
        "label": "stfiToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}