{
  "address": "0x0e8782d5c7df69E95c58EDaE2fAD863531690998",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stfiToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "finePayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketplace",
          "type": "address"
        }
      ],
      "name": "setMarketplace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xee6ee5f58dcfda91fb747625d6512d538a21c3cb7aa473da2ac34e6e5ae164fc",
  "receipt": {
    "to": null,
    "from": "0xe092b1fa25DF5786D151246E492Eed3d15EA4dAA",
    "contractAddress": "0x0e8782d5c7df69E95c58EDaE2fAD863531690998",
    "transactionIndex": 0,
    "gasUsed": "665424",
    "logsBloom": "0x
    "blockHash": "0x38f85b71b23d5c4fa69671884dd9a3caacf2b64232cd91932bae7a199d725aa1",
    "transactionHash": "0xee6ee5f58dcfda91fb747625d6512d538a21c3cb7aa473da2ac34e6e5ae164fc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 54311019,
        "transactionHash": "0xee6ee5f58dcfda91fb747625d6512d538a21c3cb7aa473da2ac34e6e5ae164fc",
        "address": "0x0000000000000000000000000000000000000000",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x38f85b71b23d5c4fa69671884dd9a3caacf2b64232cd91932bae7a199d725aa1"
      }
    ],
    "blockNumber": 54311019,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEcA31401263042B2Ec98457D0Ae1CaB9064f948E"
  ],
  "solcInputHash": "540a605660aab0f6c4971604972f3add",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stfiToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"finePayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"name\":\"setMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eman Herawy, StartFi Team\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Startfi Stakes [ desc ] : contract to hold users stakes \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartfiStakes.sol\":\"StartfiStakes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/StartfiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./interface/IStartFiStakes.sol\\\";\\nimport \\\"./interface/IStartFiMarketplace.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  Startfi Stakes\\n * [ desc ] : contract to hold users stakes \\n *@notice : the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle\\n */\\n\\ncontract StartfiStakes is Ownable, IStartFiStakes {\\n    /******************************************* decalrations go here ********************************************************* */\\n    using SafeMath for uint256;\\n    mapping (address=>uint256) stakerReserved;\\n    address marketplace;\\n    address stfiToken;\\n /******************************************* modifiers go here ********************************************************* */\\n modifier onlyMarketplace() {\\n     require(_msgSender()==marketplace,\\\"Caller is not the marketplace\\\");\\n     _;\\n }\\n \\n /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n        \\n          address _stfiToken\\n    )  {\\n       stfiToken=_stfiToken;\\n    }\\n\\n\\n\\n     /******************************************* read state functions go here ********************************************************* */\\n\\n// deposit \\nfunction deposit(address user,uint256 amount) external  {\\n    require(_getAllowance(_msgSender())>=amount,\\\"Invalid amount\\\");\\n    _safeTokenTransferFrom(_msgSender(),address(this),amount);\\n     stakerReserved[user]= stakerReserved[user].add(amount);\\n\\n}\\nfunction setMarketplace(address _marketplace) external onlyOwner  {\\n    marketplace=_marketplace;\\n}\\n function _safeTokenTransfer(address to, uint256 amount) private returns (bool) {\\n        return IERC20(stfiToken). transfer( to,  amount);\\n    }\\n  function _safeTokenTransferFrom(address from,address to, uint256 amount) private returns (bool) {\\n        return IERC20(stfiToken). transferFrom(from, to,  amount);\\n    }\\n// withdraw\\nfunction withdraw(uint256 amount)  external {\\n    // TODO:check marketplace user reserves \\n    uint256 reserves = IStartFiMarketplace(marketplace).getUserReserved(_msgSender());\\n    uint256 allowance = stakerReserved[_msgSender()].sub(reserves);\\n    require( allowance<=amount,\\\"Invalid amount\\\");\\n    _safeTokenTransfer(_msgSender(),amount);\\n     stakerReserved[_msgSender()]= stakerReserved[_msgSender()].sub(amount);\\n\\n}\\n// punish\\nfunction deduct(address finePayer, address to, uint256 amount) external override onlyMarketplace returns (bool) {\\n           require( stakerReserved[finePayer]<=amount,\\\"Invalid amount\\\");\\n         stakerReserved[finePayer]= stakerReserved[finePayer].sub(amount);\\n              stakerReserved[to]= stakerReserved[to].add(amount);\\n              return true;\\n\\n\\n}\\n//getpoolinfo \\n function getReserves(address owner) external override view returns ( uint256){\\n        return stakerReserved[owner];\\n }\\n     function _getAllowance(address owner) view private returns (uint256 ) {\\n        return IERC20(stfiToken).allowance( owner, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xb21396ec4c9e1e0e4e438b552aac0e2d7251c82f4f567587e416bfda823d045a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IStartFiMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IStartFiMarketplace {\\n function getUserReserved(address user) external  view returns (uint256) ;  \\n}\",\"keccak256\":\"0xba0ffdc6f3b214c7679ba10c2f7e1aaf64ec3352345d66beef06cd362c6f2147\",\"license\":\"MIT\"},\"contracts/interface/IStartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IStartFiStakes {\\n function getReserves(address owner) external view returns ( uint256) ;\\n function deduct(address finePayer, address to, uint256 amount) external returns (bool);  \\n}\",\"keccak256\":\"0xc78a6ce22ecb3460e2f25c5402cad95f4bba6896cb87b3be5a9938abdb8c54bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b23380380610b2383398101604081905261002f916100ac565b60006100396100a8565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b0319166001600160a01b03929092169190911790556100da565b3390565b6000602082840312156100bd578081fd5b81516001600160a01b03811681146100d3578182fd5b9392505050565b610a3a806100e96000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806373ad6c2d1161005b57806373ad6c2d146100e65780638da5cb5b146100f9578063929c51791461010e578063f2fde38b1461012e57610088565b80632e1a7d4d1461008d5780633e99c1e4146100a257806347e7ef24146100cb578063715018a6146100de575b600080fd5b6100a061009b366004610836565b610141565b005b6100b56100b0366004610798565b610275565b6040516100c291906109b6565b60405180910390f35b6100a06100d93660046107ed565b610294565b6100a0610319565b6100a06100f4366004610798565b6103a2565b610101610403565b6040516100c29190610866565b61012161011c3660046107b2565b610412565b6040516100c291906108d1565b6100a061013c366004610798565b610501565b6002546000906001600160a01b0316631f78fd0b61015d6105c1565b6040518263ffffffff1660e01b81526004016101799190610866565b60206040518083038186803b15801561019157600080fd5b505afa1580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c9919061084e565b905060006101fd82600160006101dd6105c1565b6001600160a01b03168152602081019190915260400160002054906105c5565b9050828111156102285760405162461bcd60e51b815260040161021f90610922565b60405180910390fd5b6102396102336105c1565b846105d8565b5061024a83600160006101dd6105c1565b600160006102566105c1565b6001600160a01b03168152602081019190915260400160002055505050565b6001600160a01b0381166000908152600160205260409020545b919050565b806102a56102a06105c1565b61065d565b10156102c35760405162461bcd60e51b815260040161021f90610922565b6102d56102ce6105c1565b30836106e6565b506001600160a01b0382166000908152600160205260409020546102f99082610775565b6001600160a01b0390921660009081526001602052604090209190915550565b6103216105c1565b6001600160a01b0316610332610403565b6001600160a01b0316146103585760405162461bcd60e51b815260040161021f90610981565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6103aa6105c1565b6001600160a01b03166103bb610403565b6001600160a01b0316146103e15760405162461bcd60e51b815260040161021f90610981565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6002546000906001600160a01b03166104296105c1565b6001600160a01b03161461044f5760405162461bcd60e51b815260040161021f9061094a565b6001600160a01b0384166000908152600160205260409020548210156104875760405162461bcd60e51b815260040161021f90610922565b6001600160a01b0384166000908152600160205260409020546104aa90836105c5565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546104d99083610775565b6001600160a01b03841660009081526001602081905260409091209190915590509392505050565b6105096105c1565b6001600160a01b031661051a610403565b6001600160a01b0316146105405760405162461bcd60e51b815260040161021f90610981565b6001600160a01b0381166105665760405162461bcd60e51b815260040161021f906108dc565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60006105d182846109d7565b9392505050565b60035460405163a9059cbb60e01b81526000916001600160a01b03169063a9059cbb9061060b90869086906004016108b8565b602060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d19190610816565b600354604051636eb1769f60e11b81526000916001600160a01b03169063dd62ed3e90610690908590309060040161087a565b60206040518083038186803b1580156106a857600080fd5b505afa1580156106bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e0919061084e565b92915050565b6003546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd9061071b90879087908790600401610894565b602060405180830381600087803b15801561073557600080fd5b505af1158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190610816565b949350505050565b60006105d182846109bf565b80356001600160a01b038116811461028f57600080fd5b6000602082840312156107a9578081fd5b6105d182610781565b6000806000606084860312156107c6578182fd5b6107cf84610781565b92506107dd60208501610781565b9150604084013590509250925092565b600080604083850312156107ff578182fd5b61080883610781565b946020939093013593505050565b600060208284031215610827578081fd5b815180151581146105d1578182fd5b600060208284031215610847578081fd5b5035919050565b60006020828403121561085f578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252601d908201527f43616c6c6572206973206e6f7420746865206d61726b6574706c616365000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b600082198211156109d2576109d26109ee565b500190565b6000828210156109e9576109e96109ee565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207ce33b63ac2c35ebeb6425a8673c7f2b8ccb8df63e0672f7ee8cd09cc735bb3264736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806373ad6c2d1161005b57806373ad6c2d146100e65780638da5cb5b146100f9578063929c51791461010e578063f2fde38b1461012e57610088565b80632e1a7d4d1461008d5780633e99c1e4146100a257806347e7ef24146100cb578063715018a6146100de575b600080fd5b6100a061009b366004610836565b610141565b005b6100b56100b0366004610798565b610275565b6040516100c291906109b6565b60405180910390f35b6100a06100d93660046107ed565b610294565b6100a0610319565b6100a06100f4366004610798565b6103a2565b610101610403565b6040516100c29190610866565b61012161011c3660046107b2565b610412565b6040516100c291906108d1565b6100a061013c366004610798565b610501565b6002546000906001600160a01b0316631f78fd0b61015d6105c1565b6040518263ffffffff1660e01b81526004016101799190610866565b60206040518083038186803b15801561019157600080fd5b505afa1580156101a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c9919061084e565b905060006101fd82600160006101dd6105c1565b6001600160a01b03168152602081019190915260400160002054906105c5565b9050828111156102285760405162461bcd60e51b815260040161021f90610922565b60405180910390fd5b6102396102336105c1565b846105d8565b5061024a83600160006101dd6105c1565b600160006102566105c1565b6001600160a01b03168152602081019190915260400160002055505050565b6001600160a01b0381166000908152600160205260409020545b919050565b806102a56102a06105c1565b61065d565b10156102c35760405162461bcd60e51b815260040161021f90610922565b6102d56102ce6105c1565b30836106e6565b506001600160a01b0382166000908152600160205260409020546102f99082610775565b6001600160a01b0390921660009081526001602052604090209190915550565b6103216105c1565b6001600160a01b0316610332610403565b6001600160a01b0316146103585760405162461bcd60e51b815260040161021f90610981565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6103aa6105c1565b6001600160a01b03166103bb610403565b6001600160a01b0316146103e15760405162461bcd60e51b815260040161021f90610981565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6002546000906001600160a01b03166104296105c1565b6001600160a01b03161461044f5760405162461bcd60e51b815260040161021f9061094a565b6001600160a01b0384166000908152600160205260409020548210156104875760405162461bcd60e51b815260040161021f90610922565b6001600160a01b0384166000908152600160205260409020546104aa90836105c5565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546104d99083610775565b6001600160a01b03841660009081526001602081905260409091209190915590509392505050565b6105096105c1565b6001600160a01b031661051a610403565b6001600160a01b0316146105405760405162461bcd60e51b815260040161021f90610981565b6001600160a01b0381166105665760405162461bcd60e51b815260040161021f906108dc565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b60006105d182846109d7565b9392505050565b60035460405163a9059cbb60e01b81526000916001600160a01b03169063a9059cbb9061060b90869086906004016108b8565b602060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d19190610816565b600354604051636eb1769f60e11b81526000916001600160a01b03169063dd62ed3e90610690908590309060040161087a565b60206040518083038186803b1580156106a857600080fd5b505afa1580156106bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e0919061084e565b92915050565b6003546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd9061071b90879087908790600401610894565b602060405180830381600087803b15801561073557600080fd5b505af1158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190610816565b949350505050565b60006105d182846109bf565b80356001600160a01b038116811461028f57600080fd5b6000602082840312156107a9578081fd5b6105d182610781565b6000806000606084860312156107c6578182fd5b6107cf84610781565b92506107dd60208501610781565b9150604084013590509250925092565b600080604083850312156107ff578182fd5b61080883610781565b946020939093013593505050565b600060208284031215610827578081fd5b815180151581146105d1578182fd5b600060208284031215610847578081fd5b5035919050565b60006020828403121561085f578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252600e908201526d125b9d985b1a5908185b5bdd5b9d60921b604082015260600190565b6020808252601d908201527f43616c6c6572206973206e6f7420746865206d61726b6574706c616365000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b90815260200190565b600082198211156109d2576109d26109ee565b500190565b6000828210156109e9576109e96109ee565b500390565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207ce33b63ac2c35ebeb6425a8673c7f2b8ccb8df63e0672f7ee8cd09cc735bb3264736f6c63430008000033",
  "devdoc": {
    "author": "Eman Herawy, StartFi Team",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Startfi Stakes [ desc ] : contract to hold users stakes ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": ": the logic behind this contract is not implemented yet, this is just a basic design for the sake of testing the marketplace cycle",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/StartfiStakes.sol:StartfiStakes",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8074,
        "contract": "contracts/StartfiStakes.sol:StartfiStakes",
        "label": "stakerReserved",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8076,
        "contract": "contracts/StartfiStakes.sol:StartfiStakes",
        "label": "marketplace",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8078,
        "contract": "contracts/StartfiStakes.sol:StartfiStakes",
        "label": "stfiToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}