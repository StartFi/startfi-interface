{
  "address": "0xAD7Fa9d5433444fFecB0c48b3CFa995Dc21DE985",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_marketPlaceName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_paymentContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reputationContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BidOnAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAucton",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyNow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "sellForEnabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellFor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CreateAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fineFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DeListOffMarketplace",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finefees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DisputeAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FullfillBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ListOnMarketplace",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastReserves",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserves",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserReservesFree",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidPenaltyPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "buyNow",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sellForEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sellFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "deList",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delistAfter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delistFeesPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delistFeesPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "disputeAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "curentReserves",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "fullfillBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "getAuctionBidDetails",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "getListingDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bedEnabeled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "sellForEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getServiceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        }
      ],
      "name": "listOnMarketplace",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listqualifyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listqualifyPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPlaceName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "winnerBid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0998f74826b42a77cd09b31fa2b8ad7775a8692f9133340ef6aafa15104c2cf3",
  "receipt": {
    "to": null,
    "from": "0x0F827B556771a6711dFC7d5DD342a744688a9CDb",
    "contractAddress": "0xAD7Fa9d5433444fFecB0c48b3CFa995Dc21DE985",
    "transactionIndex": 0,
    "gasUsed": "3242326",
    "logsBloom": "0x
    "blockHash": "0x78cc209e2cc3233d3904d85d1c19c8dafd64174813fcfac1dba9151bf29a8083",
    "transactionHash": "0x0998f74826b42a77cd09b31fa2b8ad7775a8692f9133340ef6aafa15104c2cf3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17854831,
        "transactionHash": "0x0998f74826b42a77cd09b31fa2b8ad7775a8692f9133340ef6aafa15104c2cf3",
        "address": "0xAD7Fa9d5433444fFecB0c48b3CFa995Dc21DE985",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f827b556771a6711dfc7d5dd342a744688a9cdb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x78cc209e2cc3233d3904d85d1c19c8dafd64174813fcfac1dba9151bf29a8083"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17854831,
        "transactionHash": "0x0998f74826b42a77cd09b31fa2b8ad7775a8692f9133340ef6aafa15104c2cf3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000f827b556771a6711dfc7d5dd342a744688a9cdb",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000005664965f11f200000000000000000000000000000000000000000000000000037a0814499edd00000000000000000000000000000000000000000000000000b9e7d0071caa02738000000000000000000000000000000000000000000000000323a37dea8ceb00000000000000000000000000000000000000000000000000ba3e349d7bbbf4738",
        "logIndex": 1,
        "blockHash": "0x78cc209e2cc3233d3904d85d1c19c8dafd64174813fcfac1dba9151bf29a8083"
      }
    ],
    "blockNumber": 17854831,
    "cumulativeGasUsed": "3242326",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "StartFi Market",
    "0x3a7c0B90AF5DF1f149D22Bc8A69b59de1CafBE8C",
    "0x6b0fd362031384Dc813937acd9579b5858b058F6",
    "0xE31506bA68e3E1a9777c882De9A1965f0d4531eE"
  ],
  "solcInputHash": "c43ab73aedbd503dda171840950295d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_marketPlaceName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_paymentContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reputationContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidOnAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAucton\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyNow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sellForEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fineFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DeListOffMarketplace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finefees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisputeAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FullfillBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ListOnMarketplace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserReservesFree\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidPenaltyPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellForEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sellFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"deList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delistAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delistFeesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delistFeesPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"disputeAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curentReserves\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"fullfillBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getAuctionBidDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"getListingDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bedEnabeled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sellForEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"}],\"name\":\"listOnMarketplace\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listqualifyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listqualifyPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlaceName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"winnerBid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eman Herawy, StartFi Team\",\"kind\":\"dev\",\"methods\":{\"bid(bytes32,uint256)\":{\"details\":\"called by dapps to bid on an auction\",\"params\":{\"bidPrice\":\"price\",\"listingId\":\"listing id\"},\"returns\":{\"bidId\":\"bid id\"}},\"buyNow(bytes32,uint256)\":{\"details\":\"called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace\",\"params\":{\"listingId\":\"listing id\",\"price\":\"gevin price\"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id\"}},\"createAuction(address,uint256,uint256,uint256,bool,uint256,uint256)\":{\"details\":\"called by dapps to create  new auction\",\"params\":{\"duration\":\"when auction ends\",\"listingPrice\":\"min price\",\"nFTContract\":\"nft contract address\",\"qualifyAmount\":\"amount of token locked as qualify for any bidder wants bid\",\"sellFor\":\"price  to sell with if sellForEnabled=true\",\"sellForEnabled\":\"true if auction enable direct selling\",\"tokenId\":\"token id\"},\"returns\":{\"listId\":\"listing id\"}},\"deList(bytes32)\":{\"details\":\"called by seller through dapps when s/he wants to remove this token from the marketplace\",\"params\":{\"listingId\":\"listing id\"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id\"}},\"disputeAuction(bytes32)\":{\"details\":\"called by seller through dapps when his/her auction is  not fullfilled after 3 days\",\"params\":{\"listingId\":\"listing id\"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id\"}},\"freeReserves()\":{\"details\":\"called by user through dapps when his/her wants to free his reserved tokens which are no longer in active auction or listing\",\"returns\":{\"curentReserves\":\"user reserves after freeing the unused reservd\"}},\"fullfillBid(bytes32)\":{\"details\":\"called by bidder through dapps when bidder win an auction and wants to pay to get the NFT\",\"params\":{\"listingId\":\"listing id\"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id\"}},\"getAuctionBidDetails(bytes32,address)\":{\"details\":\"called by dapp or any contract to get info about a given bidder in a listing\",\"params\":{\"bidder\":\"bidder address\",\"listingId\":\"listing id\"},\"returns\":{\"bidId\":\"bid id\",\"bidPrice\":\"bid price\",\"nFTContract\":\" nft contract address\",\"tokenId\":\"nft token id\"}},\"getListingDetails(bytes32)\":{\"details\":\"called by dapp or any contract to get info about a gevin listing    \",\"params\":{\"listingId\":\"listing id      \"},\"returns\":{\"bedEnabeled\":\"true if auction enabled  \",\"buyer\":\" nft buyer address\",\"endPrice\":\"purchase price\",\"listingPrice\":\"initial price or minimum price that the seller can accept\",\"qualifyAmount\":\" amount of token locked as qualify for any bidder wants bid \",\"releaseTime\":\" when auction ends\",\"sellFor\":\"if sell for enabled for auction, this should be more than zero\",\"sellForEnabled\":\"true if auction enable direct selling\",\"seller\":\" nft seller address\",\"status\":\"in number {Sold,OnMarket, onAuction,Canceled}\",\"tokenAddress\":\" nft contract address\",\"tokenId\":\"NFT token Id \"}},\"getServiceFee()\":{\"returns\":{\"_0\":\"the value of the state variable `_feeFraction`\"}},\"getUserReserved(address)\":{\"params\":{\"user\":\": participant address\"},\"returns\":{\"_0\":\"the value of user reserves\"}},\"listOnMarketplace(address,uint256,uint256)\":{\"details\":\"called by dapps to list new item\",\"params\":{\"listingPrice\":\"min price\",\"nFTContract\":\"nft contract address\",\"tokenId\":\"token id\"},\"returns\":{\"listId\":\"listing id\"}},\"marketPlaceName()\":{\"returns\":{\"_0\":\"market place name\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"winnerBid(bytes32)\":{\"details\":\"called by dapp or any contract to get info about a winner bid\",\"params\":{\"listingId\":\"listing id\"},\"returns\":{\"bidId\":\"bid id\",\"bidPrice\":\"bid price\",\"bidder\":\"bidder address\",\"isPurchased\":\"true if purchased\",\"nFTContract\":\" nft contract address\",\"tokenId\":\"nft token id\"}}},\"title\":\"StartFi MarketPlace desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyNow(bytes32,uint256)\":{\"notice\":\"if auction, the seller must enabe forSale. prices should be more than or equal the listing price\"},\"deList(bytes32)\":{\"notice\":\"auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine\"},\"disputeAuction(bytes32)\":{\"notice\":\"after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner\"},\"freeReserves()\":{\"notice\":\"this function is greedy, called by user only when s/he wants rather than force the check & updates with every transaction which might be very costly .\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartFiMarketPlace.sol\":\"StartFiMarketPlace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xa909b5568d2d26a6616c4b360ef714aab7f32eeb15c8a487071d1801b83319cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xd142fc8fd9e34b60fe01f1f2c310fa2e8a45bb4a2c022685a36f8b0ecb8594ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x7ede682160d22a53e28112d6557533d15a6babbf4f9e67bf83a4982e0fce55bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x9306565945d48ff80616a5dbe0c49a8e1daedf4bfc8738e2e96bbb0134e1d011\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xe5b7e7b8bc85ed05a3bfa696bcd5ad5972cb5dca78a890d978c629803c562769\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x71dbbf15c9e07f92e3538d6370e36dfdd7a804459dd6e800638ac35f17335bb2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6ccfa9bfe7d858830b660bd5f9d51252bec003f93b58f269ba3046b58ad458b0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa0fa38ae4425c51cb82463fddf55420789e263cc7fab27baa9dd945c99068757\",\"license\":\"MIT\"},\"contracts/MarketPlaceBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport './interface/IERC721Royalty.sol';\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  MarketPlace Base\\n * [ desc ] : contract to handle the main functions for any marketplace\\n */\\ncontract MarketPlaceBase is ERC721Holder {\\n    /******************************************* decalrations go here ********************************************************* */\\n\\n    string private _marketPlaceName;\\n    bytes4 RORALTY_INTERFACE = 0x2a55205a;\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(string memory _name) {\\n        _marketPlaceName = _name;\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n    /**\\n     *\\n     * @dev  interal function to check if any gevin contract has supportsInterface See {IERC165-supportsInterface}.\\n     * @param _NFTContract NFT contract address\\n     * @return true if this NFT contract support royalty, false if not\\n     */\\n    function _supportRoyalty(address _NFTContract) internal view returns (bool) {\\n        try IERC721(_NFTContract).supportsInterface(RORALTY_INTERFACE) returns (bool isRoyaltySupported) {\\n            return isRoyaltySupported;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     *@notice  only if this contract has royaltyInfo function\\n     *@dev  call the royaltyInfo function in nft contract\\n     *@param _NFTContract NFT contract address\\n     *@param _tokenId token id\\n     *@param _value  token price\\n     *@return issuer original issuer address\\n     *@return _royaltyAmount  the issuer total amount of tokens that he should recieve based on his share\\n     */\\n    function _getRoyaltyInfo(\\n        address _NFTContract,\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) internal view returns (address issuer, uint256 _royaltyAmount) {\\n        (issuer, _royaltyAmount) = IERC721Royalty(_NFTContract).royaltyInfo(_tokenId, _value);\\n    }\\n\\n    /**\\n     * @return market place name\\n     */\\n    function marketPlaceName() external view returns (string memory) {\\n        return _marketPlaceName;\\n    }\\n\\n    /**\\n     *@param _NFTContract NFT contract address\\n     *@param tokenId token id\\n     * @return the owner of the gevin token id and address\\n     */\\n    function tokenOwner(address _NFTContract, uint256 tokenId) internal view returns (address) {\\n        return IERC721(_NFTContract).ownerOf(tokenId);\\n    }\\n\\n    /**\\n\\n     * @dev check if this contract has approved to transfer this erc721 token\\n     *@param _NFTContract NFT contract address\\n     *@param tokenId token id\\n     * @return true if this contract is apporved , false if not\\n     */\\n    function _isTokenApproved(address _NFTContract, uint256 tokenId) internal view returns (bool) {\\n        try IERC721(_NFTContract).getApproved(tokenId) returns (address tokenOperator) {\\n            return tokenOperator == address(this);\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     *@dev See {IERC721-isApprovedForAll}.\\n     *@dev check if this contract has approved to all of this owner's erc721 tokens\\n     *@param _NFTContract NFT contract address\\n     *@param owner token owner\\n     *@return true if this contract is apporved , false if not\\n     */\\n    function _isAllTokenApproved(address _NFTContract, address owner) internal view returns (bool) {\\n        return IERC721(_NFTContract).isApprovedForAll(owner, address(this));\\n    }\\n\\n    /******************************************* state functions go here ********************************************************* */\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function _changeMarketPlaceName(string memory _name) internal {\\n        _marketPlaceName = _name;\\n    }\\n\\n    /**\\n     * @dev  Safely transfers `tokenId` token from `from` to `to`. by calling the base erc721 contract\\n     *@param _NFTContract NFT contract address\\n     *@param tokenId token id\\n     *@param from sender\\n     *@param to recipient\\n     * @return true if it's done\\n     * See {safeTransferFrom}\\n     */\\n    function _safeNFTTransfer(\\n        address _NFTContract,\\n        uint256 tokenId,\\n        address from,\\n        address to\\n    ) internal returns (bool) {\\n        IERC721(_NFTContract).safeTransferFrom(from, to, tokenId);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2e8d8b10ab91fb069cce1b9a3bbf9ea6520edc0effc082e7b2e206fe90caa740\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/MarketPlaceBid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  MarketPlace Bid\\n * [ desc ] : contract handles all the bid related functions for marketplace\\n */\\ncontract MarketPlaceBid {\\n    // using Address for address;\\n    // using EnumerableSet for EnumerableSet.UintSet;\\n    // using EnumerableSet for EnumerableSet.AddressSet;\\n    struct Bid {\\n        bytes32 bidId;\\n        address nFTContract;\\n        uint256 tokenId;\\n        uint256 bidPrice;\\n        bool isPurchased;\\n    }\\n    struct WinningBid {\\n        bytes32 bidId;\\n        address bidder;\\n    }\\n    // lisingId to bid key to bid details\\n    mapping(bytes32 => mapping(address => Bid)) internal listingBids;\\n    // track the bid latest bid id\\n    mapping(bytes32 => WinningBid) internal bidToListing;\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n    /**\\n     *\\n     * @dev   called by dapp or any contract to get info about a winner bid\\n     * @param listingId listing id\\n     * @return bidId bid id\\n     * @return bidder bidder address\\n     * @return nFTContract  nft contract address\\n     * @return tokenId nft token id\\n     * @return bidPrice bid price\\n     * @return isPurchased true if purchased\\n     */\\n    function winnerBid(bytes32 listingId)\\n        external\\n        view\\n        returns (\\n            bytes32 bidId,\\n            address bidder,\\n            address nFTContract,\\n            uint256 tokenId,\\n            uint256 bidPrice,\\n            bool isPurchased\\n        )\\n    {\\n        bidId = bidToListing[listingId].bidId;\\n        bidder = bidToListing[listingId].bidder;\\n        nFTContract = listingBids[listingId][bidder].nFTContract;\\n        tokenId = listingBids[listingId][bidder].tokenId;\\n        bidPrice = listingBids[listingId][bidder].bidPrice;\\n        isPurchased = listingBids[listingId][bidder].isPurchased;\\n    }\\n\\n    /**\\n     *\\n     * @dev   called by dapp or any contract to get info about a given bidder in a listing\\n     * @param listingId listing id\\n     * @param bidder bidder address\\n     * @return bidId bid id\\n     * @return nFTContract  nft contract address\\n     * @return tokenId nft token id\\n     * @return bidPrice bid price\\n     */\\n    function getAuctionBidDetails(bytes32 listingId, address bidder)\\n        external\\n        view\\n        returns (\\n            bytes32 bidId,\\n            address nFTContract,\\n            uint256 tokenId,\\n            uint256 bidPrice,\\n            bool isPurchased\\n        )\\n    {\\n        bidId = listingBids[listingId][bidder].bidId;\\n        nFTContract = listingBids[listingId][bidder].nFTContract;\\n        tokenId = listingBids[listingId][bidder].tokenId;\\n        bidPrice = listingBids[listingId][bidder].bidPrice;\\n        isPurchased = listingBids[listingId][bidder].isPurchased;\\n    }\\n\\n    /******************************************* change state functions go here ********************************************************* */\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev  add new bid , update the latest bidder to be his bid\\n     * @param bidId bid id\\n     * @param listingId listing id\\n     * @param tokenAddress nft contract address\\n     * @param bidder bidder address\\n     * @param tokenId token id\\n     * @param bidPrice price\\n     * @return true if it's done\\n     */\\n    function _bid(\\n        bytes32 bidId,\\n        bytes32 listingId,\\n        address tokenAddress,\\n        address bidder,\\n        uint256 tokenId,\\n        uint256 bidPrice\\n    ) internal returns (bool) {\\n        // where bid winner is the last bidder updated\\n        bidToListing[listingId] = WinningBid(bidId, bidder);\\n        listingBids[listingId][bidder] = Bid(bidId, tokenAddress, tokenId, bidPrice, false);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x879991b2c29021eddde3fa9d220b525daebf8bfcbbc3cdde63928fcfa8290fac\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/MarketPlaceListing.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  MarketPlace Listing\\n * [ desc ] : contract handle all item list in marketplace related function\\n */\\ncontract MarketPlaceListing {\\n    // all fees are in perentage\\n\\n    // delist after 6 month\\n    uint256 public delistAfter = 6 * 30 days;\\n\\n    constructor() {}\\n\\n    // using Address for address;\\n    // using EnumerableSet for EnumerableSet.UintSet;\\n    // using EnumerableSet for EnumerableSet.AddressSet;\\n    struct Listing {\\n        address nFTContract;\\n        uint256 tokenId;\\n        uint256 listingPrice;\\n        uint256 endPrice;\\n        address seller;\\n        address buyer;\\n        bool bedEnabeled;\\n        bool sellForEnabled;\\n        // only if bed and sell for enabled\\n        uint256 releaseTime;\\n        uint256 qualifyAmount;\\n        uint256 sellFor;\\n        ListingStatus status;\\n    }\\n    enum ListingStatus {\\n        Sold,\\n        OnMarket,\\n        onAuction,\\n        Canceled\\n    }\\n    // listing key  to lisitng details\\n    mapping(bytes32 => Listing) internal _tokenListings;\\n\\n    // track the Listinger total amount of Listings\\n    // mapping (address=>uint256) private userTotalListings;\\n    /******************************************* read state functions go here ********************************************************* */\\n    /**\\n    * \\n      * @dev   called by dapp or any contract to get info about a gevin listing    \\n      * @param listingId listing id      \\n\\n      * @return tokenAddress  nft contract address\\n      * @return tokenId NFT token Id \\n      * @return listingPrice initial price or minimum price that the seller can accept\\n      * @return endPrice purchase price\\n      * @return seller  nft seller address\\n      * @return buyer  nft buyer address\\n      * @return bedEnabeled true if auction enabled  \\n      * @return sellForEnabled true if auction enable direct selling\\n      * @return releaseTime  when auction ends\\n      * @return qualifyAmount  amount of token locked as qualify for any bidder wants bid \\n      * @return sellFor if sell for enabled for auction, this should be more than zero\\n      * @return status in number {Sold,OnMarket, onAuction,Canceled}\\n     */\\n    function getListingDetails(bytes32 listingId)\\n        external\\n        view\\n        returns (\\n            address tokenAddress,\\n            uint256 tokenId,\\n            uint256 listingPrice,\\n            uint256 endPrice,\\n            address seller,\\n            address buyer,\\n            bool bedEnabeled,\\n            bool sellForEnabled,\\n            uint256 releaseTime,\\n            uint256 qualifyAmount,\\n            uint256 sellFor,\\n            uint256 status\\n        )\\n    {\\n        tokenAddress = _tokenListings[listingId].nFTContract;\\n        tokenId = _tokenListings[listingId].tokenId;\\n        listingPrice = _tokenListings[listingId].listingPrice;\\n        endPrice = _tokenListings[listingId].endPrice;\\n        seller = _tokenListings[listingId].seller;\\n        buyer = _tokenListings[listingId].buyer;\\n        bedEnabeled = _tokenListings[listingId].bedEnabeled;\\n        sellForEnabled = _tokenListings[listingId].sellForEnabled;\\n        releaseTime = _tokenListings[listingId].releaseTime;\\n        qualifyAmount = _tokenListings[listingId].qualifyAmount;\\n        sellFor = _tokenListings[listingId].sellFor;\\n        status = uint256(_tokenListings[listingId].status);\\n    }\\n\\n    // list\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev  add new item for sale in marketplace\\n     * @param listId listing id\\n     * @param tokenAddress nft contract address\\n     * @param seller seller address\\n     * @param tokenId token id\\n     * @param listingPrice min price\\n     * @param releaseTime  time to delist for free\\n     * @return true if it's done\\n     */\\n    function _listOnMarketPlace(\\n        bytes32 listId,\\n        address tokenAddress,\\n        address seller,\\n        uint256 tokenId,\\n        uint256 listingPrice,\\n        uint256 releaseTime\\n    ) internal returns (bool) {\\n        _tokenListings[listId] = Listing(\\n            tokenAddress,\\n            tokenId,\\n            listingPrice,\\n            0,\\n            seller,\\n            address(0),\\n            false,\\n            false,\\n            releaseTime,\\n            0,\\n            0,\\n            ListingStatus.OnMarket\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev  add new auction\\n     * @param listId listing id\\n     * @param tokenAddress nft contract address\\n     * @param seller seller address\\n     * @param tokenId token id\\n     * @param listingPrice min price\\n     * @param sellForEnabled true if auction enable direct selling\\n     * @param sellFor  price  to sell with if sellForEnabled=true\\n     * @param releaseTime  when auction ends\\n     * @param qualifyAmount  amount of token locked as qualify for any bidder wants bid\\n     * @return true if it's done\\n     */\\n    function _creatAuction(\\n        bytes32 listId,\\n        address tokenAddress,\\n        address seller,\\n        uint256 tokenId,\\n        uint256 listingPrice,\\n        bool sellForEnabled,\\n        uint256 sellFor,\\n        uint256 releaseTime,\\n        uint256 qualifyAmount\\n    ) internal returns (bool) {\\n        _tokenListings[listId] = Listing(\\n            tokenAddress,\\n            tokenId,\\n            listingPrice,\\n            0,\\n            seller,\\n            address(0),\\n            true,\\n            sellForEnabled,\\n            releaseTime,\\n            qualifyAmount,\\n            sellFor,\\n            ListingStatus.onAuction\\n        );\\n        return true;\\n    }\\n\\n    function _finalizeListing(\\n        bytes32 listId,\\n        address buyer,\\n        ListingStatus status\\n    ) internal {\\n        _tokenListings[listId].status = status;\\n        if (buyer != address(0)) {\\n            _tokenListings[listId].buyer = buyer;\\n        }\\n    }\\n\\n    /**\\n     *  @notice  all conditions and checks are made prior to this function\\n     * @dev  delist an item by mark status as canceled\\n     * @param listingId listing id\\n     *\\n     */\\n    function _deList(bytes32 listingId) internal {\\n        _tokenListings[listingId].status = ListingStatus.Canceled;\\n    }\\n\\n    /**\\n     *  @notice  all conditions and checks are made prior to this function\\n     * @dev  change the duration of which user can delist thier nfts for free after it\\n     * @param duration in seconds , eg 30 days in desconds\\n     *\\n     */\\n    function _changeDelistAfter(uint256 duration) internal {\\n        delistAfter = duration;\\n    }\\n}\\n\",\"keccak256\":\"0xacc6a150bf6fcc3034d239f621d1911dc64eee81805d22cfd0e79d9f393f5c44\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartFiMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\nimport './StartfiMarketPlaceFinance.sol';\\nimport './MarketPlaceListing.sol';\\nimport './MarketPlaceBid.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title StartFi MarketPlace\\n *desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares\\n *\\n */\\ncontract StartFiMarketPlace is Ownable, Pausable, MarketPlaceListing, MarketPlaceBid, StartfiMarketPlaceFinance {\\n    /******************************************* decalrations go here ********************************************************* */\\n    // TODO: to be updated ( using value or percentage?? develop function to ready and update the value)\\n    uint256 minQualifyAmount = 10;\\n\\n    // events when auction created auction bid auction cancled auction fullfiled item listed , item purchesed , itme delisted , item delist with deduct , item  disputed , user free reserved ,\\n    ///\\n    event ListOnMarketplace(\\n        bytes32 listId,\\n        address nFTContract,\\n        address buyer,\\n        uint256 tokenId,\\n        uint256 listingPrice,\\n        uint256 releaseTime,\\n        uint256 qualifyAmount,\\n        uint256 timestamp\\n    );\\n    event DeListOffMarketplace(\\n        bytes32 listId,\\n        address nFTContract,\\n        address owner,\\n        uint256 tokenId,\\n        uint256 fineFees,\\n        uint256 remaining,\\n        uint256 releaseTime,\\n        uint256 timestamp\\n    );\\n\\n    event CreateAuction(\\n        bytes32 listId,\\n        address nFTContract,\\n        address seller,\\n        uint256 tokenId,\\n        uint256 listingPrice,\\n        bool sellForEnabled,\\n        uint256 sellFor,\\n        uint256 releaseTime,\\n        uint256 qualifyAmount,\\n        uint256 timestamp\\n    );\\n\\n    event BidOnAuction(\\n        bytes32 bidId,\\n        bytes32 listingId,\\n        address tokenAddress,\\n        address bidder,\\n        uint256 tokenId,\\n        uint256 bidPrice,\\n        uint256 timestamp\\n    );\\n\\n    event FullfillBid(\\n        bytes32 bidId,\\n        bytes32 listingId,\\n        address tokenAddress,\\n        address bidder,\\n        uint256 tokenId,\\n        uint256 bidPrice,\\n        address issuer,\\n        uint256 royaltyAmount,\\n        uint256 fees,\\n        uint256 netPrice,\\n        uint256 timestamp\\n    );\\n\\n    event DisputeAuction(\\n        bytes32 bidId,\\n        bytes32 listingId,\\n        address tokenAddress,\\n        address bidder,\\n        uint256 tokenId,\\n        address seller,\\n        uint256 qualifyAmount,\\n        uint256 remaining,\\n        uint256 finefees,\\n        uint256 timestamp\\n    );\\n\\n    event BuyNow(\\n        bytes32 listId,\\n        address nFTContract,\\n        address buyer,\\n        uint256 tokenId,\\n        uint256 sellingPrice,\\n        address seller,\\n        bool isAucton,\\n        address issuer,\\n        uint256 royaltyAmount,\\n        uint256 fees,\\n        uint256 netPrice,\\n        uint256 timestamp\\n    );\\n    event UserReservesFree(address user, uint256 lastReserves, uint256 newReserves, uint256 timestamp);\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n        string memory _marketPlaceName,\\n        address _paymentContract,\\n        address _stakeContract,\\n        address _reputationContract\\n    ) StartfiMarketPlaceFinance(_marketPlaceName, _paymentContract, _reputationContract) {\\n        stakeContract = _stakeContract;\\n    }\\n\\n    /******************************************* modifiers go here ********************************************************* */\\n\\n    modifier isOpenAuction(bytes32 listingId) {\\n        require(\\n            _tokenListings[listingId].releaseTime > block.timestamp &&\\n                _tokenListings[listingId].status == ListingStatus.onAuction,\\n            'Auction is ended'\\n        );\\n        _;\\n    }\\n    modifier canFullfillBid(bytes32 listingId) {\\n        require(\\n            _tokenListings[listingId].releaseTime < block.timestamp &&\\n                _tokenListings[listingId].status == ListingStatus.onAuction,\\n            'Auction is ended'\\n        );\\n        _;\\n    }\\n    modifier isOpenForSale(bytes32 listingId) {\\n        require(_tokenListings[listingId].status == ListingStatus.OnMarket, 'Item is not for sale');\\n        _;\\n    }\\n    modifier isNotZero(uint256 val) {\\n        require(val > 0, 'Zero Value is not allowed');\\n        _;\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    /******************************************* state functions go here ********************************************************* */\\n\\n    // list\\n    /**\\n     * @dev  called by dapps to list new item\\n     * @param nFTContract nft contract address\\n     * @param tokenId token id\\n     * @param listingPrice min price\\n     * @return listId listing id\\n     */\\n    function listOnMarketplace(\\n        address nFTContract,\\n        uint256 tokenId,\\n        uint256 listingPrice\\n    ) external isNotZero(listingPrice) returns (bytes32 listId) {\\n        uint256 releaseTime = _calcSum(block.timestamp, delistAfter);\\n        listId = keccak256(abi.encodePacked(nFTContract, tokenId, _msgSender(), releaseTime));\\n        // calc qualified ammount\\n        uint256 listQualifyAmount = _getListingQualAmount(listingPrice);\\n\\n        // check that sender is qualified\\n        require(\\n            _getStakeAllowance(\\n                _msgSender() /*, 0*/\\n            ) >= listQualifyAmount,\\n            'Not enough reserves'\\n        );\\n        require(_isTokenApproved(nFTContract, tokenId), 'Marketplace is not allowed to transfer your token');\\n\\n        // transfer token to contract\\n        require(\\n            _safeNFTTransfer(nFTContract, tokenId, _msgSender(), address(this)),\\n            \\\"NFT token couldn't be transfered\\\"\\n        );\\n\\n        // update reserved\\n        _updateUserReserves(_msgSender(), listQualifyAmount, true);\\n        bytes32[] storage listings = userListing[_msgSender()];\\n        listings.push(listId);\\n        userListing[_msgSender()] = listings;\\n        // list\\n        require(\\n            _listOnMarketPlace(listId, nFTContract, _msgSender(), tokenId, listingPrice, releaseTime),\\n            \\\"Couldn't list the item\\\"\\n        );\\n        emit ListOnMarketplace(\\n            listId,\\n            nFTContract,\\n            _msgSender(),\\n            tokenId,\\n            listingPrice,\\n            releaseTime,\\n            listQualifyAmount,\\n            block.timestamp\\n        );\\n    }\\n\\n    // create auction\\n    /**\\n     * @dev  called by dapps to create  new auction\\n     * @param nFTContract nft contract address\\n     * @param tokenId token id\\n     * @param listingPrice min price\\n     * @param qualifyAmount  amount of token locked as qualify for any bidder wants bid\\n     * @param sellForEnabled true if auction enable direct selling\\n     * @param sellFor  price  to sell with if sellForEnabled=true\\n     * @param duration  when auction ends\\n     * @return listId listing id\\n     */\\n    function createAuction(\\n        address nFTContract,\\n        uint256 tokenId,\\n        uint256 listingPrice,\\n        uint256 qualifyAmount,\\n        bool sellForEnabled,\\n        uint256 sellFor,\\n        uint256 duration\\n    ) external isNotZero(listingPrice) returns (bytes32 listId) {\\n        require(duration > 12 hours, 'Auction should be live for more than 12 hours');\\n        require(qualifyAmount >= minQualifyAmount, 'Invalid Auction qualify Amount');\\n\\n        uint256 releaseTime = _calcSum(block.timestamp, duration);\\n        listId = keccak256(abi.encodePacked(nFTContract, tokenId, _msgSender(), releaseTime));\\n        if (sellForEnabled) {\\n            require(sellFor > 0, 'Zero price is not allowed');\\n        }\\n        // check that sender is qualified\\n        require(_isTokenApproved(nFTContract, tokenId), 'Marketplace is not allowed to transfer your token');\\n\\n        // transfer token to contract\\n        require(\\n            _safeNFTTransfer(nFTContract, tokenId, _msgSender(), address(this)),\\n            \\\"NFT token couldn't be transfered\\\"\\n        );\\n\\n        // update reserved\\n        // create auction\\n\\n        require(\\n            _creatAuction(\\n                listId,\\n                nFTContract,\\n                _msgSender(),\\n                tokenId,\\n                listingPrice,\\n                sellForEnabled,\\n                sellFor,\\n                releaseTime,\\n                qualifyAmount\\n            ),\\n            \\\"Couldn't list the item\\\"\\n        );\\n        emit CreateAuction(\\n            listId,\\n            nFTContract,\\n            _msgSender(),\\n            tokenId,\\n            listingPrice,\\n            sellForEnabled,\\n            sellFor,\\n            releaseTime,\\n            qualifyAmount,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev called by dapps to bid on an auction\\n     *\\n     * @param listingId listing id\\n     * @param bidPrice price\\n     * @return bidId bid id\\n     */\\n    function bid(bytes32 listingId, uint256 bidPrice) external isOpenAuction(listingId) returns (bytes32 bidId) {\\n        address tokenAddress = _tokenListings[listingId].nFTContract;\\n        uint256 tokenId = _tokenListings[listingId].tokenId;\\n        bidId = keccak256(abi.encodePacked(listingId, tokenAddress, _msgSender(), tokenId));\\n        // bid should be more than than the mini and more than the last bid\\n        address lastbidder = bidToListing[listingId].bidder;\\n        uint256 qualifyAmount = _tokenListings[listingId].qualifyAmount;\\n        if (lastbidder == address(0)) {\\n            require(\\n                bidPrice >= _tokenListings[listingId].listingPrice,\\n                'bid price must be more than or equal the minimum price'\\n            );\\n        } else {\\n            require(bidPrice > listingBids[listingId][lastbidder].bidPrice, 'bid price must be more than the last bid');\\n        }\\n        // if this is the bidder first bid, the price will be 0\\n        uint256 prevAmount = listingBids[listingId][_msgSender()].bidPrice;\\n        if (prevAmount == 0) {\\n            // check that he has reserved\\n            require(\\n                _getStakeAllowance(\\n                    _msgSender() /*, 0*/\\n                ) >= qualifyAmount,\\n                'Not enough reserves'\\n            );\\n            bytes32[] storage listings = userListing[_msgSender()];\\n            listings.push(listingId);\\n            userListing[_msgSender()] = listings;\\n            // update user reserves\\n            // reserve Zero couldn't be at any case\\n            require(_updateUserReserves(_msgSender(), qualifyAmount, true) > 0, 'Reserve Zero is not allowed');\\n        }\\n\\n        // bid\\n        require(_bid(bidId, listingId, tokenAddress, _msgSender(), tokenId, bidPrice), \\\"Couldn't Bid\\\");\\n        emit BidOnAuction(bidId, listingId, tokenAddress, _msgSender(), tokenId, bidPrice, block.timestamp);\\n\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n\\n    /**\\n     * @dev called by bidder through dapps when bidder win an auction and wants to pay to get the NFT\\n     *\\n     * @param listingId listing id\\n     * @return _NFTContract nft contract address\\n     * @return tokenId token id\\n     */\\n    function fullfillBid(bytes32 listingId)\\n        external\\n        canFullfillBid(listingId)\\n        returns (address _NFTContract, uint256 tokenId)\\n    {\\n        address winnerBidder = bidToListing[listingId].bidder;\\n        address seller = _tokenListings[listingId].seller;\\n        _NFTContract = _tokenListings[listingId].nFTContract;\\n        tokenId = _tokenListings[listingId].tokenId;\\n        require(winnerBidder == _msgSender(), 'Caller is not the winner');\\n        // if it's new, the price will be 0\\n        uint256 bidPrice = listingBids[listingId][winnerBidder].bidPrice;\\n        // check that contract is allowed to transfer tokens\\n        require(\\n            _getAllowance(winnerBidder) >= bidPrice,\\n            'Marketplace is not allowed to withdraw the required amount of tokens'\\n        );\\n        // transfer price\\n\\n        (address issuer, uint256 royaltyAmount, uint256 fees, uint256 netPrice) = _getListingFinancialInfo(\\n            _NFTContract,\\n            tokenId,\\n            bidPrice\\n        );\\n\\n        require(_safeTokenTransferFrom(winnerBidder, owner(), fees), \\\"Couldn't transfer token as fees\\\");\\n        if (issuer != address(0)) {\\n            require(_safeTokenTransferFrom(winnerBidder, issuer, royaltyAmount), \\\"Couldn't transfer token to issuer\\\");\\n        }\\n\\n        // token value could be zero ater taking the roylty share ??? need to ask?\\n        require(_safeTokenTransferFrom(winnerBidder, seller, netPrice), \\\"Couldn't transfer token to buyer\\\");\\n        // trnasfer token\\n        require(\\n            _safeNFTTransfer(_NFTContract, tokenId, address(this), winnerBidder),\\n            \\\"NFT token couldn't be transfered\\\"\\n        );\\n        // update user reserves\\n        // reserve nigative couldn't be at any case\\n        require(\\n            _updateUserReserves(winnerBidder, _tokenListings[listingId].qualifyAmount, false) >= 0,\\n            'negative reserve is not allowed'\\n        );\\n        listingBids[listingId][_msgSender()].isPurchased = true;\\n        // TODO: add reputation points to both seller and buyer\\n        _addreputationPoints(seller, winnerBidder, bidPrice);\\n\\n        // finish listing\\n        _finalizeListing(listingId, winnerBidder, ListingStatus.Sold);\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n        emit FullfillBid(\\n            bidToListing[listingId].bidId,\\n            listingId,\\n            _NFTContract,\\n            winnerBidder,\\n            tokenId,\\n            bidPrice,\\n            issuer,\\n            royaltyAmount,\\n            fees,\\n            netPrice,\\n            block.timestamp\\n        );\\n    }\\n\\n    // delist\\n    /**\\n     * @dev called by seller through dapps when s/he wants to remove this token from the marketplace\\n     * @notice auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine\\n     * @param listingId listing id\\n     * @return _NFTContract nft contract address\\n     * @return tokenId token id\\n     */\\n    function deList(bytes32 listingId) external returns (address _NFTContract, uint256 tokenId) {\\n        ListingStatus status = _tokenListings[listingId].status;\\n        address buyer = _tokenListings[listingId].buyer;\\n        address owner = _tokenListings[listingId].seller;\\n        _NFTContract = _tokenListings[listingId].nFTContract;\\n        uint256 releaseTime = _tokenListings[listingId].releaseTime;\\n        uint256 listingPrice = _tokenListings[listingId].listingPrice;\\n        tokenId = _tokenListings[listingId].tokenId;\\n        require(owner == _msgSender(), 'Caller is not the owner');\\n        require(buyer == address(0), 'Already bought token');\\n        uint256 timeToDelistAuction = _calcSum(releaseTime, 3 days);\\n\\n        // require(status==ListingStatus.OnMarket || status==ListingStatus.onAuction,\\\"Already bought or canceled token\\\");\\n        require(\\n            (timeToDelistAuction <= block.timestamp && status == ListingStatus.onAuction) ||\\n                (status == ListingStatus.OnMarket),\\n            \\\"Can't delist\\\"\\n        );\\n        uint256 fineAmount;\\n        uint256 remaining;\\n        // if realse time < now , pay\\n        if (status != ListingStatus.onAuction) {\\n            if (releaseTime < block.timestamp) {\\n                // if it's not auction ? pay,\\n                (fineAmount, remaining) = _getDeListingQualAmount(listingPrice);\\n                //TODO: deduct the fine from his stake contract\\n\\n                require(_deduct(owner, getAdminWallet(), fineAmount), \\\"couldn't deduct the fine\\\");\\n            } else {\\n                remaining = _getListingQualAmount(listingPrice);\\n            }\\n            // update user reserves\\n            // reserve nigative couldn't be at any case\\n            require(_updateUserReserves(_msgSender(), remaining, false) >= 0, 'negative reserve is not allowed');\\n        }\\n\\n        // trnasfer token\\n        require(_safeNFTTransfer(_NFTContract, tokenId, address(this), owner), \\\"NFT token couldn't be transfered\\\");\\n        // finish listing\\n        _finalizeListing(listingId, address(0), ListingStatus.Canceled);\\n        emit DeListOffMarketplace(\\n            listingId,\\n            _NFTContract,\\n            owner,\\n            tokenId,\\n            fineAmount,\\n            remaining,\\n            releaseTime,\\n            block.timestamp\\n        );\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n\\n    // buynow\\n    /**\\n     * @dev called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace\\n     * @notice  if auction, the seller must enabe forSale. prices should be more than or equal the listing price\\n     * @param listingId listing id\\n     * @param price gevin price\\n     * @return _NFTContract nft contract address\\n     * @return tokenId token id\\n     */\\n    function buyNow(bytes32 listingId, uint256 price) external returns (address _NFTContract, uint256 tokenId) {\\n        bool sellForEnabled = _tokenListings[listingId].sellForEnabled;\\n        address seller = _tokenListings[listingId].seller;\\n        _NFTContract = _tokenListings[listingId].nFTContract;\\n        tokenId = _tokenListings[listingId].tokenId;\\n        require(price >= _tokenListings[listingId].listingPrice, 'Invalid price');\\n        require(\\n            _tokenListings[listingId].status == ListingStatus.OnMarket ||\\n                (_tokenListings[listingId].status == ListingStatus.onAuction &&\\n                    sellForEnabled == true &&\\n                    _tokenListings[listingId].releaseTime > block.timestamp),\\n            'Token isnot for sale '\\n        );\\n        // check that contract is allowed to transfer tokens\\n        require(\\n            _getAllowance(_msgSender()) >= price,\\n            'Marketplace is not allowed to withdraw the required amount of tokens'\\n        );\\n        // transfer price\\n\\n        (address issuer, uint256 royaltyAmount, uint256 fees, uint256 netPrice) = _getListingFinancialInfo(\\n            _NFTContract,\\n            tokenId,\\n            price\\n        );\\n\\n        require(_safeTokenTransferFrom(_msgSender(), owner(), fees), \\\"Couldn't transfer token as fees\\\");\\n        if (issuer != address(0)) {\\n            require(_safeTokenTransferFrom(_msgSender(), issuer, royaltyAmount), \\\"Couldn't transfer token to issuer\\\");\\n        }\\n\\n        // token value could be zero ater taking the roylty share ??? need to ask?\\n        require(_safeTokenTransferFrom(_msgSender(), seller, netPrice), \\\"Couldn't transfer token to seller\\\");\\n        // trnasfer token\\n        require(\\n            _safeNFTTransfer(_NFTContract, tokenId, address(this), _msgSender()),\\n            \\\"NFT token couldn't be transfered\\\"\\n        );\\n        uint256 ListingQualAmount = _getListingQualAmount(_tokenListings[listingId].listingPrice);\\n\\n        require(_updateUserReserves(seller, ListingQualAmount, false) >= 0, 'negative reserve is not allowed');\\n\\n        // finish listing\\n        _finalizeListing(listingId, _msgSender(), ListingStatus.Sold);\\n        // TODO: add reputation points to both seller and buyer\\n        _addreputationPoints(seller, _msgSender(), price);\\n        emit BuyNow(\\n            listingId,\\n            _NFTContract,\\n            _msgSender(),\\n            tokenId,\\n            price,\\n            seller,\\n            sellForEnabled,\\n            issuer,\\n            royaltyAmount,\\n            fees,\\n            netPrice,\\n            block.timestamp\\n        );\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n\\n    /**\\n     * @dev called by seller through dapps when his/her auction is  not fullfilled after 3 days\\n     *  @notice  after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner\\n     * @param listingId listing id\\n     * @return _NFTContract nft contract address\\n     * @return tokenId token id\\n     */\\n    function disputeAuction(bytes32 listingId) external returns (address _NFTContract, uint256 tokenId) {\\n        address winnerBidder = bidToListing[listingId].bidder;\\n        address seller = _tokenListings[listingId].seller;\\n        _NFTContract = _tokenListings[listingId].nFTContract;\\n        tokenId = _tokenListings[listingId].tokenId;\\n        uint256 qualifyAmount = _tokenListings[listingId].qualifyAmount;\\n        uint256 timeToDispute = _calcSum(_tokenListings[listingId].releaseTime, 3 days);\\n        require(winnerBidder != address(0) && timeToDispute >= block.timestamp, 'No bids or still running auction');\\n        require(seller == _msgSender(), 'Caller is not the owner');\\n        require(!listingBids[listingId][winnerBidder].isPurchased, 'Already purchased');\\n        // call staking contract to deduct\\n        (uint256 fineAmount, uint256 remaining) = _calcBidDisputeFees(qualifyAmount);\\n        require(_deduct(winnerBidder, getAdminWallet(), fineAmount), \\\"couldn't deduct the fine for the admin wallet\\\");\\n        require(_deduct(winnerBidder, seller, remaining), \\\"couldn't deduct the fine for the admin wallet\\\");\\n        // trnasfer token\\n        require(_safeNFTTransfer(_NFTContract, tokenId, address(this), seller), \\\"NFT token couldn't be transfered\\\");\\n        require(_updateUserReserves(winnerBidder, qualifyAmount, false) >= 0, 'negative reserve is not allowed');\\n\\n        // finish listing\\n        _finalizeListing(listingId, address(0), ListingStatus.Canceled);\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n        emit DisputeAuction(\\n            bidToListing[listingId].bidId,\\n            listingId,\\n            _NFTContract,\\n            winnerBidder,\\n            tokenId,\\n            seller,\\n            qualifyAmount,\\n            remaining,\\n            fineAmount,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n    * @dev called by user through dapps when his/her wants to free his reserved tokens which are no longer in active auction or listing\\n    *  @notice this function is greedy, called by user only when s/he wants rather than force the check & updates with every transaction which might be very costly .\\n  \\n    * @return curentReserves user reserves after freeing the unused reservd\\n\\n     */\\n\\n    function freeReserves() external returns (uint256 curentReserves) {\\n        // TODo: Check allternative for gas consumptions\\n        // iterate over the listng key map\\n        // if it's sold, canceled,  free if he is participating on this listing\\n        uint256 lastReserves = userReserves[_msgSender()];\\n        bytes32[] memory listings = userListing[_msgSender()];\\n        delete userListing[_msgSender()];\\n        bytes32[] storage newListings = userListing[_msgSender()];\\n\\n        // loop\\n        for (uint256 index = 0; index < listings.length; index++) {\\n            if (_tokenListings[listings[index]].status == ListingStatus.onAuction) {\\n                newListings.push(listings[index]);\\n                curentReserves = _calcSum(curentReserves, _tokenListings[listings[index]].qualifyAmount);\\n            } else if (_tokenListings[listings[index]].status == ListingStatus.OnMarket) {\\n                newListings.push(listings[index]);\\n                uint256 listQualifyAmount = _getListingQualAmount(_tokenListings[listings[index]].listingPrice);\\n\\n                curentReserves = _calcSum(curentReserves, listQualifyAmount);\\n            }\\n        }\\n        userListing[_msgSender()] = newListings;\\n        require(_setUserReserves(_msgSender(), curentReserves), 'set reserve faild');\\n        emit UserReservesFree(_msgSender(), lastReserves, curentReserves, block.timestamp);\\n    }\\n\\n    // ubnormal isssue with calling owner() in deList unction , we have implemented this func as a workaround\\n    function getAdminWallet() private view returns (address) {\\n        return owner();\\n    }\\n}\\n\",\"keccak256\":\"0xf6f387ed54208044f87fe04c19d54c77834e3e23cb73dd5bda04676e00a8e3a5\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartfiMarketPlaceFinance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\npragma abicoder v2;\\nimport './interface/IStartFiReputation.sol';\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './interface/IStartFiStakes.sol';\\nimport './MarketPlaceBase.sol';\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *desc   contract to handle all financial work for the marketplace\\n * @title Startfi Marketplace Finance\\n */\\ncontract StartfiMarketPlaceFinance is MarketPlaceBase {\\n    /******************************************* decalrations go here ********************************************************* */\\n    address internal _paymentToken;\\n    uint256 internal _feeFraction = 1;\\n    uint256 internal _feeBase = 100;\\n    uint256 bidPenaltyPercentage = 1;\\n    uint256 public delistFeesPercentage = 1;\\n    uint256 public listqualifyPercentage = 1;\\n    uint256 public bidPenaltyPercentageBase = 100;\\n    uint256 public delistFeesPercentageBase = 100;\\n    uint256 public listqualifyPercentageBase = 100;\\n    mapping(address => uint256) userReserves;\\n    mapping(address => bytes32[]) userListing;\\n    address public stakeContract;\\n    address reputationContract;\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n        string memory _name,\\n        address _paymentContract,\\n        address _reputationContract\\n    ) MarketPlaceBase(_name) {\\n        _paymentToken = _paymentContract;\\n        reputationContract = _reputationContract;\\n    }\\n\\n    /******************************************* modifiers go here ********************************************************* */\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    function _calcSum(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        result = a + b;\\n    }\\n\\n    /**\\n     @dev calculat the platform fees\\n    *@param price  : item  price\\n    *@return fees the value that the platform will get\\n     */\\n    function _calcFees(uint256 price) internal view returns (uint256 fees) {\\n        fees = (price * _feeFraction) / _feeBase;\\n    }\\n\\n    /**\\n     @dev calculat the platform fine amount when seller delist before time\\n    *@param listingPrice  : item listing price\\n    *@return amount the value that the platform will get\\n     */\\n    function _getListingQualAmount(uint256 listingPrice) internal view returns (uint256 amount) {\\n        amount = (listingPrice * listqualifyPercentage) / listqualifyPercentageBase;\\n    }\\n\\n    /**\\n     @dev calculat the platform fine amount when seller delist before time\\n    *@param listingPrice  : item listing price\\n    *@return fineAmount the value that the platform will get\\n    *@return remaining the value remaing after subtracting the fine\\n     */\\n    function _getDeListingQualAmount(uint256 listingPrice)\\n        internal\\n        view\\n        returns (uint256 fineAmount, uint256 remaining)\\n    {\\n        fineAmount = (listingPrice * delistFeesPercentage) / delistFeesPercentageBase;\\n        remaining = _getListingQualAmount(listingPrice) - fineAmount;\\n    }\\n\\n    /**\\n      @dev calculat the platform share when seller call disput\\n    *@param qualifyAmount  : seller defind value to be staked in order to participate in a gevin auction\\n    * @return fineAmount the value that the platform will get\\n    * @return remaining the value that the auction woner will get\\n     */\\n    function _calcBidDisputeFees(uint256 qualifyAmount) internal view returns (uint256 fineAmount, uint256 remaining) {\\n        fineAmount = (qualifyAmount * bidPenaltyPercentage) / bidPenaltyPercentageBase;\\n        remaining = qualifyAmount - fineAmount;\\n    }\\n\\n    function _getListingFinancialInfo(\\n        address _NFTContract,\\n        uint256 tokenId,\\n        uint256 bidPrice\\n    )\\n        internal\\n        view\\n        returns (\\n            address issuer,\\n            uint256 royaltyAmount,\\n            uint256 fees,\\n            uint256 netPrice\\n        )\\n    {\\n        fees = _calcFees(bidPrice);\\n        netPrice = bidPrice - fees;\\n        // royalty check\\n        if (_supportRoyalty(_NFTContract)) {\\n            (issuer, royaltyAmount) = _getRoyaltyInfo(_NFTContract, tokenId, bidPrice);\\n            if (royaltyAmount > 0 && issuer != address(0)) {\\n                netPrice = netPrice - royaltyAmount;\\n            }\\n        }\\n    }\\n\\n    /**\\n     *@param user  : participant address\\n     * @return the value of user reserves\\n     */\\n    function getUserReserved(address user) external view returns (uint256) {\\n        return userReserves[user];\\n    }\\n\\n    /**\\n     *\\n     * @return the value of the state variable `_feeFraction`\\n     */\\n    function getServiceFee() external view returns (uint256) {\\n        return _feeFraction;\\n    }\\n\\n    /**\\n     * @dev :wrap function to get the total allowed number of tokens that this contract can transfer from the given account \\n\\n    * @param owner: owner address\\n    * @return allowed number of tokens that this contract can transfer from the owner account\\n     */\\n    function _getAllowance(address owner) internal view returns (uint256) {\\n        return IERC20(_paymentToken).allowance(owner, address(this));\\n    }\\n\\n    /**\\n     * @dev this function calls StartFiStakes contract to get the total staked tokens for 'user' an substract the current reserves to get the total number of free tokens\\n     * @param staker : participant address\\n     * @return allowed number of tokens that this contract can transfer from the owner account\\n     */\\n    function _getStakeAllowance(\\n        address staker /*,uint256 prevAmount*/\\n    ) internal view returns (uint256) {\\n        // user can bid multi time, we want to make sure we don't calc the old bid as sperated bid\\n        uint256 userActualReserved = userReserves[staker]; //.sub(prevAmount);\\n        return IStartFiStakes(stakeContract).getReserves(staker) - userActualReserved;\\n    }\\n\\n    /******************************************* state functions go here ********************************************************* */\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev this function calls StartFiStakes contract to subtract the user stakes and add that value to the 'to'\\n     * @param finePayer : fine payer address\\n     * @param to : participant address\\n     * @param amount : value to be deducted from his stakes as a fine\\n     * @return true if it's done\\n     */\\n    function _deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return IStartFiStakes(stakeContract).deduct(finePayer, to, amount);\\n    }\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function. math of point calcualtion is not done yet\\n     * @dev this function calls StartFiReputation contract to mint reputation points for both seller and buyer\\n     * @param seller : seller address\\n     * @param buyer : buyer address\\n     * @param amount : price\\n     * @return buyerBalance : buyer current reputation balance\\n     * @return sellerBalance : seller current reputation balance\\n     */\\n    function _addreputationPoints(\\n        address seller,\\n        address buyer,\\n        uint256 amount\\n    ) internal returns (uint256 buyerBalance, uint256 sellerBalance) {\\n        // calc how much pint for both of them ??\\n        // TODO: math and logic for calc the point based on the amount\\n        uint256 sellerPoints = amount / 2;\\n        uint256 buyerPoints = amount / 2;\\n        sellerBalance = IStartFiReputation(reputationContract).mintReputation(seller, sellerPoints);\\n        buyerBalance = IStartFiReputation(reputationContract).mintReputation(buyer, buyerPoints);\\n    }\\n\\n    function _safeTokenTransfer(address to, uint256 amount) internal returns (bool) {\\n        return IERC20(_paymentToken).transfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev  Safely transfers `amount` of token from `from` to `to`.\\n     * @param from address representing the previous owner of the token\\n     * @param to target address that will receive the tokens\\n     * @param amount number of tokens to be transferred\\n     * See {transferFrom}\\n     */\\n    function _safeTokenTransferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        return IERC20(_paymentToken).transferFrom(from, to, amount);\\n    }\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev called to set user reserves\\n     * @param user : participant address\\n     * @param newReservedValue : value to be sored as user reserve\\n     */\\n    function _setUserReserves(address user, uint256 newReservedValue) internal returns (bool) {\\n        userReserves[user] = newReservedValue;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev called to increase or decrease user reserves\\n     * @param user : participant address\\n     * @param newReserves : value to be added or substracted\\n     * @param isAddition : true if we are adding the new value\\n     */\\n    function _updateUserReserves(\\n        address user,\\n        uint256 newReserves,\\n        bool isAddition\\n    ) internal returns (uint256 _userReserves) {\\n        _userReserves = isAddition ? userReserves[user] + newReserves : userReserves[user] - newReserves;\\n        userReserves[user] = _userReserves;\\n        return _userReserves;\\n    }\\n\\n    /**\\n     *   * @notice  all conditions and checks are made prior to this function\\n     * @dev  the formula is (fees * 1000)/base\\n     * @param newFees  the new fees value to be stored\\n     * @param newBase  the new basefees value to be stored\\n     * @return percentage the value of the state variable `_feeFraction`\\n     */\\n    function changeFees(uint256 newFees, uint256 newBase) internal returns (uint256 percentage) {\\n        require(newFees <= newBase, 'Fee fraction exceeded base.');\\n        percentage = (newFees * 1000) / newBase;\\n        require(percentage <= 30 && percentage >= 10, 'Percentage should be from 1-3 %');\\n\\n        _feeFraction = newFees;\\n        _feeBase = newBase;\\n    }\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev for later on upgrade , if we have\\n     * @param _token : startfi new utility contract\\n     */\\n    function _changeUtiltiyToken(address _token) internal {\\n        _paymentToken = _token;\\n    }\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev for later on upgrade , if we have\\n     * @param _reputationContract : startfi new reputation contract\\n     */\\n    function _changeReputationContract(address _reputationContract) internal {\\n        reputationContract = _reputationContract;\\n    }\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev  the formula is (fees * 1000)/base\\n     * @param newFees  the new fees value to be stored\\n     * @param newBase  the new basefees value to be stored\\n     * @return percentage the value of the state variable `_feeFraction`\\n     */\\n    function _changeBidPenaltyPercentage(uint256 newFees, uint256 newBase) internal returns (uint256 percentage) {\\n        require(newFees <= newBase, 'Fee fraction exceeded base.');\\n        percentage = (newFees * 1000) / newBase;\\n        require(percentage <= 40 && percentage >= 10, 'Percentage should be from 1-4 %');\\n\\n        bidPenaltyPercentage = newFees;\\n        bidPenaltyPercentageBase = newBase;\\n    }\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev  the formula is (fees * 1000)/base\\n     * @param newFees  the new fees value to be stored\\n     * @param newBase  the new basefees value to be stored\\n     * @return percentage the value of the state variable `_feeFraction`\\n     */\\n\\n    function _changeDelistFeesPerentage(uint256 newFees, uint256 newBase) internal returns (uint256 percentage) {\\n        require(newFees <= newBase, 'Fee fraction exceeded base.');\\n        percentage = (newFees * 1000) / newBase;\\n        require(percentage <= 40 && percentage >= 10, 'Percentage should be from 1-4 %');\\n\\n        delistFeesPercentage = newFees;\\n        delistFeesPercentageBase = newBase;\\n    }\\n\\n    /**\\n     * @notice  all conditions and checks are made prior to this function\\n     * @dev  the formula is (fees * 1000)/base\\n     * @param newFees  the new fees value to be stored\\n     * @param newBase  the new basefees value to be stored\\n     * @return percentage the value of the state variable `_feeFraction`\\n     */\\n    function _changeListqualifyAmount(uint256 newFees, uint256 newBase) internal returns (uint256 percentage) {\\n        require(newFees <= newBase, 'Fee fraction exceeded base.');\\n        percentage = (newFees * 1000) / newBase;\\n        require(percentage <= 40 && percentage >= 10, 'Percentage should be from 1-4 %');\\n\\n        listqualifyPercentage = newFees;\\n        listqualifyPercentageBase = newBase;\\n    }\\n}\\n\",\"keccak256\":\"0xf59287bf329a26eecd8cad90e0a2f18dd7d2b88732267f8e99458a039026f02c\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IERC721Royalty {\\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\\n        external\\n        view\\n        returns (address issuer, uint256 _royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa5fe504bfb041b050c201533e05c23fd8d3d93b9b8bddd1526686be6e562effc\",\"license\":\"MIT\"},\"contracts/interface/IStartFiReputation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  Startfi Reputation contract\\n * desc contract to mamange the reputation for startfi users\\n */\\ninterface IStartFiReputation {\\n    function mintReputation(address to, uint256 amount) external returns (uint256 balance);\\n\\n    function burnReputation(address to, uint256 amount) external returns (uint256 balance);\\n\\n    function getUserReputation(address user) external view returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0xbaa855f87d681bfdcb79c6b52f73489fdacd2c398377822a21d1e73456aebe80\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IStartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\ninterface IStartFiStakes {\\n    function getReserves(address owner) external view returns (uint256);\\n\\n    function deduct(\\n        address finePayer,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa1df0b81fe5235f7005c80728b3a2dbfd2e2257494058f8b00d37326954176ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262ed4e0060019081556006805463ffffffff1916632a55205a1790556007819055606460088190556009829055600a828155600b92909255600c819055600d819055600e556013553480156200005957600080fd5b50604051620036d8380380620036d88339810160408190526200007c9162000204565b600080546001600160a01b031916339081178255604051869286928592859282917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690558051620000e590600590602084019062000141565b5050600680546001600160a01b0393841664010000000002600160201b600160c01b0319909116179055601280549183166001600160a01b03199283161790556011805495909216941693909317909255506200036d92505050565b8280546200014f906200031a565b90600052602060002090601f016020900481019282620001735760008555620001be565b82601f106200018e57805160ff1916838001178555620001be565b82800160010185558215620001be579182015b82811115620001be578251825591602001919060010190620001a1565b50620001cc929150620001d0565b5090565b5b80821115620001cc5760008155600101620001d1565b80516001600160a01b0381168114620001ff57600080fd5b919050565b600080600080608085870312156200021b57600080fd5b84516001600160401b03808211156200023357600080fd5b818701915087601f8301126200024857600080fd5b8151818111156200025d576200025d62000357565b604051601f8201601f19908116603f0116810190838211818310171562000288576200028862000357565b81604052828152602093508a84848701011115620002a557600080fd5b600091505b82821015620002c95784820184015181830185015290830190620002aa565b82821115620002db5760008484830101525b9750620002ed915050878201620001e7565b94505050620002ff60408601620001e7565b91506200030f60608601620001e7565b905092959194509250565b600181811c908216806200032f57607f821691505b602082108114156200035157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61335b806200037d6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80636b041547116100de5780638ef291e911610097578063e123ff5811610071578063e123ff581461046b578063e1a1d7ed1461047e578063f2fde38b14610506578063ff90ec061461051957600080fd5b80638ef291e914610430578063cd772f5c14610445578063d4ef929a1461045857600080fd5b80636b041547146103755780636bb598161461037e578063715018a61461038657806375b4a5e8146103905780637b356561146103995780638da5cb5b1461041f57600080fd5b80634b3ee2bb1161014b5780635bbd49f4116101255780635bbd49f4146103335780635c975abb146103465780635cc310ba14610363578063649ee6831461036c57600080fd5b80634b3ee2bb1461025557806356461e8e146102f857806356e9d1f31461030157600080fd5b80630a42e75a1461019357806311a1933c146101af578063150b7a02146101b75780631a186227146101ee5780631f78fd0b1461021957806329c5cdf314610242575b600080fd5b61019c60015481565b6040519081526020015b60405180910390f35b60075461019c565b6101d56101c5366004612d13565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016101a6565b601154610201906001600160a01b031681565b6040516001600160a01b0390911681526020016101a6565b61019c610227366004612cd9565b6001600160a01b03166000908152600f602052604090205490565b61019c610250366004612e21565b61052c565b6102bd610263366004612edb565b6000908152600460208181526040808420805460019182015460038086528488206001600160a01b03928316808a529652939096209182015460028301549383015492909501549096939594909416939192909160ff1690565b604080519687526001600160a01b039586166020880152939094169285019290925260608401526080830152151560a082015260c0016101a6565b61019c600e5481565b61031461030f366004612edb565b610751565b604080516001600160a01b0390931683526020830191909152016101a6565b61019c610341366004612e56565b610a35565b600054600160a01b900460ff1660405190151581526020016101a6565b61019c600d5481565b61019c600b5481565b61019c600a5481565b61019c610cfb565b61038e610fd7565b005b61019c600c5481565b6103ac6103a7366004612edb565b61107b565b604080516001600160a01b039d8e168152602081019c909c528b019990995260608a019790975294891660808901529790921660a0870152151560c0860152151560e0850152610100840194909452610120830193909352610140820192909252610160810191909152610180016101a6565b6000546001600160a01b0316610201565b610438611111565b6040516101a69190612fda565b61019c610453366004612f24565b6111a3565b610314610466366004612edb565b611642565b610314610479366004612edb565b6119eb565b6104d461048c366004612ef4565b60009182526003602081815260408085206001600160a01b0394851686529091529092208054600182015460028301549483015460049093015491959316939260ff90911690565b604080519586526001600160a01b0390941660208601529284019190915260608301521515608082015260a0016101a6565b61038e610514366004612cd9565b611cc7565b610314610527366004612f24565b611de1565b600081600081116105805760405162461bcd60e51b815260206004820152601960248201527816995c9bc815985b1d59481a5cc81b9bdd08185b1b1bddd959603a1b60448201526064015b60405180910390fd5b600061058e42600154612198565b9050858533836040516020016105a79493929190612f5f565b60405160208183030381529060405280519060200120925060006105ca856121ab565b9050806105d6336121ce565b101561061a5760405162461bcd60e51b81526020600482015260136024820152724e6f7420656e6f75676820726573657276657360681b6044820152606401610577565b610624878761226e565b6106405760405162461bcd60e51b81526004016105779061315e565b61064d8787335b30612300565b6106695760405162461bcd60e51b8152600401610577906131af565b61067533826001612379565b503360008181526010602090815260408220805460018101825581845291832090910187905591905280546106ad9082908190612c53565b506106bc8589338a8a886123f1565b6107015760405162461bcd60e51b8152602060048201526016602482015275436f756c646e2774206c69737420746865206974656d60501b6044820152606401610577565b7f4273eae081fe1625584d9ab2b9e558adb9b60b846999d5b07de6e4664464767c8589338a8a88884260405161073e989796959493929190612f98565b60405180910390a1505050509392505050565b600081815260026020819052604090912060098101546005820154600483015483546006850154958501546001909501546001600160a01b0391821696909560ff909516949382169392909116916107a63390565b6001600160a01b0316836001600160a01b0316146108005760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610577565b6001600160a01b0384161561084e5760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c903137bab3b43a103a37b5b2b760611b6044820152606401610577565b600061085d836203f480612198565b90504281111580156108805750600286600381111561087e5761087e6132c0565b145b8061089c5750600186600381111561089a5761089a6132c0565b145b6108d75760405162461bcd60e51b815260206004820152600c60248201526b10d85b89dd0819195b1a5cdd60a21b6044820152606401610577565b60008060028860038111156108ee576108ee6132c0565b146109ae57428510156109765761090484612593565b90925090506109258661091f6000546001600160a01b031690565b846125ce565b6109715760405162461bcd60e51b815260206004820152601860248201527f636f756c646e277420646564756374207468652066696e6500000000000000006044820152606401610577565b610982565b61097f846121ab565b90505b600061099033836000612379565b10156109ae5760405162461bcd60e51b8152600401610577906130e6565b6109ba8a8a3089612300565b6109d65760405162461bcd60e51b8152600401610577906131af565b6109e38b60006003612666565b7f55058811c463cd1d9f3952e51fdb7eb2760b904e998811cb7485a7f33a1ff4af8b8b888c86868b42604051610a20989796959493929190612f98565b60405180910390a15050505050505050915091565b60008560008111610a845760405162461bcd60e51b815260206004820152601960248201527816995c9bc815985b1d59481a5cc81b9bdd08185b1b1bddd959603a1b6044820152606401610577565b61a8c08311610aeb5760405162461bcd60e51b815260206004820152602d60248201527f41756374696f6e2073686f756c64206265206c69766520666f72206d6f72652060448201526c7468616e20313220686f75727360981b6064820152608401610577565b601354861015610b3d5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642041756374696f6e207175616c69667920416d6f756e7400006044820152606401610577565b6000610b494285612198565b905089893383604051602001610b629493929190612f5f565b6040516020818303038152906040528051906020012092508515610bd05760008511610bd05760405162461bcd60e51b815260206004820152601960248201527f5a65726f207072696365206973206e6f7420616c6c6f776564000000000000006044820152606401610577565b610bda8a8a61226e565b610bf65760405162461bcd60e51b81526004016105779061315e565b610c018a8a33610647565b610c1d5760405162461bcd60e51b8152600401610577906131af565b610c2e838b338c8c8b8b888f6126d8565b610c735760405162461bcd60e51b8152602060048201526016602482015275436f756c646e2774206c69737420746865206974656d60501b6044820152606401610577565b604080518481526001600160a01b038c1660208201523381830152606081018b9052608081018a905287151560a082015260c0810187905260e0810183905261010081018990524261012082015290517fd7f1b8f328c218ec2774158bb7329aaa002cda2cb72482f7927b5c1991697f1b918190036101400190a15050979650505050505050565b336000908152600f6020908152604080832054601083528184208054835181860281018601909452808452919385939290830182828015610d5b57602002820191906000526020600020905b815481526020019060010190808311610d47575b5050505050905060106000610d6d3390565b6001600160a01b03166001600160a01b031681526020019081526020016000206000610d999190612ca3565b336000908152601060205260408120905b8251811015610f5a576002806000858481518110610dca57610dca6132d6565b60209081029190910181015182528101919091526040016000206009015460ff166003811115610dfc57610dfc6132c0565b1415610e795781838281518110610e1557610e156132d6565b60209081029190910181015182546001810184556000938452918320909101558351610e7291879160029190879086908110610e5357610e536132d6565b6020026020010151815260200190815260200160002060070154612198565b9450610f48565b600160026000858481518110610e9157610e916132d6565b60209081029190910181015182528101919091526040016000206009015460ff166003811115610ec357610ec36132c0565b1415610f485781838281518110610edc57610edc6132d6565b60209081029190910181015182546001810184556000938452918320909101558351610f38906002908390879086908110610f1957610f196132d6565b60200260200101518152602001908152602001600020600201546121ab565b9050610f448682612198565b9550505b80610f528161328f565b915050610daa565b503360009081526010602052604090208154610f7891908390612c53565b50336000908152600f60205260409020849055604080513381526020810185905280820186905242606082015290517f0d0e56539d6f587bb6a3924f7dee452834a223586e9bb60d3827f4006cb0655d9181900360800190a150505090565b6000546001600160a01b031633146110315760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600081815260026020819052604082208054600182015492820154600380840154600485015460058601546006870154600788015460088901546009909901546001600160a01b039889169b97999598948516979484169660ff600160a01b8604811697600160a81b90960481169694959394921690811115611100576111006132c0565b905091939597999b5091939597999b565b60606005805461112090613254565b80601f016020809104026020016040519081016040528092919081815260200182805461114c90613254565b80156111995780601f1061116e57610100808354040283529160200191611199565b820191906000526020600020905b81548152906001019060200180831161117c57829003601f168201915b5050505050905090565b6000828152600260205260408120600601548390421080156111ea5750600260008281526002602052604090206009015460ff1660038111156111e8576111e86132c0565b145b6112295760405162461bcd60e51b815260206004820152601060248201526f105d58dd1a5bdb881a5cc8195b99195960821b6044820152606401610577565b6000848152600260208181526040808420805460018083015484518087018d90526bffffffffffffffffffffffff19606085811b82168389015233901b166054820152606880820183905286518083039091018152608890910186528051908701208c89526004875294909720015494909352600701549095506001600160a01b039182169392919091169081611340576000888152600260208190526040909120015487101561133b5760405162461bcd60e51b815260206004820152603660248201527f626964207072696365206d757374206265206d6f7265207468616e206f7220656044820152757175616c20746865206d696e696d756d20707269636560501b6064820152608401610577565b6113c4565b60008881526003602081815260408084206001600160a01b0387168552909152909120015487116113c45760405162461bcd60e51b815260206004820152602860248201527f626964207072696365206d757374206265206d6f7265207468616e20746865206044820152671b185cdd08189a5960c21b6064820152608401610577565b60008881526003602081815260408084203385529091529091200154806114c857816113ef336121ce565b10156114335760405162461bcd60e51b81526020600482015260136024820152724e6f7420656e6f75676820726573657276657360681b6044820152606401610577565b336000818152601060209081526040822080546001810182558184529183209091018c9055919052805461146a9082908190612c53565b50600061147933856001612379565b116114c65760405162461bcd60e51b815260206004820152601b60248201527f52657365727665205a65726f206973206e6f7420616c6c6f77656400000000006044820152606401610577565b505b611599878a8733888d6040805180820182528781526001600160a01b03948516602080830182815260008a8152600480845286822095518655915160019586018054918b166001600160a01b0319928316179055865160a0810188529c8d529989168c84019081528c870198895260608d0197885260808d018281529b82526003808552878320958352949093529490942099518a555189830180549190971697169690961790945591516002870155519285019290925591519201805492151560ff199093169290921790915590565b6115d45760405162461bcd60e51b815260206004820152600c60248201526b10dbdd5b191b89dd08109a5960a21b6044820152606401610577565b60408051888152602081018b90526001600160a01b038716818301523360608201526080810186905260a081018a90524260c082015290517f2d4cfcefc09a529d21dfffe1fc49a95663a8e6ee7aa367506e419a6d437882859181900360e00190a150505050505092915050565b600081815260026020526040812060060154819083904211801561168b5750600260008281526002602052604090206009015460ff166003811115611689576116896132c0565b145b6116ca5760405162461bcd60e51b815260206004820152601060248201526f105d58dd1a5bdb881a5cc8195b99195960821b6044820152606401610577565b60008481526004602081815260408084206001908101546002909352932091820154825492909301546001600160a01b0392831696509450811691163382146117555760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f74207468652077696e6e657200000000000000006044820152606401610577565b60008681526003602081815260408084206001600160a01b03871685529091529091200154806117848461287a565b10156117a25760405162461bcd60e51b81526004016105779061302f565b6000806000806117b38a8a87612906565b93509350935093506117d7876117d16000546001600160a01b031690565b84612973565b6118235760405162461bcd60e51b815260206004820152601f60248201527f436f756c646e2774207472616e7366657220746f6b656e2061732066656573006044820152606401610577565b6001600160a01b038416156118595761183d878585612973565b6118595760405162461bcd60e51b81526004016105779061311d565b611864878783612973565b6118b05760405162461bcd60e51b815260206004820181905260248201527f436f756c646e2774207472616e7366657220746f6b656e20746f2062757965726044820152606401610577565b6118bc8a8a308a612300565b6118d85760405162461bcd60e51b8152600401610577906131af565b60008b8152600260205260408120600701546118f690899083612379565b10156119145760405162461bcd60e51b8152600401610577906130e6565b60008b81526003602090815260408083203384529091529020600401805460ff191660011790556119468688876129bd565b50506119548b886000612666565b60008b8152600460209081526040918290205482519081529081018d90526001600160a01b03808d16928201929092528189166060820152608081018b905260a0810187905290851660c082015260e0810184905261010081018390526101208101829052426101408201527fe70f4aad9f39db984a04bce8b0cd7a269c046c57fd6878c9dbf2f6af19a47ecd9061016001610a20565b600081815260046020818152604080842060019081015460029093529084209283015483549184015460078501546006909501546001600160a01b03938416969195948416949290931692611a43906203f480612198565b90506001600160a01b03841615801590611a5d5750428110155b611aa95760405162461bcd60e51b815260206004820181905260248201527f4e6f2062696473206f72207374696c6c2072756e6e696e672061756374696f6e6044820152606401610577565b6001600160a01b0383163314611afb5760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610577565b60008781526003602090815260408083206001600160a01b038816845290915290206004015460ff1615611b655760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481c1d5c98da185cd959607a1b6044820152606401610577565b600080611b7184612af7565b91509150611b8b8661091f6000546001600160a01b031690565b611ba75760405162461bcd60e51b815260040161057790613099565b611bb28686836125ce565b611bce5760405162461bcd60e51b815260040161057790613099565b611bda88883088612300565b611bf65760405162461bcd60e51b8152600401610577906131af565b6000611c0487866000612379565b1015611c225760405162461bcd60e51b8152600401610577906130e6565b611c2f8960006003612666565b6000898152600460209081526040918290205482519081529081018b90526001600160a01b038a8116828401528881166060830152608082018a9052871660a082015260c0810186905260e0810183905261010081018490524261012082015290517fb46a91724b95c8764d64242653194717e2ab549e1b76e207124d3bddc39aed6d918190036101400190a1505050505050915091565b6000546001600160a01b03163314611d215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b6001600160a01b038116611d865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610577565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600260208190526040909120600581015460048201548254600184015493909401546001600160a01b0394851694600160a81b90930460ff169290911690851015611e635760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610577565b600160008781526002602052604090206009015460ff166003811115611e8b57611e8b6132c0565b1480611ee55750600260008781526002602052604090206009015460ff166003811115611eba57611eba6132c0565b148015611ec957506001821515145b8015611ee5575060008681526002602052604090206006015442105b611f295760405162461bcd60e51b815260206004820152601560248201527402a37b5b2b71034b9b737ba103337b91039b0b6329605d1b6044820152606401610577565b84611f333361287a565b1015611f515760405162461bcd60e51b81526004016105779061302f565b600080600080611f6288888b612906565b9350935093509350611f85611f743390565b6000546001600160a01b03166117d1565b611fd15760405162461bcd60e51b815260206004820152601f60248201527f436f756c646e2774207472616e7366657220746f6b656e2061732066656573006044820152606401610577565b6001600160a01b0384161561200757611feb338585612973565b6120075760405162461bcd60e51b81526004016105779061311d565b612012338683612973565b6120685760405162461bcd60e51b815260206004820152602160248201527f436f756c646e2774207472616e7366657220746f6b656e20746f2073656c6c656044820152603960f91b6064820152608401610577565b61207488883033612300565b6120905760405162461bcd60e51b8152600401610577906131af565b60008a8152600260208190526040822001546120ab906121ab565b905060006120bb87836000612379565b10156120d95760405162461bcd60e51b8152600401610577906130e6565b6120e58b336000612666565b6120f086338c6129bd565b50507ff18fd7f8585dc258636a453d4a87ee3dd6edda50c1f438348bddf640ca6fbbec8b8a61211c3390565b604080519384526001600160a01b03928316602085015290821690830152606082018b9052608082018d905280891660a083015289151560c0830152871660e0820152610100810186905261012081018590526101408101849052426101608201526101800160405180910390a1505050505050509250929050565b60006121a482846131e4565b9392505050565b6000600e54600b54836121be919061321e565b6121c891906131fc565b92915050565b6001600160a01b038181166000818152600f6020526040808220546011549151630fa6707960e21b815260048101949094529193919283929190911690633e99c1e49060240160206040518083038186803b15801561222c57600080fd5b505afa158015612240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122649190612f46565b6121a4919061323d565b60405163020604bf60e21b8152600481018290526000906001600160a01b0384169063081812fc9060240160206040518083038186803b1580156122b157600080fd5b505afa9250505080156122e1575060408051601f3d908101601f191682019092526122de91810190612cf6565b60015b6122ed575060006121c8565b6001600160a01b03163014905092915050565b604051632142170760e11b81526001600160a01b038381166004830152828116602483015260448201859052600091908616906342842e0e90606401600060405180830381600087803b15801561235657600080fd5b505af115801561236a573d6000803e3d6000fd5b50600198975050505050505050565b6000816123a9576001600160a01b0384166000908152600f60205260409020546123a490849061323d565b6123cd565b6001600160a01b0384166000908152600f60205260409020546123cd9084906131e4565b6001600160a01b0385166000908152600f6020526040902081905590509392505050565b6000604051806101800160405280876001600160a01b0316815260200185815260200184815260200160008152602001866001600160a01b0316815260200160006001600160a01b03168152602001600015158152602001600015158152602001838152602001600081526020016000815260200160016003811115612479576124796132c0565b9052600088815260026020818152604092839020845181546001600160a01b039182166001600160a01b031991821617835592860151600180840191909155948601519382019390935560608501516003808301919091556080860151600483018054918616919094161790925560a085015160058201805460c088015160e08901511515600160a81b0260ff60a81b19911515600160a01b026001600160a81b0319909316949097169390931717919091169390931790925561010084015160068301556101208401516007830155610140840151600883015561016084015160098301805493949193909260ff199091169190849081111561257f5761257f6132c0565b021790555060019998505050505050505050565b600080600d54600a54846125a7919061321e565b6125b191906131fc565b9150816125bd846121ab565b6125c7919061323d565b9050915091565b60115460405163929c517960e01b81526001600160a01b038581166004830152848116602483015260448201849052600092169063929c5179906064015b602060405180830381600087803b15801561262657600080fd5b505af115801561263a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265e9190612ebe565b949350505050565b6000838152600260205260409020600901805482919060ff19166001836003811115612694576126946132c0565b02179055506001600160a01b038216156126d357600083815260026020526040902060050180546001600160a01b0319166001600160a01b0384161790555b505050565b60006040518061018001604052808a6001600160a01b0316815260200188815260200187815260200160008152602001896001600160a01b0316815260200160006001600160a01b0316815260200160011515815260200186151581526020018481526020018381526020018581526020016002600381111561275d5761275d6132c0565b905260008b815260026020818152604092839020845181546001600160a01b039182166001600160a01b031991821617835592860151600180840191909155948601519382019390935560608501516003808301919091556080860151600483018054918616919094161790925560a085015160058201805460c088015160e08901511515600160a81b0260ff60a81b19911515600160a01b026001600160a81b0319909316949097169390931717919091169390931790925561010084015160068301556101208401516007830155610140840151600883015561016084015160098301805493949193909260ff1990911691908490811115612863576128636132c0565b021790555060019c9b505050505050505050505050565b600654604051636eb1769f60e11b81526001600160a01b0383811660048301523060248301526000926401000000009004169063dd62ed3e9060440160206040518083038186803b1580156128ce57600080fd5b505afa1580156128e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c89190612f46565b60008060008061291585612b21565b9150612921828661323d565b905061292c87612b34565b1561296a5761293c878787612bc4565b9094509250821580159061295857506001600160a01b03841615155b1561296a57612967838261323d565b90505b93509350935093565b6006546040516323b872dd60e01b81526001600160a01b038581166004830152848116602483015260448201849052600092640100000000900416906323b872dd9060640161260c565b600080806129cc6002856131fc565b905060006129db6002866131fc565b601254604051631287995760e31b81526001600160a01b038a811660048301526024820186905292935091169063943ccab890604401602060405180830381600087803b158015612a2b57600080fd5b505af1158015612a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a639190612f46565b601254604051631287995760e31b81526001600160a01b0389811660048301526024820185905292955091169063943ccab890604401602060405180830381600087803b158015612ab357600080fd5b505af1158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb9190612f46565b93505050935093915050565b600080600c5460095484612b0b919061321e565b612b1591906131fc565b91506125c7828461323d565b6000600854600754836121be919061321e565b6006546040516301ffc9a760e01b815260e09190911b6001600160e01b03191660048201526000906001600160a01b038316906301ffc9a79060240160206040518083038186803b158015612b8857600080fd5b505afa925050508015612bb8575060408051601f3d908101601f19168201909252612bb591810190612ebe565b60015b6121c857506000919050565b60405163152a902d60e11b8152600481018390526024810182905260009081906001600160a01b03861690632a55205a90604401604080518083038186803b158015612c0f57600080fd5b505afa158015612c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c479190612df3565b90969095509350505050565b828054828255906000526020600020908101928215612c935760005260206000209182015b82811115612c93578254825591600101919060010190612c78565b50612c9f929150612cc4565b5090565b5080546000825590600052602060002090810190612cc19190612cc4565b50565b5b80821115612c9f5760008155600101612cc5565b600060208284031215612ceb57600080fd5b81356121a481613302565b600060208284031215612d0857600080fd5b81516121a481613302565b60008060008060808587031215612d2957600080fd5b8435612d3481613302565b93506020850135612d4481613302565b925060408501359150606085013567ffffffffffffffff80821115612d6857600080fd5b818701915087601f830112612d7c57600080fd5b813581811115612d8e57612d8e6132ec565b604051601f8201601f19908116603f01168101908382118183101715612db657612db66132ec565b816040528281528a6020848701011115612dcf57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612e0657600080fd5b8251612e1181613302565b6020939093015192949293505050565b600080600060608486031215612e3657600080fd5b8335612e4181613302565b95602085013595506040909401359392505050565b600080600080600080600060e0888a031215612e7157600080fd5b8735612e7c81613302565b96506020880135955060408801359450606088013593506080880135612ea181613317565b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215612ed057600080fd5b81516121a481613317565b600060208284031215612eed57600080fd5b5035919050565b60008060408385031215612f0757600080fd5b823591506020830135612f1981613302565b809150509250929050565b60008060408385031215612f3757600080fd5b50508035926020909101359150565b600060208284031215612f5857600080fd5b5051919050565b6bffffffffffffffffffffffff19606095861b8116825260148201949094529190931b9091166034820152604881019190915260680190565b9788526001600160a01b0396871660208901529490951660408701526060860192909252608085015260a084015260c083019190915260e08201526101000190565b600060208083528351808285015260005b8181101561300757858101830151858201604001528201612feb565b81811115613019576000604083870101525b50601f01601f1916929092016040019392505050565b60208082526044908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20776960408201527f7468647261772074686520726571756972656420616d6f756e74206f6620746f6060820152636b656e7360e01b608082015260a00190565b6020808252602d908201527f636f756c646e277420646564756374207468652066696e6520666f722074686560408201526c0818591b5a5b881dd85b1b195d609a1b606082015260800190565b6020808252601f908201527f6e656761746976652072657365727665206973206e6f7420616c6c6f77656400604082015260600190565b60208082526021908201527f436f756c646e2774207472616e7366657220746f6b656e20746f2069737375656040820152603960f91b606082015260800190565b60208082526031908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20747260408201527030b739b332b9103cb7bab9103a37b5b2b760791b606082015260800190565b6020808252818101527f4e465420746f6b656e20636f756c646e2774206265207472616e736665726564604082015260600190565b600082198211156131f7576131f76132aa565b500190565b60008261321957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613238576132386132aa565b500290565b60008282101561324f5761324f6132aa565b500390565b600181811c9082168061326857607f821691505b6020821081141561328957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132a3576132a36132aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612cc157600080fd5b8015158114612cc157600080fdfea2646970667358221220cbb5afc7e7798d2f0452d2e8e9c34c30df271b776a9ded4752cfa0c52baf809064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80636b041547116100de5780638ef291e911610097578063e123ff5811610071578063e123ff581461046b578063e1a1d7ed1461047e578063f2fde38b14610506578063ff90ec061461051957600080fd5b80638ef291e914610430578063cd772f5c14610445578063d4ef929a1461045857600080fd5b80636b041547146103755780636bb598161461037e578063715018a61461038657806375b4a5e8146103905780637b356561146103995780638da5cb5b1461041f57600080fd5b80634b3ee2bb1161014b5780635bbd49f4116101255780635bbd49f4146103335780635c975abb146103465780635cc310ba14610363578063649ee6831461036c57600080fd5b80634b3ee2bb1461025557806356461e8e146102f857806356e9d1f31461030157600080fd5b80630a42e75a1461019357806311a1933c146101af578063150b7a02146101b75780631a186227146101ee5780631f78fd0b1461021957806329c5cdf314610242575b600080fd5b61019c60015481565b6040519081526020015b60405180910390f35b60075461019c565b6101d56101c5366004612d13565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020016101a6565b601154610201906001600160a01b031681565b6040516001600160a01b0390911681526020016101a6565b61019c610227366004612cd9565b6001600160a01b03166000908152600f602052604090205490565b61019c610250366004612e21565b61052c565b6102bd610263366004612edb565b6000908152600460208181526040808420805460019182015460038086528488206001600160a01b03928316808a529652939096209182015460028301549383015492909501549096939594909416939192909160ff1690565b604080519687526001600160a01b039586166020880152939094169285019290925260608401526080830152151560a082015260c0016101a6565b61019c600e5481565b61031461030f366004612edb565b610751565b604080516001600160a01b0390931683526020830191909152016101a6565b61019c610341366004612e56565b610a35565b600054600160a01b900460ff1660405190151581526020016101a6565b61019c600d5481565b61019c600b5481565b61019c600a5481565b61019c610cfb565b61038e610fd7565b005b61019c600c5481565b6103ac6103a7366004612edb565b61107b565b604080516001600160a01b039d8e168152602081019c909c528b019990995260608a019790975294891660808901529790921660a0870152151560c0860152151560e0850152610100840194909452610120830193909352610140820192909252610160810191909152610180016101a6565b6000546001600160a01b0316610201565b610438611111565b6040516101a69190612fda565b61019c610453366004612f24565b6111a3565b610314610466366004612edb565b611642565b610314610479366004612edb565b6119eb565b6104d461048c366004612ef4565b60009182526003602081815260408085206001600160a01b0394851686529091529092208054600182015460028301549483015460049093015491959316939260ff90911690565b604080519586526001600160a01b0390941660208601529284019190915260608301521515608082015260a0016101a6565b61038e610514366004612cd9565b611cc7565b610314610527366004612f24565b611de1565b600081600081116105805760405162461bcd60e51b815260206004820152601960248201527816995c9bc815985b1d59481a5cc81b9bdd08185b1b1bddd959603a1b60448201526064015b60405180910390fd5b600061058e42600154612198565b9050858533836040516020016105a79493929190612f5f565b60405160208183030381529060405280519060200120925060006105ca856121ab565b9050806105d6336121ce565b101561061a5760405162461bcd60e51b81526020600482015260136024820152724e6f7420656e6f75676820726573657276657360681b6044820152606401610577565b610624878761226e565b6106405760405162461bcd60e51b81526004016105779061315e565b61064d8787335b30612300565b6106695760405162461bcd60e51b8152600401610577906131af565b61067533826001612379565b503360008181526010602090815260408220805460018101825581845291832090910187905591905280546106ad9082908190612c53565b506106bc8589338a8a886123f1565b6107015760405162461bcd60e51b8152602060048201526016602482015275436f756c646e2774206c69737420746865206974656d60501b6044820152606401610577565b7f4273eae081fe1625584d9ab2b9e558adb9b60b846999d5b07de6e4664464767c8589338a8a88884260405161073e989796959493929190612f98565b60405180910390a1505050509392505050565b600081815260026020819052604090912060098101546005820154600483015483546006850154958501546001909501546001600160a01b0391821696909560ff909516949382169392909116916107a63390565b6001600160a01b0316836001600160a01b0316146108005760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610577565b6001600160a01b0384161561084e5760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c903137bab3b43a103a37b5b2b760611b6044820152606401610577565b600061085d836203f480612198565b90504281111580156108805750600286600381111561087e5761087e6132c0565b145b8061089c5750600186600381111561089a5761089a6132c0565b145b6108d75760405162461bcd60e51b815260206004820152600c60248201526b10d85b89dd0819195b1a5cdd60a21b6044820152606401610577565b60008060028860038111156108ee576108ee6132c0565b146109ae57428510156109765761090484612593565b90925090506109258661091f6000546001600160a01b031690565b846125ce565b6109715760405162461bcd60e51b815260206004820152601860248201527f636f756c646e277420646564756374207468652066696e6500000000000000006044820152606401610577565b610982565b61097f846121ab565b90505b600061099033836000612379565b10156109ae5760405162461bcd60e51b8152600401610577906130e6565b6109ba8a8a3089612300565b6109d65760405162461bcd60e51b8152600401610577906131af565b6109e38b60006003612666565b7f55058811c463cd1d9f3952e51fdb7eb2760b904e998811cb7485a7f33a1ff4af8b8b888c86868b42604051610a20989796959493929190612f98565b60405180910390a15050505050505050915091565b60008560008111610a845760405162461bcd60e51b815260206004820152601960248201527816995c9bc815985b1d59481a5cc81b9bdd08185b1b1bddd959603a1b6044820152606401610577565b61a8c08311610aeb5760405162461bcd60e51b815260206004820152602d60248201527f41756374696f6e2073686f756c64206265206c69766520666f72206d6f72652060448201526c7468616e20313220686f75727360981b6064820152608401610577565b601354861015610b3d5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c69642041756374696f6e207175616c69667920416d6f756e7400006044820152606401610577565b6000610b494285612198565b905089893383604051602001610b629493929190612f5f565b6040516020818303038152906040528051906020012092508515610bd05760008511610bd05760405162461bcd60e51b815260206004820152601960248201527f5a65726f207072696365206973206e6f7420616c6c6f776564000000000000006044820152606401610577565b610bda8a8a61226e565b610bf65760405162461bcd60e51b81526004016105779061315e565b610c018a8a33610647565b610c1d5760405162461bcd60e51b8152600401610577906131af565b610c2e838b338c8c8b8b888f6126d8565b610c735760405162461bcd60e51b8152602060048201526016602482015275436f756c646e2774206c69737420746865206974656d60501b6044820152606401610577565b604080518481526001600160a01b038c1660208201523381830152606081018b9052608081018a905287151560a082015260c0810187905260e0810183905261010081018990524261012082015290517fd7f1b8f328c218ec2774158bb7329aaa002cda2cb72482f7927b5c1991697f1b918190036101400190a15050979650505050505050565b336000908152600f6020908152604080832054601083528184208054835181860281018601909452808452919385939290830182828015610d5b57602002820191906000526020600020905b815481526020019060010190808311610d47575b5050505050905060106000610d6d3390565b6001600160a01b03166001600160a01b031681526020019081526020016000206000610d999190612ca3565b336000908152601060205260408120905b8251811015610f5a576002806000858481518110610dca57610dca6132d6565b60209081029190910181015182528101919091526040016000206009015460ff166003811115610dfc57610dfc6132c0565b1415610e795781838281518110610e1557610e156132d6565b60209081029190910181015182546001810184556000938452918320909101558351610e7291879160029190879086908110610e5357610e536132d6565b6020026020010151815260200190815260200160002060070154612198565b9450610f48565b600160026000858481518110610e9157610e916132d6565b60209081029190910181015182528101919091526040016000206009015460ff166003811115610ec357610ec36132c0565b1415610f485781838281518110610edc57610edc6132d6565b60209081029190910181015182546001810184556000938452918320909101558351610f38906002908390879086908110610f1957610f196132d6565b60200260200101518152602001908152602001600020600201546121ab565b9050610f448682612198565b9550505b80610f528161328f565b915050610daa565b503360009081526010602052604090208154610f7891908390612c53565b50336000908152600f60205260409020849055604080513381526020810185905280820186905242606082015290517f0d0e56539d6f587bb6a3924f7dee452834a223586e9bb60d3827f4006cb0655d9181900360800190a150505090565b6000546001600160a01b031633146110315760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600081815260026020819052604082208054600182015492820154600380840154600485015460058601546006870154600788015460088901546009909901546001600160a01b039889169b97999598948516979484169660ff600160a01b8604811697600160a81b90960481169694959394921690811115611100576111006132c0565b905091939597999b5091939597999b565b60606005805461112090613254565b80601f016020809104026020016040519081016040528092919081815260200182805461114c90613254565b80156111995780601f1061116e57610100808354040283529160200191611199565b820191906000526020600020905b81548152906001019060200180831161117c57829003601f168201915b5050505050905090565b6000828152600260205260408120600601548390421080156111ea5750600260008281526002602052604090206009015460ff1660038111156111e8576111e86132c0565b145b6112295760405162461bcd60e51b815260206004820152601060248201526f105d58dd1a5bdb881a5cc8195b99195960821b6044820152606401610577565b6000848152600260208181526040808420805460018083015484518087018d90526bffffffffffffffffffffffff19606085811b82168389015233901b166054820152606880820183905286518083039091018152608890910186528051908701208c89526004875294909720015494909352600701549095506001600160a01b039182169392919091169081611340576000888152600260208190526040909120015487101561133b5760405162461bcd60e51b815260206004820152603660248201527f626964207072696365206d757374206265206d6f7265207468616e206f7220656044820152757175616c20746865206d696e696d756d20707269636560501b6064820152608401610577565b6113c4565b60008881526003602081815260408084206001600160a01b0387168552909152909120015487116113c45760405162461bcd60e51b815260206004820152602860248201527f626964207072696365206d757374206265206d6f7265207468616e20746865206044820152671b185cdd08189a5960c21b6064820152608401610577565b60008881526003602081815260408084203385529091529091200154806114c857816113ef336121ce565b10156114335760405162461bcd60e51b81526020600482015260136024820152724e6f7420656e6f75676820726573657276657360681b6044820152606401610577565b336000818152601060209081526040822080546001810182558184529183209091018c9055919052805461146a9082908190612c53565b50600061147933856001612379565b116114c65760405162461bcd60e51b815260206004820152601b60248201527f52657365727665205a65726f206973206e6f7420616c6c6f77656400000000006044820152606401610577565b505b611599878a8733888d6040805180820182528781526001600160a01b03948516602080830182815260008a8152600480845286822095518655915160019586018054918b166001600160a01b0319928316179055865160a0810188529c8d529989168c84019081528c870198895260608d0197885260808d018281529b82526003808552878320958352949093529490942099518a555189830180549190971697169690961790945591516002870155519285019290925591519201805492151560ff199093169290921790915590565b6115d45760405162461bcd60e51b815260206004820152600c60248201526b10dbdd5b191b89dd08109a5960a21b6044820152606401610577565b60408051888152602081018b90526001600160a01b038716818301523360608201526080810186905260a081018a90524260c082015290517f2d4cfcefc09a529d21dfffe1fc49a95663a8e6ee7aa367506e419a6d437882859181900360e00190a150505050505092915050565b600081815260026020526040812060060154819083904211801561168b5750600260008281526002602052604090206009015460ff166003811115611689576116896132c0565b145b6116ca5760405162461bcd60e51b815260206004820152601060248201526f105d58dd1a5bdb881a5cc8195b99195960821b6044820152606401610577565b60008481526004602081815260408084206001908101546002909352932091820154825492909301546001600160a01b0392831696509450811691163382146117555760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f74207468652077696e6e657200000000000000006044820152606401610577565b60008681526003602081815260408084206001600160a01b03871685529091529091200154806117848461287a565b10156117a25760405162461bcd60e51b81526004016105779061302f565b6000806000806117b38a8a87612906565b93509350935093506117d7876117d16000546001600160a01b031690565b84612973565b6118235760405162461bcd60e51b815260206004820152601f60248201527f436f756c646e2774207472616e7366657220746f6b656e2061732066656573006044820152606401610577565b6001600160a01b038416156118595761183d878585612973565b6118595760405162461bcd60e51b81526004016105779061311d565b611864878783612973565b6118b05760405162461bcd60e51b815260206004820181905260248201527f436f756c646e2774207472616e7366657220746f6b656e20746f2062757965726044820152606401610577565b6118bc8a8a308a612300565b6118d85760405162461bcd60e51b8152600401610577906131af565b60008b8152600260205260408120600701546118f690899083612379565b10156119145760405162461bcd60e51b8152600401610577906130e6565b60008b81526003602090815260408083203384529091529020600401805460ff191660011790556119468688876129bd565b50506119548b886000612666565b60008b8152600460209081526040918290205482519081529081018d90526001600160a01b03808d16928201929092528189166060820152608081018b905260a0810187905290851660c082015260e0810184905261010081018390526101208101829052426101408201527fe70f4aad9f39db984a04bce8b0cd7a269c046c57fd6878c9dbf2f6af19a47ecd9061016001610a20565b600081815260046020818152604080842060019081015460029093529084209283015483549184015460078501546006909501546001600160a01b03938416969195948416949290931692611a43906203f480612198565b90506001600160a01b03841615801590611a5d5750428110155b611aa95760405162461bcd60e51b815260206004820181905260248201527f4e6f2062696473206f72207374696c6c2072756e6e696e672061756374696f6e6044820152606401610577565b6001600160a01b0383163314611afb5760405162461bcd60e51b815260206004820152601760248201527621b0b63632b91034b9903737ba103a34329037bbb732b960491b6044820152606401610577565b60008781526003602090815260408083206001600160a01b038816845290915290206004015460ff1615611b655760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e481c1d5c98da185cd959607a1b6044820152606401610577565b600080611b7184612af7565b91509150611b8b8661091f6000546001600160a01b031690565b611ba75760405162461bcd60e51b815260040161057790613099565b611bb28686836125ce565b611bce5760405162461bcd60e51b815260040161057790613099565b611bda88883088612300565b611bf65760405162461bcd60e51b8152600401610577906131af565b6000611c0487866000612379565b1015611c225760405162461bcd60e51b8152600401610577906130e6565b611c2f8960006003612666565b6000898152600460209081526040918290205482519081529081018b90526001600160a01b038a8116828401528881166060830152608082018a9052871660a082015260c0810186905260e0810183905261010081018490524261012082015290517fb46a91724b95c8764d64242653194717e2ab549e1b76e207124d3bddc39aed6d918190036101400190a1505050505050915091565b6000546001600160a01b03163314611d215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610577565b6001600160a01b038116611d865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610577565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152600260208190526040909120600581015460048201548254600184015493909401546001600160a01b0394851694600160a81b90930460ff169290911690851015611e635760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610577565b600160008781526002602052604090206009015460ff166003811115611e8b57611e8b6132c0565b1480611ee55750600260008781526002602052604090206009015460ff166003811115611eba57611eba6132c0565b148015611ec957506001821515145b8015611ee5575060008681526002602052604090206006015442105b611f295760405162461bcd60e51b815260206004820152601560248201527402a37b5b2b71034b9b737ba103337b91039b0b6329605d1b6044820152606401610577565b84611f333361287a565b1015611f515760405162461bcd60e51b81526004016105779061302f565b600080600080611f6288888b612906565b9350935093509350611f85611f743390565b6000546001600160a01b03166117d1565b611fd15760405162461bcd60e51b815260206004820152601f60248201527f436f756c646e2774207472616e7366657220746f6b656e2061732066656573006044820152606401610577565b6001600160a01b0384161561200757611feb338585612973565b6120075760405162461bcd60e51b81526004016105779061311d565b612012338683612973565b6120685760405162461bcd60e51b815260206004820152602160248201527f436f756c646e2774207472616e7366657220746f6b656e20746f2073656c6c656044820152603960f91b6064820152608401610577565b61207488883033612300565b6120905760405162461bcd60e51b8152600401610577906131af565b60008a8152600260208190526040822001546120ab906121ab565b905060006120bb87836000612379565b10156120d95760405162461bcd60e51b8152600401610577906130e6565b6120e58b336000612666565b6120f086338c6129bd565b50507ff18fd7f8585dc258636a453d4a87ee3dd6edda50c1f438348bddf640ca6fbbec8b8a61211c3390565b604080519384526001600160a01b03928316602085015290821690830152606082018b9052608082018d905280891660a083015289151560c0830152871660e0820152610100810186905261012081018590526101408101849052426101608201526101800160405180910390a1505050505050509250929050565b60006121a482846131e4565b9392505050565b6000600e54600b54836121be919061321e565b6121c891906131fc565b92915050565b6001600160a01b038181166000818152600f6020526040808220546011549151630fa6707960e21b815260048101949094529193919283929190911690633e99c1e49060240160206040518083038186803b15801561222c57600080fd5b505afa158015612240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122649190612f46565b6121a4919061323d565b60405163020604bf60e21b8152600481018290526000906001600160a01b0384169063081812fc9060240160206040518083038186803b1580156122b157600080fd5b505afa9250505080156122e1575060408051601f3d908101601f191682019092526122de91810190612cf6565b60015b6122ed575060006121c8565b6001600160a01b03163014905092915050565b604051632142170760e11b81526001600160a01b038381166004830152828116602483015260448201859052600091908616906342842e0e90606401600060405180830381600087803b15801561235657600080fd5b505af115801561236a573d6000803e3d6000fd5b50600198975050505050505050565b6000816123a9576001600160a01b0384166000908152600f60205260409020546123a490849061323d565b6123cd565b6001600160a01b0384166000908152600f60205260409020546123cd9084906131e4565b6001600160a01b0385166000908152600f6020526040902081905590509392505050565b6000604051806101800160405280876001600160a01b0316815260200185815260200184815260200160008152602001866001600160a01b0316815260200160006001600160a01b03168152602001600015158152602001600015158152602001838152602001600081526020016000815260200160016003811115612479576124796132c0565b9052600088815260026020818152604092839020845181546001600160a01b039182166001600160a01b031991821617835592860151600180840191909155948601519382019390935560608501516003808301919091556080860151600483018054918616919094161790925560a085015160058201805460c088015160e08901511515600160a81b0260ff60a81b19911515600160a01b026001600160a81b0319909316949097169390931717919091169390931790925561010084015160068301556101208401516007830155610140840151600883015561016084015160098301805493949193909260ff199091169190849081111561257f5761257f6132c0565b021790555060019998505050505050505050565b600080600d54600a54846125a7919061321e565b6125b191906131fc565b9150816125bd846121ab565b6125c7919061323d565b9050915091565b60115460405163929c517960e01b81526001600160a01b038581166004830152848116602483015260448201849052600092169063929c5179906064015b602060405180830381600087803b15801561262657600080fd5b505af115801561263a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265e9190612ebe565b949350505050565b6000838152600260205260409020600901805482919060ff19166001836003811115612694576126946132c0565b02179055506001600160a01b038216156126d357600083815260026020526040902060050180546001600160a01b0319166001600160a01b0384161790555b505050565b60006040518061018001604052808a6001600160a01b0316815260200188815260200187815260200160008152602001896001600160a01b0316815260200160006001600160a01b0316815260200160011515815260200186151581526020018481526020018381526020018581526020016002600381111561275d5761275d6132c0565b905260008b815260026020818152604092839020845181546001600160a01b039182166001600160a01b031991821617835592860151600180840191909155948601519382019390935560608501516003808301919091556080860151600483018054918616919094161790925560a085015160058201805460c088015160e08901511515600160a81b0260ff60a81b19911515600160a01b026001600160a81b0319909316949097169390931717919091169390931790925561010084015160068301556101208401516007830155610140840151600883015561016084015160098301805493949193909260ff1990911691908490811115612863576128636132c0565b021790555060019c9b505050505050505050505050565b600654604051636eb1769f60e11b81526001600160a01b0383811660048301523060248301526000926401000000009004169063dd62ed3e9060440160206040518083038186803b1580156128ce57600080fd5b505afa1580156128e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c89190612f46565b60008060008061291585612b21565b9150612921828661323d565b905061292c87612b34565b1561296a5761293c878787612bc4565b9094509250821580159061295857506001600160a01b03841615155b1561296a57612967838261323d565b90505b93509350935093565b6006546040516323b872dd60e01b81526001600160a01b038581166004830152848116602483015260448201849052600092640100000000900416906323b872dd9060640161260c565b600080806129cc6002856131fc565b905060006129db6002866131fc565b601254604051631287995760e31b81526001600160a01b038a811660048301526024820186905292935091169063943ccab890604401602060405180830381600087803b158015612a2b57600080fd5b505af1158015612a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a639190612f46565b601254604051631287995760e31b81526001600160a01b0389811660048301526024820185905292955091169063943ccab890604401602060405180830381600087803b158015612ab357600080fd5b505af1158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb9190612f46565b93505050935093915050565b600080600c5460095484612b0b919061321e565b612b1591906131fc565b91506125c7828461323d565b6000600854600754836121be919061321e565b6006546040516301ffc9a760e01b815260e09190911b6001600160e01b03191660048201526000906001600160a01b038316906301ffc9a79060240160206040518083038186803b158015612b8857600080fd5b505afa925050508015612bb8575060408051601f3d908101601f19168201909252612bb591810190612ebe565b60015b6121c857506000919050565b60405163152a902d60e11b8152600481018390526024810182905260009081906001600160a01b03861690632a55205a90604401604080518083038186803b158015612c0f57600080fd5b505afa158015612c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c479190612df3565b90969095509350505050565b828054828255906000526020600020908101928215612c935760005260206000209182015b82811115612c93578254825591600101919060010190612c78565b50612c9f929150612cc4565b5090565b5080546000825590600052602060002090810190612cc19190612cc4565b50565b5b80821115612c9f5760008155600101612cc5565b600060208284031215612ceb57600080fd5b81356121a481613302565b600060208284031215612d0857600080fd5b81516121a481613302565b60008060008060808587031215612d2957600080fd5b8435612d3481613302565b93506020850135612d4481613302565b925060408501359150606085013567ffffffffffffffff80821115612d6857600080fd5b818701915087601f830112612d7c57600080fd5b813581811115612d8e57612d8e6132ec565b604051601f8201601f19908116603f01168101908382118183101715612db657612db66132ec565b816040528281528a6020848701011115612dcf57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612e0657600080fd5b8251612e1181613302565b6020939093015192949293505050565b600080600060608486031215612e3657600080fd5b8335612e4181613302565b95602085013595506040909401359392505050565b600080600080600080600060e0888a031215612e7157600080fd5b8735612e7c81613302565b96506020880135955060408801359450606088013593506080880135612ea181613317565b9699959850939692959460a0840135945060c09093013592915050565b600060208284031215612ed057600080fd5b81516121a481613317565b600060208284031215612eed57600080fd5b5035919050565b60008060408385031215612f0757600080fd5b823591506020830135612f1981613302565b809150509250929050565b60008060408385031215612f3757600080fd5b50508035926020909101359150565b600060208284031215612f5857600080fd5b5051919050565b6bffffffffffffffffffffffff19606095861b8116825260148201949094529190931b9091166034820152604881019190915260680190565b9788526001600160a01b0396871660208901529490951660408701526060860192909252608085015260a084015260c083019190915260e08201526101000190565b600060208083528351808285015260005b8181101561300757858101830151858201604001528201612feb565b81811115613019576000604083870101525b50601f01601f1916929092016040019392505050565b60208082526044908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20776960408201527f7468647261772074686520726571756972656420616d6f756e74206f6620746f6060820152636b656e7360e01b608082015260a00190565b6020808252602d908201527f636f756c646e277420646564756374207468652066696e6520666f722074686560408201526c0818591b5a5b881dd85b1b195d609a1b606082015260800190565b6020808252601f908201527f6e656761746976652072657365727665206973206e6f7420616c6c6f77656400604082015260600190565b60208082526021908201527f436f756c646e2774207472616e7366657220746f6b656e20746f2069737375656040820152603960f91b606082015260800190565b60208082526031908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20747260408201527030b739b332b9103cb7bab9103a37b5b2b760791b606082015260800190565b6020808252818101527f4e465420746f6b656e20636f756c646e2774206265207472616e736665726564604082015260600190565b600082198211156131f7576131f76132aa565b500190565b60008261321957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613238576132386132aa565b500290565b60008282101561324f5761324f6132aa565b500390565b600181811c9082168061326857607f821691505b6020821081141561328957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156132a3576132a36132aa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612cc157600080fd5b8015158114612cc157600080fdfea2646970667358221220cbb5afc7e7798d2f0452d2e8e9c34c30df271b776a9ded4752cfa0c52baf809064736f6c63430008070033",
  "devdoc": {
    "author": "Eman Herawy, StartFi Team",
    "kind": "dev",
    "methods": {
      "bid(bytes32,uint256)": {
        "details": "called by dapps to bid on an auction",
        "params": {
          "bidPrice": "price",
          "listingId": "listing id"
        },
        "returns": {
          "bidId": "bid id"
        }
      },
      "buyNow(bytes32,uint256)": {
        "details": "called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace",
        "params": {
          "listingId": "listing id",
          "price": "gevin price"
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id"
        }
      },
      "createAuction(address,uint256,uint256,uint256,bool,uint256,uint256)": {
        "details": "called by dapps to create  new auction",
        "params": {
          "duration": "when auction ends",
          "listingPrice": "min price",
          "nFTContract": "nft contract address",
          "qualifyAmount": "amount of token locked as qualify for any bidder wants bid",
          "sellFor": "price  to sell with if sellForEnabled=true",
          "sellForEnabled": "true if auction enable direct selling",
          "tokenId": "token id"
        },
        "returns": {
          "listId": "listing id"
        }
      },
      "deList(bytes32)": {
        "details": "called by seller through dapps when s/he wants to remove this token from the marketplace",
        "params": {
          "listingId": "listing id"
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id"
        }
      },
      "disputeAuction(bytes32)": {
        "details": "called by seller through dapps when his/her auction is  not fullfilled after 3 days",
        "params": {
          "listingId": "listing id"
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id"
        }
      },
      "freeReserves()": {
        "details": "called by user through dapps when his/her wants to free his reserved tokens which are no longer in active auction or listing",
        "returns": {
          "curentReserves": "user reserves after freeing the unused reservd"
        }
      },
      "fullfillBid(bytes32)": {
        "details": "called by bidder through dapps when bidder win an auction and wants to pay to get the NFT",
        "params": {
          "listingId": "listing id"
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id"
        }
      },
      "getAuctionBidDetails(bytes32,address)": {
        "details": "called by dapp or any contract to get info about a given bidder in a listing",
        "params": {
          "bidder": "bidder address",
          "listingId": "listing id"
        },
        "returns": {
          "bidId": "bid id",
          "bidPrice": "bid price",
          "nFTContract": " nft contract address",
          "tokenId": "nft token id"
        }
      },
      "getListingDetails(bytes32)": {
        "details": "called by dapp or any contract to get info about a gevin listing    ",
        "params": {
          "listingId": "listing id      "
        },
        "returns": {
          "bedEnabeled": "true if auction enabled  ",
          "buyer": " nft buyer address",
          "endPrice": "purchase price",
          "listingPrice": "initial price or minimum price that the seller can accept",
          "qualifyAmount": " amount of token locked as qualify for any bidder wants bid ",
          "releaseTime": " when auction ends",
          "sellFor": "if sell for enabled for auction, this should be more than zero",
          "sellForEnabled": "true if auction enable direct selling",
          "seller": " nft seller address",
          "status": "in number {Sold,OnMarket, onAuction,Canceled}",
          "tokenAddress": " nft contract address",
          "tokenId": "NFT token Id "
        }
      },
      "getServiceFee()": {
        "returns": {
          "_0": "the value of the state variable `_feeFraction`"
        }
      },
      "getUserReserved(address)": {
        "params": {
          "user": ": participant address"
        },
        "returns": {
          "_0": "the value of user reserves"
        }
      },
      "listOnMarketplace(address,uint256,uint256)": {
        "details": "called by dapps to list new item",
        "params": {
          "listingPrice": "min price",
          "nFTContract": "nft contract address",
          "tokenId": "token id"
        },
        "returns": {
          "listId": "listing id"
        }
      },
      "marketPlaceName()": {
        "returns": {
          "_0": "market place name"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "winnerBid(bytes32)": {
        "details": "called by dapp or any contract to get info about a winner bid",
        "params": {
          "listingId": "listing id"
        },
        "returns": {
          "bidId": "bid id",
          "bidPrice": "bid price",
          "bidder": "bidder address",
          "isPurchased": "true if purchased",
          "nFTContract": " nft contract address",
          "tokenId": "nft token id"
        }
      }
    },
    "title": "StartFi MarketPlace desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyNow(bytes32,uint256)": {
        "notice": "if auction, the seller must enabe forSale. prices should be more than or equal the listing price"
      },
      "deList(bytes32)": {
        "notice": "auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine"
      },
      "disputeAuction(bytes32)": {
        "notice": "after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner"
      },
      "freeReserves()": {
        "notice": "this function is greedy, called by user only when s/he wants rather than force the check & updates with every transaction which might be very costly ."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 685,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4885,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "delistAfter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4925,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_tokenListings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Listing)4915_storage)"
      },
      {
        "astId": 4693,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listingBids",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Bid)4681_storage))"
      },
      {
        "astId": 4698,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidToListing",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(WinningBid)4686_storage)"
      },
      {
        "astId": 4478,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_marketPlaceName",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4481,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "RORALTY_INTERFACE",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes4"
      },
      {
        "astId": 8729,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_paymentToken",
        "offset": 4,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 8732,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_feeFraction",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8735,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_feeBase",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 8738,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidPenaltyPercentage",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 8741,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "delistFeesPercentage",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 8744,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listqualifyPercentage",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 8747,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidPenaltyPercentageBase",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 8750,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "delistFeesPercentageBase",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 8753,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listqualifyPercentageBase",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8757,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "userReserves",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8762,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "userListing",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 8764,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "stakeContract",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 8766,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "reputationContract",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 5218,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "minQualifyAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(ListingStatus)4920": {
        "encoding": "inplace",
        "label": "enum MarketPlaceListing.ListingStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Bid)4681_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MarketPlaceBid.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)4681_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Bid)4681_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct MarketPlaceBid.Bid))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Bid)4681_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Listing)4915_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlaceListing.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)4915_storage"
      },
      "t_mapping(t_bytes32,t_struct(WinningBid)4686_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlaceBid.WinningBid)",
        "numberOfBytes": "32",
        "value": "t_struct(WinningBid)4686_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)4681_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceBid.Bid",
        "members": [
          {
            "astId": 4672,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4674,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "nFTContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4676,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4678,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4680,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "isPurchased",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Listing)4915_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceListing.Listing",
        "members": [
          {
            "astId": 4891,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "nFTContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4893,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4895,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "listingPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4897,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "endPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4899,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4901,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "buyer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 4903,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bedEnabeled",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 4905,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "sellForEnabled",
            "offset": 21,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 4907,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "releaseTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 4909,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "qualifyAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4911,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "sellFor",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4914,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(ListingStatus)4920"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(WinningBid)4686_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceBid.WinningBid",
        "members": [
          {
            "astId": 4683,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4685,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}