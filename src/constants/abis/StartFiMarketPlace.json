{
  "address": "0xD9c2a2a0eAcCF0a2469e182ef1592752c33A9ef1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_marketPlaceName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_paymentContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakeContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BidOnAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAucton",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BuyNow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "sellForEnabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellFor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CreateAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fineFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DeListOffMarketplace",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finefees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DisputeAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FullfillBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ListOnMarketplace",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastReserves",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserves",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UserReservesFree",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bidPenaltyPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "buyNow",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sellForEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "sellFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createAuction",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "deList",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delistAfter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delistFeesPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delistFeesPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "disputeAuction",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "curentReserves",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "fullfillBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "_NFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "getAuctionBidDetails",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "getListingDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "bedEnabeled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "sellForEnabled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "releaseTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qualifyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getServiceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReserved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listingPrice",
          "type": "uint256"
        }
      ],
      "name": "listOnMarketplace",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "listId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listqualifyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listqualifyPercentageBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketPlaceName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "listingId",
          "type": "bytes32"
        }
      ],
      "name": "winnerBid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "bidId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nFTContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPurchased",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c5f7b92ed95401919218e3c7e5345a52d97526fd156add95f7aabfec44ef7f3",
  "receipt": {
    "to": null,
    "from": "0xe092b1fa25DF5786D151246E492Eed3d15EA4dAA",
    "contractAddress": "0xD9c2a2a0eAcCF0a2469e182ef1592752c33A9ef1",
    "transactionIndex": 83,
    "gasUsed": "3339793",
    "logsBloom": "0x
    "blockHash": "0xd246f8f049e992a88a608235409412c653091449e324d6abb84b570b658beebf",
    "transactionHash": "0x3c5f7b92ed95401919218e3c7e5345a52d97526fd156add95f7aabfec44ef7f3",
    "logs": [
      {
        "transactionIndex": 83,
        "blockNumber": 10588784,
        "transactionHash": "0x3c5f7b92ed95401919218e3c7e5345a52d97526fd156add95f7aabfec44ef7f3",
        "address": "0xD9c2a2a0eAcCF0a2469e182ef1592752c33A9ef1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e092b1fa25df5786d151246e492eed3d15ea4daa"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0xd246f8f049e992a88a608235409412c653091449e324d6abb84b570b658beebf"
      }
    ],
    "blockNumber": 10588784,
    "cumulativeGasUsed": "6006655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "StartFi Market",
    "0xC80423A1C434b7EE5cF4a31B2Da2DB15D4844Da2",
    "0x09eA7D9fe8CF9cb4F4A0c0b42befd3eC8Cbb62B5"
  ],
  "solcInputHash": "3bdeb55aa7c775c4ed2e37696a1199f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_marketPlaceName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_paymentContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidOnAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAucton\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BuyNow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sellForEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CreateAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fineFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DeListOffMarketplace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finefees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisputeAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FullfillBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ListOnMarketplace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserReservesFree\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidPenaltyPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sellForEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sellFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"deList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delistAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delistFeesPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delistFeesPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"disputeAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"curentReserves\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"fullfillBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_NFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getAuctionBidDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"getListingDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bedEnabeled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sellForEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qualifyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"}],\"name\":\"listOnMarketplace\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"listId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listqualifyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listqualifyPercentageBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPlaceName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"listingId\",\"type\":\"bytes32\"}],\"name\":\"winnerBid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nFTContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPurchased\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eman Herawy, StartFi Team\",\"kind\":\"dev\",\"methods\":{\"bid(bytes32,address,uint256,uint256)\":{\"details\":\"called by dapps to bid on an auction \",\"params\":{\"bidPrice\":\"price \",\"listingId\":\"listing id \",\"tokenAddress\":\"nft contract address\",\"tokenId\":\"token id \"},\"returns\":{\"bidId\":\"bid id\"}},\"buyNow(bytes32,uint256)\":{\"details\":\"called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace   \",\"params\":{\"listingId\":\"listing id \",\"price\":\"gevin price\"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id \"}},\"createAuction(address,uint256,uint256,uint256,bool,uint256,uint256)\":{\"details\":\"called by dapps to create  new auction \",\"params\":{\"duration\":\"when auction ends\",\"listingPrice\":\"min price \",\"nFTContract\":\"nft contract address\",\"qualifyAmount\":\"amount of token locked as qualify for any bidder wants bid \",\"sellFor\":\"price  to sell with if sellForEnabled=true\",\"sellForEnabled\":\"true if auction enable direct selling\",\"tokenId\":\"token id \"},\"returns\":{\"listId\":\"listing id\"}},\"deList(bytes32)\":{\"details\":\"called by seller through dapps when s/he wants to remove this token from the marketplace   \",\"params\":{\"listingId\":\"listing id \"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id \"}},\"disputeAuction(bytes32)\":{\"details\":\"called by seller through dapps when his/her auction is  not fullfilled after 3 days\",\"params\":{\"listingId\":\"listing id \"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id \"}},\"freeReserves()\":{\"details\":\"called by user through dapps when his/her wants to free his reserved tokens which are no longer in active auction or listing\",\"returns\":{\"curentReserves\":\"user reserves after freeing the unused reservd\"}},\"fullfillBid(bytes32)\":{\"details\":\"called by bidder through dapps when bidder win an auction and wants to pay to get the NFT  \",\"params\":{\"listingId\":\"listing id \"},\"returns\":{\"_NFTContract\":\"nft contract address\",\"tokenId\":\"token id \"}},\"getAuctionBidDetails(bytes32,address)\":{\"details\":\"called by dapp or any contract to get info about a given bidder in a listing    \",\"params\":{\"bidder\":\"bidder address\",\"listingId\":\"listing id      \"},\"returns\":{\"bidId\":\"bid id\",\"bidPrice\":\"bid price\",\"nFTContract\":\" nft contract address\",\"tokenId\":\"nft token id\"}},\"getListingDetails(bytes32)\":{\"details\":\"called by dapp or any contract to get info about a gevin listing    \",\"params\":{\"listingId\":\"listing id      \"},\"returns\":{\"bedEnabeled\":\"true if auction enabled  \",\"buyer\":\" nft buyer address\",\"endPrice\":\"purchase price\",\"listingPrice\":\"initial price or minimum price that the seller can accept\",\"qualifyAmount\":\" amount of token locked as qualify for any bidder wants bid \",\"releaseTime\":\" when auction ends\",\"sellFor\":\"if sell for enabled for auction, this should be more than zero\",\"sellForEnabled\":\"true if auction enable direct selling\",\"seller\":\" nft seller address\",\"status\":\"in number {Sold,OnMarket, onAuction,Canceled}\",\"tokenAddress\":\" nft contract address\",\"tokenId\":\"NFT token Id \"}},\"getServiceFee()\":{\"returns\":{\"_0\":\"the value of the state variable `_feeFraction`\"}},\"getUserReserved(address)\":{\"params\":{\"user\":\": participant address\"},\"returns\":{\"_0\":\"the value of user reserves\"}},\"listOnMarketplace(address,uint256,uint256)\":{\"details\":\"called by dapps to list new item \",\"params\":{\"listingPrice\":\"min price \",\"nFTContract\":\"nft contract address\",\"tokenId\":\"token id \"},\"returns\":{\"listId\":\"listing id\"}},\"marketPlaceName()\":{\"returns\":{\"_0\":\"market place name\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"winnerBid(bytes32)\":{\"details\":\"called by dapp or any contract to get info about a winner bid    \",\"params\":{\"listingId\":\"listing id      \"},\"returns\":{\"bidId\":\"bid id\",\"bidPrice\":\"bid price\",\"bidder\":\"bidder address\",\"isPurchased\":\"true if purchased\",\"nFTContract\":\" nft contract address\",\"tokenId\":\"nft token id\"}}},\"title\":\"StartFi MarketPlace desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares    \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyNow(bytes32,uint256)\":{\"notice\":\"if auction, the seller must enabe forSale. prices should be more than or equal the listing price\"},\"deList(bytes32)\":{\"notice\":\"auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine\"},\"disputeAuction(bytes32)\":{\"notice\":\"after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner\"},\"freeReserves()\":{\"notice\":\"this function is greedy, called by user only when s/he wants rather than force the check & updates with every transaction which might be very costly .\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartFiMarketPlace.sol\":\"StartFiMarketPlace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/MarketPlaceBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./interface/IERC721Royalty.sol\\\";\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  MarketPlace Base\\n * [ desc ] : contract to handle the main functions for any marketplace\\n */\\ncontract MarketPlaceBase is  ERC721Holder {\\n    /******************************************* decalrations go here ********************************************************* */\\n\\n    string private _marketPlaceName;\\n    bytes4   RORALTY_INTERFACE= 0x2a55205a;\\n /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n        string memory _name \\n    )  {\\n        _marketPlaceName = _name;\\n       \\n         \\n    }\\n\\n /******************************************* read state functions go here ********************************************************* */\\n     /**\\n    * \\n    * @dev  interal function to check if any gevin contract has supportsInterface See {IERC165-supportsInterface}.\\n    * @param _NFTContract NFT contract address\\n    * @return true if this NFT contract support royalty, false if not\\n     */\\n function _supportRoyalty(address _NFTContract) view internal  returns (bool) {\\n       try IERC721(_NFTContract).supportsInterface(RORALTY_INTERFACE) returns (bool isRoyaltySupported) {\\n            return isRoyaltySupported;\\n        } catch {\\n            return false;\\n        }\\n }\\n /**\\n    *@notice  only if this contract has royaltyInfo function \\n    *@dev  call the royaltyInfo function in nft contract\\n    *@param _NFTContract NFT contract address\\n    *@param _tokenId token id\\n    *@param _value  token price\\n    *@return issuer original issuer address\\n    *@return _royaltyAmount  the issuer total amount of tokens that he should recieve based on his share\\n     */\\n function _getRoyaltyInfo(address _NFTContract, uint256 _tokenId, uint256 _value) view internal  returns (address issuer, uint256 _royaltyAmount) {\\n       (issuer, _royaltyAmount) =IERC721Royalty(_NFTContract).royaltyInfo( _tokenId,   _value) ;\\n }\\n\\n    /**\\n       * @return market place name\\n      */\\n    function marketPlaceName() external view returns (string memory) {\\n        return _marketPlaceName;\\n    }\\n    \\n    /**\\n    *@param _NFTContract NFT contract address\\n    *@param tokenId token id\\n    * @return the owner of the gevin token id and address\\n     */\\n    function tokenOwner(address _NFTContract, uint256 tokenId) internal view returns (address) {\\n       return IERC721(_NFTContract).ownerOf(tokenId) ;\\n    }\\n\\n    /**\\n\\n     * @dev check if this contract has approved to transfer this erc721 token\\n     *@param _NFTContract NFT contract address\\n     *@param tokenId token id\\n     * @return true if this contract is apporved , false if not\\n     */\\n    function _isTokenApproved(address _NFTContract, uint256 tokenId) internal view returns (bool) {\\n        try IERC721(_NFTContract).getApproved(tokenId) returns (address tokenOperator) {\\n            return tokenOperator == address(this);\\n        } catch {\\n            return false;\\n        }\\n      \\n    }\\n\\n    /**\\n     *@dev See {IERC721-isApprovedForAll}.\\n     *@dev check if this contract has approved to all of this owner's erc721 tokens\\n     *@param _NFTContract NFT contract address\\n     *@param owner token owner\\n     *@return true if this contract is apporved , false if not\\n     */\\n    function _isAllTokenApproved(address _NFTContract,address owner) internal view returns (bool) {\\n        return IERC721(_NFTContract).isApprovedForAll(owner, address(this));\\n    }  \\n\\n      /******************************************* state functions go here ********************************************************* */\\n\\n    \\n    /**\\n        * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n        *\\n        * See {setApprovalForAll}\\n     */\\n     function _changeMarketPlaceName(string memory _name)internal {\\n      _marketPlaceName=_name;  \\n     }\\n  \\n      /**\\n        * @dev  Safely transfers `tokenId` token from `from` to `to`. by calling the base erc721 contract\\n        *@param _NFTContract NFT contract address\\n        *@param tokenId token id\\n        *@param from sender \\n        *@param to recipient\\n        * @return true if it's done\\n        * See {safeTransferFrom}\\n     */\\n    function _safeNFTTransfer(address _NFTContract, uint256 tokenId, address from, address to) internal returns (bool) {\\n       IERC721(_NFTContract). safeTransferFrom( from,  to,  tokenId);\\n       return true;\\n    }\\n\\n\\n\\n}  \\n\\n   \\n\",\"keccak256\":\"0x63241c143be1ba5a78c43d0a7e75158416fb0e3c100e5411a96d447707e48f39\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/MarketPlaceBid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  MarketPlace Bid\\n * [ desc ] : contract handles all the bid related functions for marketplace\\n */\\ncontract MarketPlaceBid  {\\n \\n    // using Address for address;\\n    // using EnumerableSet for EnumerableSet.UintSet;\\n    // using EnumerableSet for EnumerableSet.AddressSet;\\n  struct Bid {\\n        bytes32 bidId;\\n        address nFTContract;\\n        uint256 tokenId;\\n        uint256 bidPrice;\\n        bool isPurchased;\\n       \\n    }\\n  struct WinningBid {\\n        bytes32 bidId;\\n        address bidder;       \\n    }\\n    // lisingId to bid key to bid details \\n  mapping(bytes32 => mapping(address=>Bid)) internal listingBids;\\n  // track the bid latest bid id\\n  mapping (bytes32=>WinningBid) internal bidToListing;\\n\\n\\n /******************************************* read state functions go here ********************************************************* */\\n    /**\\n    * \\n      * @dev   called by dapp or any contract to get info about a winner bid    \\n      * @param listingId listing id      \\n      * @return bidId bid id\\n      * @return bidder bidder address\\n      * @return nFTContract  nft contract address\\n      * @return tokenId nft token id\\n      * @return bidPrice bid price\\n      * @return isPurchased true if purchased\\n     */\\nfunction winnerBid(bytes32 listingId) view external returns (bytes32 bidId, address bidder, address nFTContract,uint256 tokenId,uint256 bidPrice,bool isPurchased ) {\\n  bidId=bidToListing[listingId].bidId;\\n  bidder=bidToListing[listingId].bidder;\\n  nFTContract=listingBids[listingId][bidder].nFTContract;\\n  tokenId=listingBids[listingId][bidder].tokenId;\\n  bidPrice=listingBids[listingId][bidder].bidPrice;\\n  isPurchased=listingBids[listingId][bidder].isPurchased;\\n}\\n    /**\\n    * \\n      * @dev   called by dapp or any contract to get info about a given bidder in a listing    \\n      * @param listingId listing id      \\n      * @param bidder bidder address\\n      * @return bidId bid id\\n      * @return nFTContract  nft contract address\\n      * @return tokenId nft token id\\n      * @return bidPrice bid price\\n     */\\nfunction getAuctionBidDetails(bytes32 listingId,address bidder ) view external returns (bytes32 bidId,  address nFTContract,uint256 tokenId,uint256 bidPrice,bool isPurchased ) {\\n    bidId=listingBids[listingId][bidder].bidId;\\n   nFTContract=listingBids[listingId][bidder].nFTContract;\\n  tokenId=listingBids[listingId][bidder].tokenId;\\n  bidPrice=listingBids[listingId][bidder].bidPrice;\\n  isPurchased=listingBids[listingId][bidder].isPurchased;\\n}\\n /******************************************* change state functions go here ********************************************************* */\\n\\n    /**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  add new bid , update the latest bidder to be his bid\\n    * @param bidId bid id\\n    * @param listingId listing id \\n    * @param tokenAddress nft contract address\\n    * @param bidder bidder address\\n    * @param tokenId token id \\n    * @param bidPrice price \\n    * @return true if it's done \\n     */\\nfunction _bid(bytes32 bidId , bytes32 listingId, address tokenAddress,address bidder, uint256 tokenId, uint256 bidPrice) internal  returns(    bool){\\n \\n            // where bid winner is the last bidder updated\\n            bidToListing[listingId]=WinningBid(bidId, bidder);\\n           listingBids[listingId][bidder]= Bid(bidId,tokenAddress,tokenId,bidPrice,false);\\n           return true;\\n}\\n\\n \\n\\n\\n}  \\n\\n   \\n\",\"keccak256\":\"0xd5ba039570a896c4dfa0053793a6389a6b7f3d1e6f9f7a0cb4bcf1b1feed68fe\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/MarketPlaceListing.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title  MarketPlace Listing\\n * [ desc ] : contract handle all item list in marketplace related function\\n */\\ncontract MarketPlaceListing  {\\n  // all fees are in perentage \\n\\n      // delist after 6 month\\n      uint256 public delistAfter= 6*30 days;\\n    constructor(\\n     \\n    )  {\\n      \\n    }\\n    // using Address for address;\\n    // using EnumerableSet for EnumerableSet.UintSet;\\n    // using EnumerableSet for EnumerableSet.AddressSet;\\n  struct Listing {\\n        address nFTContract;\\n        uint256 tokenId;\\n        uint256 listingPrice;\\n        uint256 endPrice;\\n        address seller;\\n        address buyer;\\n        bool bedEnabeled;\\n        bool sellForEnabled;\\n        // only if bed and sell for enabled \\n        uint256 releaseTime;\\n        uint256 qualifyAmount;\\n        uint256 sellFor;\\n        ListingStatus status ;\\n    }\\n    enum ListingStatus {Sold,OnMarket, onAuction,Canceled }\\n    // listing key  to lisitng details \\n   mapping(bytes32=>Listing) internal _tokenListings;\\n  // track the Listinger total amount of Listings\\n  // mapping (address=>uint256) private userTotalListings;\\n  /******************************************* read state functions go here ********************************************************* */\\n /**\\n    * \\n      * @dev   called by dapp or any contract to get info about a gevin listing    \\n      * @param listingId listing id      \\n\\n      * @return tokenAddress  nft contract address\\n      * @return tokenId NFT token Id \\n      * @return listingPrice initial price or minimum price that the seller can accept\\n      * @return endPrice purchase price\\n      * @return seller  nft seller address\\n      * @return buyer  nft buyer address\\n      * @return bedEnabeled true if auction enabled  \\n      * @return sellForEnabled true if auction enable direct selling\\n      * @return releaseTime  when auction ends\\n      * @return qualifyAmount  amount of token locked as qualify for any bidder wants bid \\n      * @return sellFor if sell for enabled for auction, this should be more than zero\\n      * @return status in number {Sold,OnMarket, onAuction,Canceled}\\n     */\\nfunction getListingDetails(bytes32 listingId ) view external returns ( address tokenAddress,        uint256 tokenId,uint256 listingPrice,uint256 endPrice,address seller,address buyer,bool bedEnabeled,bool sellForEnabled,uint256 releaseTime,uint256 qualifyAmount,uint256 sellFor,uint status ) {\\n      tokenAddress=_tokenListings[listingId].nFTContract ;\\n      tokenId=_tokenListings[listingId].tokenId ;\\n      listingPrice=_tokenListings[listingId].listingPrice ;\\n      endPrice=_tokenListings[listingId]. endPrice;\\n      seller=_tokenListings[listingId]. seller;\\n      buyer=_tokenListings[listingId].buyer ;\\n      bedEnabeled=_tokenListings[listingId].bedEnabeled ;\\n      sellForEnabled=_tokenListings[listingId].sellForEnabled ;\\n      releaseTime=_tokenListings[listingId]. releaseTime;\\n      qualifyAmount=_tokenListings[listingId].qualifyAmount ;\\n      sellFor=_tokenListings[listingId]. sellFor;\\n      status=uint(_tokenListings[listingId]. status);\\n}\\n// list \\n\\n  /**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  add new item for sale in marketplace  \\n    * @param listId listing id\\n    * @param tokenAddress nft contract address\\n    * @param seller seller address\\n    * @param tokenId token id \\n    * @param listingPrice min price \\n    * @param releaseTime  time to delist for free \\n     * @return true if it's done \\n     */\\nfunction _listOnMarketPlace( \\n        bytes32 listId,\\n        address tokenAddress,\\n        address seller,\\n        uint256 tokenId,\\n        uint256 listingPrice,\\n        uint256 releaseTime\\n         ) internal returns (bool)\\n        {\\n  \\n              _tokenListings[listId]=Listing(tokenAddress,tokenId,listingPrice,0,seller,address(0),\\n              false,false,releaseTime,0,0,ListingStatus.OnMarket);\\n              return true;\\n        }\\n  /**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  add new auction  \\n    * @param listId listing id\\n    * @param tokenAddress nft contract address\\n    * @param seller seller address\\n    * @param tokenId token id \\n    * @param listingPrice min price \\n    * @param sellForEnabled true if auction enable direct selling\\n    * @param sellFor  price  to sell with if sellForEnabled=true\\n    * @param releaseTime  when auction ends\\n    * @param qualifyAmount  amount of token locked as qualify for any bidder wants bid \\n    * @return true if it's done \\n     */\\nfunction _creatAuction( \\n        bytes32 listId,\\n        address tokenAddress,\\n        address seller,\\n        uint256 tokenId,\\n        uint256 listingPrice,     \\n        bool sellForEnabled,\\n        uint256 sellFor,\\n        uint256 releaseTime,\\n        uint256 qualifyAmount\\n        ) internal returns (bool)\\n        {\\n  \\n              _tokenListings[listId]=Listing(tokenAddress,tokenId,listingPrice,0,seller,address(0),\\n              true,sellForEnabled,releaseTime,qualifyAmount,sellFor,ListingStatus.onAuction);\\n              return true;\\n        }\\n        function _finalizeListing(  bytes32 listId,address buyer, ListingStatus status) internal  {\\n          _tokenListings[listId].status=status;\\n          if(buyer!=address(0)){\\n             _tokenListings[listId].buyer=buyer;\\n          }\\n          \\n        }\\n\\n    /**\\n    *  @notice  all conditions and checks are made prior to this function \\n    * @dev  delist an item by mark status as canceled\\n    * @param listingId listing id\\n    *  \\n     */\\n  function _deList(bytes32 listingId) internal {\\n          _tokenListings[listingId].status=ListingStatus.Canceled;\\n        }\\n\\n /**\\n    *  @notice  all conditions and checks are made prior to this function \\n    * @dev  change the duration of which user can delist thier nfts for free after it\\n    * @param duration in seconds , eg 30 days in desconds\\n    *  \\n     */\\n  function _changeDelistAfter(uint256 duration) internal {\\n         delistAfter =duration;\\n        }\\n\\n}  \\n\\n   \\n\",\"keccak256\":\"0x37476ba45fba518256eed8d1393b87d817971367471aff49eb8e055aada4342a\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartFiMarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\nimport \\\"./StartfiMarketPlaceFinance.sol\\\";\\nimport \\\"./MarketPlaceListing.sol\\\";\\nimport \\\"./MarketPlaceBid.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title StartFi MarketPlace\\n *desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares   \\n * \\n */\\ncontract StartFiMarketPlace is  Ownable ,Pausable, MarketPlaceListing, MarketPlaceBid,StartfiMarketPlaceFinance {\\n  \\n /******************************************* decalrations go here ********************************************************* */\\n \\n\\n// events when auction created auction bid auction cancled auction fullfiled item listed , item purchesed , itme delisted , item delist with deduct , item  disputed , user free reserved , \\n///\\nevent ListOnMarketplace(  bytes32 listId,address nFTContract,address buyer,uint256 tokenId,uint256 listingPrice,uint256 releaseTime,uint256 qualifyAmount,   uint256 timestamp );\\nevent DeListOffMarketplace(  bytes32 listId,address nFTContract,address buyer,uint256 tokenId,uint256 fineFees, uint256 remaining,uint256 releaseTime,  uint256 timestamp );\\n\\nevent CreateAuction(   bytes32 listId,address nFTContract,address buyer,uint256 tokenId,uint256 listingPrice,bool sellForEnabled,uint256 sellFor,uint256 releaseTime,uint256 qualifyAmount,uint256 timestamp );\\n\\nevent BidOnAuction(bytes32 bidId , bytes32 listingId, address tokenAddress,address bidder, uint256 tokenId, uint256 bidPrice,uint256 timestamp );\\n \\n event FullfillBid(bytes32 bidId , bytes32 listingId, address tokenAddress,address bidder, uint256 tokenId, uint256 bidPrice,address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice ,uint256 timestamp );\\n\\n event DisputeAuction(bytes32 bidId , bytes32 listingId, address tokenAddress,address bidder, uint256 tokenId  ,address buyer,uint256 qualifyAmount, uint256 remaining,uint256 finefees,uint256 timestamp );\\n\\n event BuyNow(  bytes32 listId,address nFTContract,address buyer,uint256 tokenId,uint256 sellingPrice,address seller,bool isAucton,address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice,   uint256 timestamp );\\nevent UserReservesFree(address user, uint256 lastReserves,uint256 newReserves,uint256 timestamp );\\n\\n\\n\\n\\n /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n          string memory _marketPlaceName,\\n          address _paymentContract,\\n          address _stakeContract\\n    )   StartfiMarketPlaceFinance(_marketPlaceName,_paymentContract){\\n       stakeContract=_stakeContract;\\n    }\\n\\n  /******************************************* modifiers go here ********************************************************* */\\n\\n    modifier isOpenAuction(bytes32 listingId) {\\n        require(  _tokenListings[listingId].releaseTime> block.timestamp && _tokenListings[listingId].status!=ListingStatus.onAuction,\\\"Auction is ended\\\");\\n        _;\\n    }\\n    modifier canFullfillBid(bytes32 listingId) {\\n        require(  _tokenListings[listingId].releaseTime< block.timestamp && _tokenListings[listingId].status!=ListingStatus.onAuction,\\\"Auction is ended\\\");\\n        _;\\n    }\\n    modifier isOpenForSale(bytes32 listingId) {\\n        require(_tokenListings[listingId].status==ListingStatus.OnMarket,\\\"Item is not for sale\\\");\\n        _;\\n    }\\nmodifier isNotZero(uint256 val) {\\n    require(val>0,\\\"Zero Value is not allowed\\\");\\n    _;\\n}\\n\\n  /******************************************* read state functions go here ********************************************************* */\\n\\n  /******************************************* state functions go here ********************************************************* */\\n\\n// list\\n     /**\\n    * @dev  called by dapps to list new item \\n    * @param nFTContract nft contract address\\n    * @param tokenId token id \\n    * @param listingPrice min price \\n     * @return listId listing id\\n     */\\n    function listOnMarketplace( address nFTContract,\\n          uint256 tokenId,\\n            uint256 listingPrice ) external isNotZero(listingPrice) returns (bytes32 listId) {\\n            uint256 releaseTime = _calcSum(block.timestamp,delistAfter);\\n            listId = keccak256(abi.encodePacked(nFTContract,tokenId,_msgSender(),releaseTime));\\n            // calc qualified ammount\\n            uint256 listQualifyAmount =_getListingQualAmount(listingPrice);\\n\\n          // check that sender is qualified \\n          require(_getStakeAllowance(_msgSender()/*, 0*/)>= listQualifyAmount,\\\"Not enough reserves\\\");\\n          require( _isTokenApproved(nFTContract,  tokenId) ,\\\"Marketplace is not allowed to transfer your token\\\");\\n\\n            // transfer token to contract \\n          require( _safeNFTTransfer(nFTContract,tokenId,_msgSender(),address(this)),\\\"NFT token couldn't be transfered\\\");\\n\\n          // update reserved\\n            _updateUserReserves(_msgSender() ,listQualifyAmount,true);\\n            bytes32  [] storage listings = userListing[_msgSender()];\\n            listings.push(listId);\\n            userListing[_msgSender()]=listings;\\n          // list \\n          require(_listOnMarketPlace( listId,nFTContract,_msgSender(),tokenId,listingPrice,releaseTime) ,\\\"Couldn't list the item\\\");\\n          emit ListOnMarketplace( listId,nFTContract,_msgSender(),tokenId,listingPrice,releaseTime,listQualifyAmount, block.timestamp);\\n        \\n    }\\n// create auction\\n  /**\\n    * @dev  called by dapps to create  new auction \\n    * @param nFTContract nft contract address\\n    * @param tokenId token id \\n    * @param listingPrice min price \\n    * @param qualifyAmount  amount of token locked as qualify for any bidder wants bid \\n    * @param sellForEnabled true if auction enable direct selling\\n    * @param sellFor  price  to sell with if sellForEnabled=true\\n    * @param duration  when auction ends\\n    * @return listId listing id\\n     */\\n    function createAuction( address nFTContract,\\n          uint256 tokenId,\\n            uint256 listingPrice,\\n            uint256 qualifyAmount,\\n            bool sellForEnabled,\\n            uint256 sellFor,\\n            uint256 duration\\n            ) external isNotZero(listingPrice) returns (bytes32 listId) {\\n              require(duration>12 hours,\\\"Auction should be live for more than 12 hours\\\");\\n            uint256 releaseTime = _calcSum(block.timestamp,duration);\\n            listId = keccak256(abi.encodePacked(nFTContract,tokenId,_msgSender(),releaseTime));\\n            if(sellForEnabled){\\n              require(sellFor>0,\\\"Zero price is not allowed\\\");\\n            }\\n          // check that sender is qualified \\n            require( _isTokenApproved(nFTContract,  tokenId) ,\\\"Marketplace is not allowed to transfer your token\\\");\\n\\n            // transfer token to contract \\n          require( _safeNFTTransfer(nFTContract,tokenId,_msgSender(),address(this)),\\\"NFT token couldn't be transfered\\\");\\n\\n            // update reserved\\n            // create auction\\n\\n          require(_creatAuction( listId,nFTContract,_msgSender(),tokenId,listingPrice,   sellForEnabled,sellFor,releaseTime,qualifyAmount) ,\\\"Couldn't list the item\\\");\\n           emit CreateAuction( listId,nFTContract,_msgSender(),tokenId,listingPrice,   sellForEnabled,sellFor,releaseTime,qualifyAmount,block.timestamp); \\n        \\n    }\\n      /**\\n    * @dev called by dapps to bid on an auction\\n    * \\n    * @param listingId listing id \\n    * @param tokenAddress nft contract address\\n    * @param tokenId token id \\n    * @param bidPrice price \\n    * @return bidId bid id\\n     */\\n    function bid(bytes32 listingId, address tokenAddress, uint256 tokenId, uint256 bidPrice) \\n        external isOpenAuction(listingId) returns (bytes32 bidId){\\n         bidId = keccak256(abi.encodePacked(listingId,tokenAddress,_msgSender(),tokenId));\\n         // bid should be more than than the mini and more than the last bid\\n        address lastbidder= bidToListing[listingId].bidder;\\n            uint256 qualifyAmount =  _tokenListings[listingId].qualifyAmount;\\n         if(lastbidder==address(0)){\\n             require(bidPrice>= _tokenListings[listingId].listingPrice,\\\"bid price must be more than or equal the minimum price\\\");\\n\\n         }else{\\n            require(bidPrice>listingBids[listingId][lastbidder].bidPrice,\\\"bid price must be more than the last bid\\\");\\n\\n                          \\n         }\\n         // if this is the bidder first bid, the price will be 0 \\n       uint256 prevAmount= listingBids[listingId][_msgSender()].bidPrice;\\n       if(prevAmount==0){\\n                  // check that he has reserved\\n         require(_getStakeAllowance(_msgSender()/*, 0*/)>= qualifyAmount,\\\"Not enough reserves\\\");\\n          bytes32 [] storage listings = userListing[_msgSender()];\\n            listings.push(listingId);\\n            userListing[_msgSender()]=listings;\\n         // update user reserves\\n         // reserve Zero couldn't be at any case\\n        require( _updateUserReserves(_msgSender() ,qualifyAmount,true)>0,\\\"Reserve Zero is not allowed\\\");\\n       }\\n       \\n         // bid \\n         require(_bid( bidId, listingId,  tokenAddress, _msgSender(),   tokenId,   bidPrice),\\\"Couldn't Bid\\\");\\n         emit BidOnAuction( bidId, listingId,  tokenAddress, _msgSender(),   tokenId,   bidPrice,block.timestamp);\\n     \\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n    /**\\n    * @dev called by bidder through dapps when bidder win an auction and wants to pay to get the NFT \\n    * \\n    * @param listingId listing id \\n    * @return _NFTContract nft contract address\\n    * @return tokenId token id \\n     */\\n    function fullfillBid(bytes32 listingId) \\n        external canFullfillBid(listingId) returns (address _NFTContract,uint256 tokenId){\\n         address winnerBidder= bidToListing[listingId].bidder;\\n         address buyer= _tokenListings[listingId].buyer;\\n           _NFTContract= _tokenListings[listingId]. nFTContract;\\n           tokenId= _tokenListings[listingId]. tokenId;\\n        require(winnerBidder==_msgSender(),\\\"Caller is not the winner\\\");\\n         // if it's new, the price will be 0 \\n        uint256 bidPrice= listingBids[listingId][winnerBidder].bidPrice;\\n         // check that contract is allowed to transfer tokens \\n         require(_getAllowance(winnerBidder)>= bidPrice,\\\"Marketplace is not allowed to withdraw the required amount of tokens\\\");\\n        // transfer price \\n    \\n        (address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice) = _getListingFinancialInfo( _NFTContract,tokenId, bidPrice) ;\\n      \\n       require(_safeTokenTransferFrom(owner(),buyer, fees),\\\"Couldn't transfer token as fees\\\");\\n       if(issuer!=address(0)){\\n       require(_safeTokenTransferFrom(issuer,buyer, royaltyAmount),\\\"Couldn't transfer token to issuer\\\");\\n       }\\n\\n        // token value could be zero ater taking the roylty share ??? need to ask?\\n        require(_safeTokenTransferFrom(winnerBidder,buyer, netPrice),\\\"Couldn't transfer token to buyer\\\");\\n          // trnasfer token\\n        require( _safeNFTTransfer(_NFTContract,tokenId,address(this), winnerBidder),\\\"NFT token couldn't be transfered\\\");\\n         // update user reserves\\n         // reserve nigative couldn't be at any case\\n        require( _updateUserReserves(winnerBidder,_tokenListings[listingId].qualifyAmount,false)>=0,\\\"negative reserve is not allowed\\\");\\n        listingBids[listingId][_msgSender()].isPurchased=true;\\n        // finish listing \\n        _finalizeListing(listingId,winnerBidder, ListingStatus.Sold);\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n        emit FullfillBid(  bidToListing[listingId].bidId ,   listingId,   _NFTContract, winnerBidder,  tokenId,  bidPrice,  issuer,  royaltyAmount,   fees,   netPrice ,block.timestamp );\\n    }\\n// delist\\n    /**\\n    * @dev called by seller through dapps when s/he wants to remove this token from the marketplace   \\n    * @notice auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine\\n    * @param listingId listing id \\n    * @return _NFTContract nft contract address\\n    * @return tokenId token id \\n     */\\n    function deList(bytes32 listingId) \\n        external  returns ( address _NFTContract,uint256 tokenId){\\n         ListingStatus status= _tokenListings[listingId].status;\\n         address owner= _tokenListings[listingId].buyer;\\n         address seller= _tokenListings[listingId].seller;\\n         _NFTContract= _tokenListings[listingId]. nFTContract;\\n         uint256 releaseTime= _tokenListings[listingId]. releaseTime;\\n         uint256 listingPrice= _tokenListings[listingId]. listingPrice;\\n         tokenId= _tokenListings[listingId]. tokenId;\\n         require(owner==_msgSender(),\\\"Caller is not the owner\\\");\\n         require(seller==address(0),\\\"Already bought token\\\");\\n      uint256 timeToDelistAuction= _calcSum( releaseTime,3 days);\\n\\n        // require(status==ListingStatus.OnMarket || status==ListingStatus.onAuction,\\\"Already bought or canceled token\\\");\\n        require((timeToDelistAuction<=block.timestamp && status==ListingStatus.onAuction)|| (status==ListingStatus.OnMarket),\\\"Can't delist\\\");\\n        uint256 fineAmount ;\\n         uint256 remaining;\\n        // if realse time < now , pay \\n\\n        if(releaseTime<block.timestamp){\\n          // if it's not auction ? pay, \\n         ( fineAmount ,  remaining)= _getDeListingQualAmount(listingPrice);\\n              //TODO: deduct the fine from his stake contract \\n            \\n               require(_deduct(owner,getAdminWallet(), fineAmount),\\\"couldn't deduct the fine\\\");\\n        }else{\\n       remaining=  _getListingQualAmount( listingPrice);\\n        }\\n\\n        // trnasfer token\\n        require( _safeNFTTransfer(_NFTContract,tokenId,address(this), owner),\\\"NFT token couldn't be transfered\\\");\\n         // update user reserves\\n         // reserve nigative couldn't be at any case\\n        require( _updateUserReserves(_msgSender() ,remaining,false)>=0,\\\"negative reserve is not allowed\\\");\\n        // finish listing \\n         _finalizeListing(listingId,address(0),ListingStatus.Canceled);\\n         emit DeListOffMarketplace(listingId,  _NFTContract,  owner,  tokenId,  fineAmount ,  remaining,  releaseTime,  block.timestamp );\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n\\n\\n// buynow\\n /**\\n    * @dev called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace   \\n    * @notice  if auction, the seller must enabe forSale. prices should be more than or equal the listing price\\n    * @param listingId listing id \\n    * @param price gevin price\\n    * @return _NFTContract nft contract address\\n    * @return tokenId token id \\n     */\\n    function buyNow(bytes32 listingId, uint256 price) \\n        external  returns (address _NFTContract,uint256 tokenId){\\n          bool sellForEnabled= _tokenListings[listingId].sellForEnabled;\\n         address buyer= _tokenListings[listingId].buyer;\\n           _NFTContract= _tokenListings[listingId]. nFTContract;\\n           tokenId= _tokenListings[listingId]. tokenId;\\n         require(price>=_tokenListings[listingId]. listingPrice,\\\"Invalid price\\\");\\n        require(_tokenListings[listingId].status==ListingStatus.OnMarket || (_tokenListings[listingId].status==ListingStatus.onAuction && sellForEnabled==true && _tokenListings[listingId].releaseTime> block.timestamp ),\\\"Token isnot for sale \\\");\\n         // check that contract is allowed to transfer tokens \\n         require(_getAllowance(_msgSender())>= price,\\\"Marketplace is not allowed to withdraw the required amount of tokens\\\");\\n        // transfer price \\n    \\n        (address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice) = _getListingFinancialInfo( _NFTContract,tokenId, price) ;\\n      \\n       require(_safeTokenTransferFrom(owner(),buyer, fees),\\\"Couldn't transfer token as fees\\\");\\n       if(issuer!=address(0)){\\n       require(_safeTokenTransferFrom(issuer,buyer, royaltyAmount),\\\"Couldn't transfer token to issuer\\\");\\n       }\\n\\n        // token value could be zero ater taking the roylty share ??? need to ask?\\n        require(_safeTokenTransferFrom(_msgSender(),buyer, netPrice),\\\"Couldn't transfer token to buyer\\\");\\n          // trnasfer token\\n        require( _safeNFTTransfer(_NFTContract,tokenId,address(this), _msgSender()),\\\"NFT token couldn't be transfered\\\");\\n           uint256 ListingQualAmount =  _getListingQualAmount( _tokenListings[listingId]. listingPrice);\\n\\n            require( _updateUserReserves(buyer ,ListingQualAmount,false)>=0,\\\"negative reserve is not allowed\\\");\\n\\n        // finish listing \\n        _finalizeListing(listingId,_msgSender(), ListingStatus.Sold);\\n      emit BuyNow  (listingId,_NFTContract,  buyer,  tokenId,  price,_msgSender(),sellForEnabled,  issuer,  royaltyAmount,   fees,   netPrice,   block. timestamp );\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n    }\\n\\n /**\\n    * @dev called by seller through dapps when his/her auction is  not fullfilled after 3 days\\n    *  @notice  after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner\\n    * @param listingId listing id \\n    * @return _NFTContract nft contract address\\n    * @return tokenId token id \\n     */\\n    function disputeAuction(bytes32 listingId) \\n        external  returns (address _NFTContract,uint256 tokenId){\\n         address winnerBidder= bidToListing[listingId].bidder;\\n         address buyer= _tokenListings[listingId].buyer;\\n           _NFTContract= _tokenListings[listingId]. nFTContract;\\n           tokenId= _tokenListings[listingId]. tokenId;\\n           uint256 qualifyAmount =  _tokenListings[listingId].qualifyAmount;\\n            uint256 timeToDispute= _calcSum(_tokenListings[listingId]. releaseTime,3 days);\\n         require(winnerBidder!=address(0) && timeToDispute>=block.timestamp,\\\"No bids or still running auction\\\");\\n       require(buyer==_msgSender(),\\\"Caller is not the owner\\\");\\n      require(!listingBids[listingId][winnerBidder].isPurchased,\\\"Already purchased\\\");\\n          // call staking contract to deduct \\n        (uint256 fineAmount ,uint256  remaining)= _calcBidDisputeFees(qualifyAmount);\\n        require(_deduct(winnerBidder,getAdminWallet(), fineAmount),\\\"couldn't deduct the fine for the admin wallet\\\");\\n        require(_deduct(winnerBidder, buyer, remaining),\\\"couldn't deduct the fine for the admin wallet\\\");\\n           // trnasfer token\\n        require( _safeNFTTransfer(_NFTContract,tokenId,address(this),buyer),\\\"NFT token couldn't be transfered\\\");\\n            require( _updateUserReserves(winnerBidder ,qualifyAmount,false)>=0,\\\"negative reserve is not allowed\\\");\\n\\n        // finish listing \\n         _finalizeListing(listingId,address(0),ListingStatus.Canceled);\\n        // if bid time is less than 15 min, increase by 15 min\\n        // retuen bid id\\n         emit DisputeAuction(  bidToListing[listingId].bidId ,   listingId,  _NFTContract ,winnerBidder,   tokenId,    buyer,  qualifyAmount, remaining,  fineAmount, block. timestamp );\\n\\n    }\\n\\n     /**\\n    * @dev called by user through dapps when his/her wants to free his reserved tokens which are no longer in active auction or listing\\n    *  @notice this function is greedy, called by user only when s/he wants rather than force the check & updates with every transaction which might be very costly .\\n  \\n    * @return curentReserves user reserves after freeing the unused reservd\\n\\n     */\\n\\n    function freeReserves() external returns (uint256 curentReserves) {\\n      // TODo: Check allternative for gas consumptions\\n      // iterate over the listng key map \\n      // if it's sold, canceled,  free if he is participating on this listing\\n            uint256 lastReserves =userReserves[_msgSender()];\\n            bytes32 [] memory listings = userListing[_msgSender()];\\n            delete userListing[_msgSender()];\\n            bytes32 [] storage newListings = userListing[_msgSender()]  ;\\n             \\n\\n            // loop\\n        for (uint256 index = 0; index < listings.length; index++) {\\n        if( _tokenListings[ listings[index]].status==ListingStatus.onAuction){\\n              newListings.push(listings[index]);\\n              curentReserves = _calcSum(curentReserves,_tokenListings[ listings[index]].qualifyAmount);\\n\\n        }else if ( _tokenListings[ listings[index]].status==ListingStatus.OnMarket){\\n                        newListings.push(listings[index]);\\n                      uint256 listQualifyAmount =_getListingQualAmount(_tokenListings[ listings[index]].listingPrice);\\n\\n                     curentReserves = _calcSum(curentReserves,listQualifyAmount);\\n\\n        }\\n        }       \\n      userListing[_msgSender()]=newListings;\\n      require( _setUserReserves(_msgSender() ,curentReserves),\\\"set reserve faild\\\");\\n      emit UserReservesFree(_msgSender(),  lastReserves,curentReserves,block. timestamp );\\n\\n    }\\n\\n    // ubnormal isssue with calling owner() in deList unction , we have implemented this func as a workaround \\n    function getAdminWallet() view private returns (address) {\\n      return owner() ;\\n    }\\n}\",\"keccak256\":\"0xcbcc4f9dee5c458097c6abd01e366daf591edc43fbd52074ce6aea43a38f918d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/StartfiMarketPlaceFinance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./interface/IStartFiStakes.sol\\\";\\nimport \\\"./MarketPlaceBase.sol\\\";\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *desc   contract to handle all financial work for the marketplace\\n * @title Startfi Marketplace Finance\\n */\\ncontract StartfiMarketPlaceFinance is MarketPlaceBase {\\n /******************************************* decalrations go here ********************************************************* */\\n    using SafeMath for uint256;\\n    address internal _paymentToken;\\n    uint256 internal _feeFraction = 1;\\n    uint256 internal _feeBase = 100;\\n    uint256 bidPenaltyPercentage =1;\\n    uint256 public delistFeesPercentage=1;\\n    uint256 public listqualifyPercentage=1;\\n    uint256 public bidPenaltyPercentageBase =100;\\n    uint256 public delistFeesPercentageBase=100;\\n    uint256 public listqualifyPercentageBase=100;\\n   mapping (address=>uint256) userReserves;\\n   mapping (address=>bytes32[]) userListing;\\n   address public stakeContract;\\n /******************************************* constructor goes here ********************************************************* */\\n\\n  constructor(\\n                 string memory _name ,\\n        address _paymentContract\\n    )   MarketPlaceBase(_name){\\n         \\n       \\n        _paymentToken = _paymentContract;\\n    }\\n\\n\\n  /******************************************* modifiers go here ********************************************************* */\\n\\n\\n\\n  /******************************************* read state functions go here ********************************************************* */\\n    \\n    function _calcSum(uint256 a, uint256 b) pure internal returns (uint256 result) {\\n        result= a.add(b);        \\n    }\\n    /**\\n     @dev calculat the platform fees\\n    *@param price  : item  price\\n    *@return fees the value that the platform will get\\n     */\\n    function _calcFees(uint256 price) view internal returns (uint256 fees) {\\n\\n        fees= price.mul(_feeFraction).div(_feeBase );    \\n    }\\n    /**\\n     @dev calculat the platform fine amount when seller delist before time\\n    *@param listingPrice  : item listing price\\n    *@return amount the value that the platform will get\\n     */\\n    function _getListingQualAmount(uint256 listingPrice) view internal returns (uint256 amount) {\\n        amount= listingPrice.mul(listqualifyPercentage).div( listqualifyPercentageBase);    \\n    }\\n/**\\n     @dev calculat the platform fine amount when seller delist before time\\n    *@param listingPrice  : item listing price\\n    *@return fineAmount the value that the platform will get\\n    *@return remaining the value remaing after subtracting the fine\\n     */\\n    function _getDeListingQualAmount(uint256 listingPrice) view internal returns (uint256 fineAmount , uint256 remaining) {\\n        fineAmount= listingPrice.mul(delistFeesPercentage).div( delistFeesPercentageBase);    \\n        remaining =  _getListingQualAmount( listingPrice).sub(fineAmount);\\n    }\\n      /**\\n      @dev calculat the platform share when seller call disput\\n    *@param qualifyAmount  : seller defind value to be staked in order to participate in a gevin auction\\n    * @return fineAmount the value that the platform will get\\n    * @return remaining the value that the auction woner will get\\n     */\\n      function _calcBidDisputeFees(uint256 qualifyAmount) view internal returns (uint256 fineAmount , uint256 remaining) {   \\n        fineAmount= qualifyAmount.mul(bidPenaltyPercentage).div( bidPenaltyPercentageBase);    \\n        remaining = qualifyAmount.sub(fineAmount);\\n    }\\n   function _getListingFinancialInfo(address _NFTContract,uint256 tokenId, uint256 bidPrice)  view internal returns   (address issuer,uint256 royaltyAmount, uint256 fees, uint256 netPrice) {\\n             fees = _calcFees(bidPrice);\\n      netPrice = bidPrice.sub(fees);\\n          // royalty check\\n          if(_supportRoyalty(_NFTContract)){\\n               ( issuer, royaltyAmount) =_getRoyaltyInfo( _NFTContract,  tokenId, bidPrice);\\n               if(royaltyAmount>0 && issuer!=address(0)){\\n                   netPrice= netPrice.sub(royaltyAmount);\\n               }\\n          }\\n      \\n   }\\n    /**\\n    *@param user  : participant address\\n    * @return the value of user reserves\\n     */\\n    function getUserReserved(address user) external  view returns (uint256)  {\\n        return userReserves[user];\\n    }\\n     /**\\n    *\\n    * @return the value of the state variable `_feeFraction`\\n     */\\n         function getServiceFee() external view returns (uint256) {\\n        return _feeFraction;\\n    }\\n     /**\\n     * @dev :wrap function to get the total allowed number of tokens that this contract can transfer from the given account \\n\\n    * @param owner: owner address\\n    * @return allowed number of tokens that this contract can transfer from the owner account\\n     */\\n    function _getAllowance(address owner) view internal returns (uint256 ) {\\n        return IERC20(_paymentToken).allowance( owner, address(this));\\n    }\\n      /**\\n        * @dev this function calls StartFiStakes contract to get the total staked tokens for 'user' an substract the current reserves to get the total number of free tokens\\n        * @param staker : participant address\\n        * @return allowed number of tokens that this contract can transfer from the owner account\\n      */\\n    function _getStakeAllowance(address staker /*,uint256 prevAmount*/) view internal returns (uint256 ) {\\n        // user can bid multi time, we want to make sure we don't calc the old bid as sperated bid \\n        uint256 userActualReserved= userReserves[staker];//.sub(prevAmount);\\n        return IStartFiStakes(stakeContract).getReserves( staker).sub(userActualReserved);\\n    }\\n  \\n\\n      /******************************************* state functions go here ********************************************************* */\\n     /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev this function calls StartFiStakes contract to subtract the user stakes and add that value to the 'to'\\n        * @param finePayer : fine payer address\\n        * @param to : participant address\\n        * @param amount : value to be deducted from his stakes as a fine\\n        * @return true if it's done\\n      */\\n  function _deduct(address finePayer, address to, uint256 amount)  internal returns (bool ) {\\n          return IStartFiStakes(stakeContract).deduct(finePayer, to, amount);\\n    }\\n    function _safeTokenTransfer(address to, uint256 amount) internal returns (bool) {\\n        return IERC20(_paymentToken). transfer( to,  amount);\\n    }\\n        /**\\n        * @dev  Safely transfers `amount` of token from `from` to `to`.\\n        * @param from address representing the previous owner of the token\\n        * @param to target address that will receive the tokens\\n        * @param amount number of tokens to be transferred\\n        * See {transferFrom}\\n     */\\n    function _safeTokenTransferFrom(address from,address to, uint256 amount) internal returns (bool) {\\n        return IERC20(_paymentToken). transferFrom(from, to,  amount);\\n    }\\n     /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev called to set user reserves\\n        * @param user : participant address\\n        * @param newReservedValue : value to be sored as user reserve\\n      */\\n    function _setUserReserves(address user, uint256 newReservedValue) internal returns (bool) {\\n        userReserves[user]=newReservedValue;\\n        return true;\\n    }\\n          /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev called to increase or decrease user reserves\\n        * @param user : participant address\\n        * @param newReserves : value to be added or substracted\\n        * @param isAddition : true if we are adding the new value \\n     */\\n    function _updateUserReserves(address user, uint256 newReserves, bool isAddition) internal returns (uint256 _userReserves) {\\n        _userReserves=  isAddition? userReserves[user].add(newReserves): userReserves[user].sub(newReserves);\\n        userReserves[user]=_userReserves;\\n        return _userReserves;\\n    }\\n\\n    /**\\n    *   * @notice  all conditions and checks are made prior to this function\\n        * @dev  the formula is (fees * 1000)/base \\n        * @param newFees  the new fees value to be stored \\n        * @param newBase  the new basefees value to be stored \\n        * @return percentage the value of the state variable `_feeFraction`\\n     */\\n     function changeFees(uint256 newFees, uint256 newBase) internal returns (uint256 percentage) {\\n        require(newFees <= newBase, \\\"Fee fraction exceeded base.\\\");\\n          percentage = (newFees. mul( 1000)) .div( newBase);\\n        require(percentage <= 30 && percentage < 10, \\\"Percentage should be from 1-3 %\\\");\\n\\n        _feeFraction = newFees;\\n        _feeBase = newBase;\\n     }\\n     \\n      /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev for later on upgrade , if we have\\n        * @param _token : startfi new utility contract\\n     */\\nfunction _changeUtiltiyToken(address _token) internal {\\n      _paymentToken=_token;  \\n     }\\n/**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  the formula is (fees * 1000)/base \\n    * @param newFees  the new fees value to be stored \\n    * @param newBase  the new basefees value to be stored \\n    * @return percentage the value of the state variable `_feeFraction`\\n*/\\nfunction _changeBidPenaltyPercentage(uint256 newFees, uint256 newBase) internal returns (uint256 percentage) {\\n            require(newFees <= newBase, \\\"Fee fraction exceeded base.\\\");\\n            percentage = (newFees. mul( 1000)) .div( newBase);\\n            require(percentage <= 40 && percentage < 10, \\\"Percentage should be from 1-4 %\\\");\\n\\n            bidPenaltyPercentage =newFees;\\n            bidPenaltyPercentageBase =newBase;\\n        }\\n/**\\n    * @notice  all conditions and checks are made prior to this function\\n    * @dev  the formula is (fees * 1000)/base \\n    * @param newFees  the new fees value to be stored \\n    * @param newBase  the new basefees value to be stored \\n    * @return percentage the value of the state variable `_feeFraction`\\n    */\\n\\nfunction _changeDelistFeesPerentage(uint256 newFees, uint256 newBase) internal returns (uint256 percentage) {\\n            require(newFees <= newBase, \\\"Fee fraction exceeded base.\\\");\\n            percentage = (newFees. mul( 1000)) .div( newBase);\\n            require(percentage <= 40 && percentage < 10, \\\"Percentage should be from 1-4 %\\\");\\n\\n            delistFeesPercentage =newFees;\\n            delistFeesPercentageBase =newBase;\\n        }\\n  /**\\n        * @notice  all conditions and checks are made prior to this function\\n        * @dev  the formula is (fees * 1000)/base \\n        * @param newFees  the new fees value to be stored \\n        * @param newBase  the new basefees value to be stored \\n        * @return percentage the value of the state variable `_feeFraction`\\n     */\\nfunction _changeListqualifyAmount(uint256 newFees, uint256 newBase) internal returns (uint256 percentage) {\\n            require(newFees <= newBase, \\\"Fee fraction exceeded base.\\\");\\n            percentage = (newFees. mul( 1000)) .div( newBase);\\n            require(percentage <= 40 && percentage < 10, \\\"Percentage should be from 1-4 %\\\");\\n\\n            listqualifyPercentage =newFees;\\n            listqualifyPercentageBase =newBase;\\n        }\\n\\n} \",\"keccak256\":\"0xa18606f876ce651a3a8160acabda1302219b84350881df4a2fd1a93c1bcb2168\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IERC721Royalty {\\n function royaltyInfo(uint256 _tokenId, uint256 _value) external view returns (address issuer, uint256 _royaltyAmount) ;  \\n}\",\"keccak256\":\"0x8ce52008cb269ca93b527e46f9e6250c018feda6b083276e2ffc806dc72ce23a\",\"license\":\"MIT\"},\"contracts/interface/IStartFiStakes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface IStartFiStakes {\\n function getReserves(address owner) external view returns ( uint256) ;\\n function deduct(address finePayer, address to, uint256 amount) external returns (bool);  \\n}\",\"keccak256\":\"0xc78a6ce22ecb3460e2f25c5402cad95f4bba6896cb87b3be5a9938abdb8c54bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063649ee683116100de5780638da5cb5b11610097578063e123ff5811610071578063e123ff581461032a578063e1a1d7ed1461033d578063f2fde38b14610361578063ff90ec06146103745761018e565b80638da5cb5b146102fa5780638ef291e914610302578063d4ef929a146103175761018e565b8063649ee683146102a55780636b041547146102ad5780636bb59816146102b5578063715018a6146102bd57806375b4a5e8146102c75780637b356561146102cf5761018e565b80634b3ee2bb1161014b5780635bbd49f4116101255780635bbd49f4146102625780635c975abb146102755780635cc310ba1461028a5780635ebd63cc146102925761018e565b80634b3ee2bb1461021457806356461e8e1461023957806356e9d1f3146102415761018e565b80630a42e75a1461019357806311a1933c146101b1578063150b7a02146101b95780631a186227146101d95780631f78fd0b146101ee57806329c5cdf314610201575b600080fd5b61019b610387565b6040516101a89190612b20565b60405180910390f35b61019b61038d565b6101cc6101c7366004612739565b610393565b6040516101a89190612d7d565b6101e16103a3565b6040516101a89190612a14565b61019b6101fc366004612701565b6103b2565b61019b61020f366004612836565b6103d1565b6102276102223660046128ed565b6105e4565b6040516101a896959493929190612b94565b61019b61063e565b61025461024f3660046128ed565b610644565b6040516101a8929190612a66565b61019b61027036600461286a565b610889565b61027d610a17565b6040516101a89190612b15565b61019b610a27565b61019b6102a0366004612934565b610a2d565b61019b610d14565b61019b610d1a565b61019b610d20565b6102c5611107565b005b61019b611152565b6102e26102dd3660046128ed565b611158565b6040516101a89c9b9a99989796959493929190612aa5565b6101e16111fc565b61030a61120b565b6040516101a89190612d92565b6102546103253660046128ed565b61129d565b6102546103383660046128ed565b61158d565b61035061034b366004612905565b6117bc565b6040516101a8959493929190612c5f565b6102c561036f366004612701565b611804565b610254610382366004612970565b611875565b60015481565b60075490565b630a85bd0160e11b949350505050565b6011546001600160a01b031681565b6001600160a01b0381166000908152600f60205260409020545b919050565b600081600081116103fd5760405162461bcd60e51b81526004016103f49061337e565b60405180910390fd5b600061040b42600154611b50565b90508585610417611b63565b8360405160200161042b94939291906129a9565b604051602081830303815290604052805190602001209250600061044e85611b67565b90508061046161045c611b63565b611b90565b101561047f5760405162461bcd60e51b81526004016103f490613112565b6104898787611c30565b6104a55760405162461bcd60e51b81526004016103f49061332d565b6104b887876104b2611b63565b30611cc6565b6104d45760405162461bcd60e51b81526004016103f4906133b5565b6104e76104df611b63565b826001611d36565b506000601060006104f6611b63565b6001600160a01b03168152602080820192909252604001600090812080546001810182558183529282209092018790559091508190601090610536611b63565b6001600160a01b031681526020810191909152604001600020815461055b9290612682565b506105718589610569611b63565b8a8a88611dac565b61058d5760405162461bcd60e51b81526004016103f490612e9b565b7f4273eae081fe1625584d9ab2b9e558adb9b60b846999d5b07de6e4664464767c85896105b8611b63565b8a8a8888426040516105d1989796959493929190612c1d565b60405180910390a1505050509392505050565b6000908152600460208181526040808420805460019182015460038086528488206001600160a01b03928316808a529652939096209182015460028301549383015492909501549096939594909416939192909160ff1690565b600e5481565b600081815260026020819052604090912060098101546005820154600483015483546006850154958501546001909501546001600160a01b0391821696909560ff9095169493821693929091169161069a611b63565b6001600160a01b0316846001600160a01b0316146106ca5760405162461bcd60e51b81526004016103f490612e64565b6001600160a01b038316156106f15760405162461bcd60e51b81526004016103f490612fd1565b6000610700836203f480611b50565b90504281111580156107315750600286600381111561072f57634e487b7160e01b600052602160045260246000fd5b145b8061075b5750600186600381111561075957634e487b7160e01b600052602160045260246000fd5b145b6107775760405162461bcd60e51b81526004016103f490613411565b600080428510156107c35761078b84611f6d565b90925090506107a28761079c611fa1565b84611fb0565b6107be5760405162461bcd60e51b81526004016103f490613223565b6107cf565b6107cc84611b67565b90505b6107db8a8a308a611cc6565b6107f75760405162461bcd60e51b81526004016103f4906133b5565b600061080c610804611b63565b836000611d36565b101561082a5760405162461bcd60e51b81526004016103f4906130db565b6108378b6000600361203f565b7f55058811c463cd1d9f3952e51fdb7eb2760b904e998811cb7485a7f33a1ff4af8b8b898c86868b42604051610874989796959493929190612c1d565b60405180910390a15050505050505050915091565b600085600081116108ac5760405162461bcd60e51b81526004016103f49061337e565b61a8c083116108cd5760405162461bcd60e51b81526004016103f4906132e0565b60006108d94285611b50565b905089896108e5611b63565b836040516020016108f994939291906129a9565b604051602081830303815290604052805190602001209250851561093757600085116109375760405162461bcd60e51b81526004016103f4906131ec565b6109418a8a611c30565b61095d5760405162461bcd60e51b81526004016103f49061332d565b61096a8a8a6104b2611b63565b6109865760405162461bcd60e51b81526004016103f4906133b5565b61099e838b610993611b63565b8c8c8b8b888f6120bf565b6109ba5760405162461bcd60e51b81526004016103f490612e9b565b7fd7f1b8f328c218ec2774158bb7329aaa002cda2cb72482f7927b5c1991697f1b838b6109e5611b63565b8c8c8b8b888f42604051610a029a99989796959493929190612bca565b60405180910390a15050979650505050505050565b600054600160a01b900460ff1690565b600d5481565b600084815260026020526040812060060154859042108015610a835750600260008281526002602052604090206009015460ff166003811115610a8057634e487b7160e01b600052602160045260246000fd5b14155b610a9f5760405162461bcd60e51b81526004016103f49061346e565b8585610aa9611b63565b86604051602001610abd94939291906129e2565b60408051601f19818403018152918152815160209283012060008981526004845282812060010154600290945291909120600701549093506001600160a01b039091169081610b3d5760008881526002602081905260409091200154851015610b385760405162461bcd60e51b81526004016103f490612f7b565b610b80565b60008881526003602081815260408084206001600160a01b038716855290915290912001548511610b805760405162461bcd60e51b81526004016103f490612de5565b600088815260036020526040812081610b97611b63565b6001600160a01b03168152602081019190915260400160002060030154905080610c8d5781610bc761045c611b63565b1015610be55760405162461bcd60e51b81526004016103f490613112565b600060106000610bf3611b63565b6001600160a01b03168152602080820192909252604001600090812080546001810182558183529282209092018c90559091508190601090610c33611b63565b6001600160a01b0316815260208101919091526040016000208154610c589290612682565b506000610c6e610c66611b63565b856001611d36565b11610c8b5760405162461bcd60e51b81526004016103f490612e2d565b505b610ca2858a8a610c9b611b63565b8b8b612280565b610cbe5760405162461bcd60e51b81526004016103f4906132ba565b7f2d4cfcefc09a529d21dfffe1fc49a95663a8e6ee7aa367506e419a6d43788285858a8a610cea611b63565b8b8b42604051610d009796959493929190612d41565b60405180910390a150505050949350505050565b600b5481565b600a5481565b600080600f6000610d2f611b63565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050600060106000610d60611b63565b6001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610dca57602002820191906000526020600020905b815481526020019060010190808311610db6575b5050505050905060106000610ddd611b63565b6001600160a01b03166001600160a01b031681526020019081526020016000206000610e0991906126d2565b600060106000610e17611b63565b6001600160a01b03166001600160a01b03168152602001908152602001600020905060005b825181101561105c576002806000858481518110610e6a57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000206009015460ff166003811115610eaa57634e487b7160e01b600052602160045260246000fd5b1415610f435781838281518110610ed157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452918320909101558351610f3c91879160029190879086908110610f1d57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060070154611b50565b945061104a565b600160026000858481518110610f6957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000206009015460ff166003811115610fa957634e487b7160e01b600052602160045260246000fd5b141561104a5781838281518110610fd057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600181018455600093845291832090910155835161103a90600290839087908690811061101b57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060020154611b67565b90506110468682611b50565b9550505b806110548161354f565b915050610e3c565b50806010600061106a611b63565b6001600160a01b031681526020810191909152604001600020815461108f9290612682565b506110a161109b611b63565b85612348565b6110bd5760405162461bcd60e51b81526004016103f4906130b0565b7f0d0e56539d6f587bb6a3924f7dee452834a223586e9bb60d3827f4006cb0655d6110e6611b63565b8486426040516110f99493929190612a7f565b60405180910390a150505090565b61110f611b63565b6001600160a01b03166111206111fc565b6001600160a01b0316146111465760405162461bcd60e51b81526004016103f490613285565b6111506000612368565b565b600c5481565b600081815260026020819052604082208054600182015492820154600380840154600485015460058601546006870154600788015460088901546009909901546001600160a01b039889169b97999598948516979484169660ff600160a01b8604811697600160a81b909604811696949593949216908111156111eb57634e487b7160e01b600052602160045260246000fd5b905091939597999b5091939597999b565b6000546001600160a01b031690565b60606005805461121a90613514565b80601f016020809104026020016040519081016040528092919081815260200182805461124690613514565b80156112935780601f1061126857610100808354040283529160200191611293565b820191906000526020600020905b81548152906001019060200180831161127657829003601f168201915b5050505050905090565b60008181526002602052604081206006015481908390421180156112f55750600260008281526002602052604090206009015460ff1660038111156112f257634e487b7160e01b600052602160045260246000fd5b14155b6113115760405162461bcd60e51b81526004016103f49061346e565b6000848152600460209081526040808320600190810154600290935292206005810154815491909301546001600160a01b03918216965094509081169116611357611b63565b6001600160a01b0316826001600160a01b0316146113875760405162461bcd60e51b81526004016103f4906131b5565b60008681526003602081815260408084206001600160a01b03871685529091529091200154806113b6846123b8565b10156113d45760405162461bcd60e51b81526004016103f490612f11565b6000806000806113e58a8a87612443565b93509350935093506113ff6113f86111fc565b87846124b0565b61141b5760405162461bcd60e51b81526004016103f490613437565b6001600160a01b03841615611451576114358487856124b0565b6114515760405162461bcd60e51b81526004016103f49061313f565b61145c8787836124b0565b6114785760405162461bcd60e51b81526004016103f490613180565b6114848a8a308a611cc6565b6114a05760405162461bcd60e51b81526004016103f4906133b5565b60008b8152600260205260408120600701546114be90899083611d36565b10156114dc5760405162461bcd60e51b81526004016103f4906130db565b60008b81526003602052604081206001916114f5611b63565b6001600160a01b03166001600160a01b0316815260200190815260200160002060040160006101000a81548160ff02191690831515021790555061153b8b88600061203f565b60008b815260046020526040908190205490517fe70f4aad9f39db984a04bce8b0cd7a269c046c57fd6878c9dbf2f6af19a47ecd91610874918e908e908c908f908c908c908c908c908c904290612ce2565b60008181526004602090815260408083206001908101546002909352908320600581015481549282015460078301546006909301546001600160a01b0394851696919585169490921692916115e5906203f480611b50565b90506001600160a01b038416158015906115ff5750428110155b61161b5760405162461bcd60e51b81526004016103f49061304c565b611623611b63565b6001600160a01b0316836001600160a01b0316146116535760405162461bcd60e51b81526004016103f490612e64565b60008781526003602090815260408083206001600160a01b038816845290915290206004015460ff16156116995760405162461bcd60e51b81526004016103f49061325a565b6000806116a5846124ed565b915091506116b58661079c611fa1565b6116d15760405162461bcd60e51b81526004016103f490612fff565b6116dc868683611fb0565b6116f85760405162461bcd60e51b81526004016103f490612fff565b61170488883088611cc6565b6117205760405162461bcd60e51b81526004016103f4906133b5565b600061172e87866000611d36565b101561174c5760405162461bcd60e51b81526004016103f4906130db565b611759896000600361203f565b600089815260046020526040908190205490517fb46a91724b95c8764d64242653194717e2ab549e1b76e207124d3bddc39aed6d916117a9918c908c908b908d908c908c908a908c904290612c8d565b60405180910390a1505050505050915091565b60009182526003602081815260408085206001600160a01b0394851686529091529092208054600182015460028301549483015460049093015491959316939260ff90911690565b61180c611b63565b6001600160a01b031661181d6111fc565b6001600160a01b0316146118435760405162461bcd60e51b81526004016103f490613285565b6001600160a01b0381166118695760405162461bcd60e51b81526004016103f490612ecb565b61187281612368565b50565b600082815260026020819052604090912060058101548154600183015492909301546001600160a01b039384169360ff600160a81b8404169216908510156118cf5760405162461bcd60e51b81526004016103f4906133ea565b600160008781526002602052604090206009015460ff16600381111561190557634e487b7160e01b600052602160045260246000fd5b148061196d5750600260008781526002602052604090206009015460ff16600381111561194257634e487b7160e01b600052602160045260246000fd5b14801561195157506001821515145b801561196d575060008681526002602052604090206006015442105b6119895760405162461bcd60e51b81526004016103f490613081565b8461199a611995611b63565b6123b8565b10156119b85760405162461bcd60e51b81526004016103f490612f11565b6000806000806119c988888b612443565b93509350935093506119e36119dc6111fc565b86846124b0565b6119ff5760405162461bcd60e51b81526004016103f490613437565b6001600160a01b03841615611a3557611a198486856124b0565b611a355760405162461bcd60e51b81526004016103f49061313f565b611a47611a40611b63565b86836124b0565b611a635760405162461bcd60e51b81526004016103f490613180565b611a76888830611a71611b63565b611cc6565b611a925760405162461bcd60e51b81526004016103f4906133b5565b60008a815260026020819052604082200154611aad90611b67565b90506000611abd87836000611d36565b1015611adb5760405162461bcd60e51b81526004016103f4906130db565b611aee8b611ae7611b63565b600061203f565b7ff18fd7f8585dc258636a453d4a87ee3dd6edda50c1f438348bddf640ca6fbbec8b8a888b8e611b1c611b63565b8d8c8c8c8c42604051611b3a9c9b9a99989796959493929190612b29565b60405180910390a1505050505050509250929050565b6000611b5c8383612517565b9392505050565b3390565b6000611b8a600e54611b84600b548561252390919063ffffffff16565b9061252f565b92915050565b6001600160a01b038082166000908152600f6020526040808220546011549151630fa6707960e21b815292939092611b5c9284921690633e99c1e490611bda908890600401612a14565b60206040518083038186803b158015611bf257600080fd5b505afa158015611c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2a9190612991565b9061253b565b60405163020604bf60e21b81526000906001600160a01b0384169063081812fc90611c5f908590600401612b20565b60206040518083038186803b158015611c7757600080fd5b505afa925050508015611ca7575060408051601f3d908101601f19168201909252611ca49181019061271d565b60015b611cb357506000611b8a565b6001600160a01b03163014905092915050565b604051632142170760e11b81526000906001600160a01b038616906342842e0e90611cf990869086908990600401612a42565b600060405180830381600087803b158015611d1357600080fd5b505af1158015611d27573d6000803e3d6000fd5b50600198975050505050505050565b600081611d65576001600160a01b0384166000908152600f6020526040902054611d60908461253b565b611d88565b6001600160a01b0384166000908152600f6020526040902054611d889084612517565b6001600160a01b0385166000908152600f6020526040902081905590509392505050565b6000604051806101800160405280876001600160a01b0316815260200185815260200184815260200160008152602001866001600160a01b0316815260200160006001600160a01b03168152602001600015158152602001600015158152602001838152602001600081526020016000815260200160016003811115611e4257634e487b7160e01b600052602160045260246000fd5b9052600088815260026020818152604092839020845181546001600160a01b039182166001600160a01b03199182161783559286015160018084019190915594860151938201939093556060850151600380830191909155608086015160048301805491861691851691909117905560a086015160058301805460c089015160e08a01511515600160a81b0260ff60a81b19911515600160a01b0260ff60a01b199590991692909716919091179290921695909517169290921790925561010084015160068301556101208401516007830155610140840151600883015561016084015160098301805493949193909260ff1990911691908490811115611f5957634e487b7160e01b600052602160045260246000fd5b021790555060019998505050505050505050565b600080611f8b600d54611b84600a548661252390919063ffffffff16565b9150611f9a82611c2a85611b67565b9050915091565b6000611fab6111fc565b905090565b60115460405163929c517960e01b81526000916001600160a01b03169063929c517990611fe590879087908790600401612a42565b602060405180830381600087803b158015611fff57600080fd5b505af1158015612013573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203791906128d1565b949350505050565b6000838152600260205260409020600901805482919060ff1916600183600381111561207b57634e487b7160e01b600052602160045260246000fd5b02179055506001600160a01b038216156120ba57600083815260026020526040902060050180546001600160a01b0319166001600160a01b0384161790555b505050565b60006040518061018001604052808a6001600160a01b0316815260200188815260200187815260200160008152602001896001600160a01b0316815260200160006001600160a01b0316815260200160011515815260200186151581526020018481526020018381526020018581526020016002600381111561215257634e487b7160e01b600052602160045260246000fd5b905260008b815260026020818152604092839020845181546001600160a01b039182166001600160a01b03199182161783559286015160018084019190915594860151938201939093556060850151600380830191909155608086015160048301805491861691851691909117905560a086015160058301805460c089015160e08a01511515600160a81b0260ff60a81b19911515600160a01b0260ff60a01b199590991692909716919091179290921695909517169290921790925561010084015160068301556101208401516007830155610140840151600883015561016084015160098301805493949193909260ff199091169190849081111561226957634e487b7160e01b600052602160045260246000fd5b021790555060019c9b505050505050505050505050565b6040805180820182528781526001600160a01b03948516602080830182815260008a8152600480845286822095518655915160019586018054918b166001600160a01b0319928316179055865160a0810188529c8d529989168c84019081528c870198895260608d0197885260808d018281529b82526003808552878320958352949093529490942099518a555189830180549190971697169690961790945591516002870155519285019290925591519201805492151560ff199093169290921790915590565b6001600160a01b03919091166000908152600f6020526040902055600190565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600654604051636eb1769f60e11b815260009164010000000090046001600160a01b03169063dd62ed3e906123f39085903090600401612a28565b60206040518083038186803b15801561240b57600080fd5b505afa15801561241f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8a9190612991565b60008060008061245285612547565b915061245e858361253b565b905061246987612564565b156124a7576124798787876125f6565b9094509250821580159061249557506001600160a01b03841615155b156124a7576124a4818461253b565b90505b93509350935093565b6006546040516323b872dd60e01b815260009164010000000090046001600160a01b0316906323b872dd90611fe590879087908790600401612a42565b60008061250b600c54611b846009548661252390919063ffffffff16565b9150611f9a838361253b565b6000611b5c82846134a6565b6000611b5c82846134de565b6000611b5c82846134be565b6000611b5c82846134fd565b6000611b8a600854611b846007548561252390919063ffffffff16565b6006546040516301ffc9a760e01b81526000916001600160a01b038416916301ffc9a79161259b9160e09190911b90600401612d7d565b60206040518083038186803b1580156125b357600080fd5b505afa9250505080156125e3575060408051601f3d908101601f191682019092526125e0918101906128d1565b60015b6125ef575060006103cc565b90506103cc565b600080846001600160a01b0316632a55205a85856040518363ffffffff1660e01b8152600401612627929190613498565b604080518083038186803b15801561263e57600080fd5b505afa158015612652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126769190612809565b90969095509350505050565b8280548282559060005260206000209081019282156126c25760005260206000209182015b828111156126c25782548255916001019190600101906126a7565b506126ce9291506126ec565b5090565b508054600082559060005260206000209081019061187291905b5b808211156126ce57600081556001016126ed565b600060208284031215612712578081fd5b8135611b5c81613596565b60006020828403121561272e578081fd5b8151611b5c81613596565b6000806000806080858703121561274e578283fd5b843561275981613596565b935060208581013561276a81613596565b935060408601359250606086013567ffffffffffffffff8082111561278d578384fd5b818801915088601f8301126127a0578384fd5b8135818111156127b2576127b2613580565b604051601f8201601f19168101850183811182821017156127d5576127d5613580565b60405281815283820185018b10156127eb578586fd5b81858501868301379081019093019390935250939692955090935050565b6000806040838503121561281b578182fd5b825161282681613596565b6020939093015192949293505050565b60008060006060848603121561284a578283fd5b833561285581613596565b95602085013595506040909401359392505050565b600080600080600080600060e0888a031215612884578283fd5b873561288f81613596565b965060208801359550604088013594506060880135935060808801356128b4816135ab565b9699959850939692959460a0840135945060c09093013592915050565b6000602082840312156128e2578081fd5b8151611b5c816135ab565b6000602082840312156128fe578081fd5b5035919050565b60008060408385031215612917578182fd5b82359150602083013561292981613596565b809150509250929050565b60008060008060808587031215612949578384fd5b84359350602085013561295b81613596565b93969395505050506040820135916060013590565b60008060408385031215612982578182fd5b50508035926020909101359150565b6000602082840312156129a2578081fd5b5051919050565b6bffffffffffffffffffffffff19606095861b8116825260148201949094529190931b9091166034820152604881019190915260680190565b9384526bffffffffffffffffffffffff19606093841b811660208601529190921b166034830152604882015260680190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6001600160a01b039c8d168152602081019b909b5260408b019990995260608a019790975294891660808901529290971660a0870152151560c086015294151560e08501526101008401949094526101208301939093526101408201929092526101608101919091526101800190565b901515815260200190565b90815260200190565b9b8c526001600160a01b039a8b1660208d0152988a1660408c015260608b019790975260808a019590955292871660a089015290151560c088015290941660e08601526101008501939093526101208401929092526101408301919091526101608201526101800190565b9586526001600160a01b03948516602087015292909316604085015260608401526080830191909152151560a082015260c00190565b998a526001600160a01b0398891660208b015296909716604089015260608801949094526080870192909252151560a086015260c085015260e08401526101008301919091526101208201526101400190565b9788526001600160a01b0396871660208901529490951660408701526060860192909252608085015260a084015260c083019190915260e08201526101000190565b9485526001600160a01b03939093166020850152604084019190915260608301521515608082015260a00190565b998a5260208a01989098526001600160a01b0396871660408a015294861660608901526080880193909352931660a086015260c085019290925260e08401919091526101008301526101208201526101400190565b9a8b5260208b01999099526001600160a01b0397881660408b015295871660608a0152608089019490945260a088019290925290931660c086015260e08501929092526101008401919091526101208301526101408201526101600190565b96875260208701959095526001600160a01b039384166040870152919092166060850152608084019190915260a083015260c082015260e00190565b6001600160e01b031991909116815260200190565b6000602080835283518082850152825b81811015612dbe57858101830151858201604001528201612da2565b81811115612dcf5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526028908201527f626964207072696365206d757374206265206d6f7265207468616e20746865206040820152671b185cdd08189a5960c21b606082015260800190565b6020808252601b908201527f52657365727665205a65726f206973206e6f7420616c6c6f7765640000000000604082015260600190565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b602080825260169082015275436f756c646e2774206c69737420746865206974656d60501b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526044908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20776960408201527f7468647261772074686520726571756972656420616d6f756e74206f6620746f6060820152636b656e7360e01b608082015260a00190565b60208082526036908201527f626964207072696365206d757374206265206d6f7265207468616e206f7220656040820152757175616c20746865206d696e696d756d20707269636560501b606082015260800190565b60208082526014908201527320b63932b0b23c903137bab3b43a103a37b5b2b760611b604082015260600190565b6020808252602d908201527f636f756c646e277420646564756374207468652066696e6520666f722074686560408201526c0818591b5a5b881dd85b1b195d609a1b606082015260800190565b6020808252818101527f4e6f2062696473206f72207374696c6c2072756e6e696e672061756374696f6e604082015260600190565b60208082526015908201527402a37b5b2b71034b9b737ba103337b91039b0b6329605d1b604082015260600190565b6020808252601190820152701cd95d081c995cd95c9d994819985a5b19607a1b604082015260600190565b6020808252601f908201527f6e656761746976652072657365727665206973206e6f7420616c6c6f77656400604082015260600190565b6020808252601390820152724e6f7420656e6f75676820726573657276657360681b604082015260600190565b60208082526021908201527f436f756c646e2774207472616e7366657220746f6b656e20746f2069737375656040820152603960f91b606082015260800190565b6020808252818101527f436f756c646e2774207472616e7366657220746f6b656e20746f206275796572604082015260600190565b60208082526018908201527f43616c6c6572206973206e6f74207468652077696e6e65720000000000000000604082015260600190565b60208082526019908201527f5a65726f207072696365206973206e6f7420616c6c6f77656400000000000000604082015260600190565b60208082526018908201527f636f756c646e277420646564756374207468652066696e650000000000000000604082015260600190565b602080825260119082015270105b1c9958591e481c1d5c98da185cd959607a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b10dbdd5b191b89dd08109a5960a21b604082015260600190565b6020808252602d908201527f41756374696f6e2073686f756c64206265206c69766520666f72206d6f72652060408201526c7468616e20313220686f75727360981b606082015260800190565b60208082526031908201527f4d61726b6574706c616365206973206e6f7420616c6c6f77656420746f20747260408201527030b739b332b9103cb7bab9103a37b5b2b760791b606082015260800190565b60208082526019908201527f5a65726f2056616c7565206973206e6f7420616c6c6f77656400000000000000604082015260600190565b6020808252818101527f4e465420746f6b656e20636f756c646e2774206265207472616e736665726564604082015260600190565b6020808252600d908201526c496e76616c696420707269636560981b604082015260600190565b6020808252600c908201526b10d85b89dd0819195b1a5cdd60a21b604082015260600190565b6020808252601f908201527f436f756c646e2774207472616e7366657220746f6b656e206173206665657300604082015260600190565b60208082526010908201526f105d58dd1a5bdb881a5cc8195b99195960821b604082015260600190565b918252602082015260400190565b600082198211156134b9576134b961356a565b500190565b6000826134d957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156134f8576134f861356a565b500290565b60008282101561350f5761350f61356a565b500390565b60028104600182168061352857607f821691505b6020821081141561354957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156135635761356361356a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461187257600080fd5b801515811461187257600080fdfea2646970667358221220e67d953498ba183aa72cd5d52df13b1a03ca310ec672e14298005f28deca95c064736f6c63430008000033",
  "devdoc": {
    "author": "Eman Herawy, StartFi Team",
    "kind": "dev",
    "methods": {
      "bid(bytes32,address,uint256,uint256)": {
        "details": "called by dapps to bid on an auction ",
        "params": {
          "bidPrice": "price ",
          "listingId": "listing id ",
          "tokenAddress": "nft contract address",
          "tokenId": "token id "
        },
        "returns": {
          "bidId": "bid id"
        }
      },
      "buyNow(bytes32,uint256)": {
        "details": "called by buyer through dapps when s/he wants to buy a gevin NFT  token from the marketplace   ",
        "params": {
          "listingId": "listing id ",
          "price": "gevin price"
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id "
        }
      },
      "createAuction(address,uint256,uint256,uint256,bool,uint256,uint256)": {
        "details": "called by dapps to create  new auction ",
        "params": {
          "duration": "when auction ends",
          "listingPrice": "min price ",
          "nFTContract": "nft contract address",
          "qualifyAmount": "amount of token locked as qualify for any bidder wants bid ",
          "sellFor": "price  to sell with if sellForEnabled=true",
          "sellForEnabled": "true if auction enable direct selling",
          "tokenId": "token id "
        },
        "returns": {
          "listId": "listing id"
        }
      },
      "deList(bytes32)": {
        "details": "called by seller through dapps when s/he wants to remove this token from the marketplace   ",
        "params": {
          "listingId": "listing id "
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id "
        }
      },
      "disputeAuction(bytes32)": {
        "details": "called by seller through dapps when his/her auction is  not fullfilled after 3 days",
        "params": {
          "listingId": "listing id "
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id "
        }
      },
      "freeReserves()": {
        "details": "called by user through dapps when his/her wants to free his reserved tokens which are no longer in active auction or listing",
        "returns": {
          "curentReserves": "user reserves after freeing the unused reservd"
        }
      },
      "fullfillBid(bytes32)": {
        "details": "called by bidder through dapps when bidder win an auction and wants to pay to get the NFT  ",
        "params": {
          "listingId": "listing id "
        },
        "returns": {
          "_NFTContract": "nft contract address",
          "tokenId": "token id "
        }
      },
      "getAuctionBidDetails(bytes32,address)": {
        "details": "called by dapp or any contract to get info about a given bidder in a listing    ",
        "params": {
          "bidder": "bidder address",
          "listingId": "listing id      "
        },
        "returns": {
          "bidId": "bid id",
          "bidPrice": "bid price",
          "nFTContract": " nft contract address",
          "tokenId": "nft token id"
        }
      },
      "getListingDetails(bytes32)": {
        "details": "called by dapp or any contract to get info about a gevin listing    ",
        "params": {
          "listingId": "listing id      "
        },
        "returns": {
          "bedEnabeled": "true if auction enabled  ",
          "buyer": " nft buyer address",
          "endPrice": "purchase price",
          "listingPrice": "initial price or minimum price that the seller can accept",
          "qualifyAmount": " amount of token locked as qualify for any bidder wants bid ",
          "releaseTime": " when auction ends",
          "sellFor": "if sell for enabled for auction, this should be more than zero",
          "sellForEnabled": "true if auction enable direct selling",
          "seller": " nft seller address",
          "status": "in number {Sold,OnMarket, onAuction,Canceled}",
          "tokenAddress": " nft contract address",
          "tokenId": "NFT token Id "
        }
      },
      "getServiceFee()": {
        "returns": {
          "_0": "the value of the state variable `_feeFraction`"
        }
      },
      "getUserReserved(address)": {
        "params": {
          "user": ": participant address"
        },
        "returns": {
          "_0": "the value of user reserves"
        }
      },
      "listOnMarketplace(address,uint256,uint256)": {
        "details": "called by dapps to list new item ",
        "params": {
          "listingPrice": "min price ",
          "nFTContract": "nft contract address",
          "tokenId": "token id "
        },
        "returns": {
          "listId": "listing id"
        }
      },
      "marketPlaceName()": {
        "returns": {
          "_0": "market place name"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "winnerBid(bytes32)": {
        "details": "called by dapp or any contract to get info about a winner bid    ",
        "params": {
          "listingId": "listing id      "
        },
        "returns": {
          "bidId": "bid id",
          "bidPrice": "bid price",
          "bidder": "bidder address",
          "isPurchased": "true if purchased",
          "nFTContract": " nft contract address",
          "tokenId": "nft token id"
        }
      }
    },
    "title": "StartFi MarketPlace desc  marketplace with all functions for item selling by either ceating auction or selling with fixed prices, the contract auto transfer orginal NFT issuer's shares    ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyNow(bytes32,uint256)": {
        "notice": "if auction, the seller must enabe forSale. prices should be more than or equal the listing price"
      },
      "deList(bytes32)": {
        "notice": "auction can't be canceled , if seller delist time on sale on maretplace before time to delist, he will pay a fine"
      },
      "disputeAuction(bytes32)": {
        "notice": "after auction with winner bid . bidder didn't call fullfile within 3 days of auction closing  auction owner can call dispute to delist and punish the spam winner bidder fine is share between the plateform and the auction owner"
      },
      "freeReserves()": {
        "notice": "this function is greedy, called by user only when s/he wants rather than force the check & updates with every transaction which might be very costly ."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 679,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5203,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "delistAfter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5243,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_tokenListings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Listing)5233_storage)"
      },
      {
        "astId": 5011,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listingBids",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Bid)4999_storage))"
      },
      {
        "astId": 5016,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidToListing",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(WinningBid)5004_storage)"
      },
      {
        "astId": 4796,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_marketPlaceName",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4799,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "RORALTY_INTERFACE",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes4"
      },
      {
        "astId": 7325,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_paymentToken",
        "offset": 4,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7328,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_feeFraction",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7331,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "_feeBase",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7334,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidPenaltyPercentage",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7337,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "delistFeesPercentage",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7340,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listqualifyPercentage",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7343,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "bidPenaltyPercentageBase",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7346,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "delistFeesPercentageBase",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7349,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "listqualifyPercentageBase",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 7353,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "userReserves",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7358,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "userListing",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 7360,
        "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
        "label": "stakeContract",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(ListingStatus)5238": {
        "encoding": "inplace",
        "label": "enum MarketPlaceListing.ListingStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Bid)4999_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MarketPlaceBid.Bid)",
        "numberOfBytes": "32",
        "value": "t_struct(Bid)4999_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Bid)4999_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct MarketPlaceBid.Bid))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Bid)4999_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Listing)5233_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlaceListing.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)5233_storage"
      },
      "t_mapping(t_bytes32,t_struct(WinningBid)5004_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlaceBid.WinningBid)",
        "numberOfBytes": "32",
        "value": "t_struct(WinningBid)5004_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bid)4999_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceBid.Bid",
        "members": [
          {
            "astId": 4990,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4992,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "nFTContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4994,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4996,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4998,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "isPurchased",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Listing)5233_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceListing.Listing",
        "members": [
          {
            "astId": 5209,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "nFTContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5211,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5213,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "listingPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5215,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "endPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5217,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "seller",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5219,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "buyer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5221,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bedEnabeled",
            "offset": 20,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 5223,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "sellForEnabled",
            "offset": 21,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 5225,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "releaseTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5227,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "qualifyAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5229,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "sellFor",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5232,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_enum(ListingStatus)5238"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(WinningBid)5004_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlaceBid.WinningBid",
        "members": [
          {
            "astId": 5001,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5003,
            "contract": "contracts/StartFiMarketPlace.sol:StartFiMarketPlace",
            "label": "bidder",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}