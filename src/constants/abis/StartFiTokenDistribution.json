{
  "address": "0x82Ac2158212C70Be63B3FCD1Dd27fAA1af36C861",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TGEDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBeneficiaryPoolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountAllocated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sent",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficary",
          "type": "address"
        }
      ],
      "name": "getBeneficiaryPoolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "arrayLneght",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "safeGuardAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerTokenSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe96243af9346b27e708d8978d20df31d781f3278b0b61db2e8123122572d8366",
  "receipt": {
    "to": null,
    "from": "0x0F827B556771a6711dFC7d5DD342a744688a9CDb",
    "contractAddress": "0x82Ac2158212C70Be63B3FCD1Dd27fAA1af36C861",
    "transactionIndex": 0,
    "gasUsed": "5358662",
    "logsBloom": "0x
    "blockHash": "0x81b56a5150137c3664ffee9ae7da930688b1c25b64ed38427359bb1c0e8d8646",
    "transactionHash": "0xe96243af9346b27e708d8978d20df31d781f3278b0b61db2e8123122572d8366",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17854842,
        "transactionHash": "0xe96243af9346b27e708d8978d20df31d781f3278b0b61db2e8123122572d8366",
        "address": "0x82Ac2158212C70Be63B3FCD1Dd27fAA1af36C861",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f827b556771a6711dfc7d5dd342a744688a9cdb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x81b56a5150137c3664ffee9ae7da930688b1c25b64ed38427359bb1c0e8d8646"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17854842,
        "transactionHash": "0xe96243af9346b27e708d8978d20df31d781f3278b0b61db2e8123122572d8366",
        "address": "0x82Ac2158212C70Be63B3FCD1Dd27fAA1af36C861",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000f827b556771a6711dfc7d5dd342a744688a9cdb",
          "0x000000000000000000000000392e861c447929cc01e309b41f0ca43bbfc33d7d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x81b56a5150137c3664ffee9ae7da930688b1c25b64ed38427359bb1c0e8d8646"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 17854842,
        "transactionHash": "0xe96243af9346b27e708d8978d20df31d781f3278b0b61db2e8123122572d8366",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000f827b556771a6711dfc7d5dd342a744688a9cdb",
          "0x000000000000000000000000e4b8e9222704401ad16d4d826732953daf07c7e2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000008ec88f6b5c4200000000000000000000000000000000000000000000000000031fb6517d250b00000000000000000000000000000000000000000000000000ba4afa5d24dd7b538000000000000000000000000000000000000000000000000290edc211c8c900000000000000000000000000000000000000000000000000bad9c2ec9039bd538",
        "logIndex": 2,
        "blockHash": "0x81b56a5150137c3664ffee9ae7da930688b1c25b64ed38427359bb1c0e8d8646"
      }
    ],
    "blockNumber": 17854842,
    "cumulativeGasUsed": "5358662",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD9cd8c0D18cD7e06958F3055e0Ec3ADbdba0B17",
    1629077453,
    "0x392e861c447929Cc01e309B41f0CA43BBFC33D7D"
  ],
  "solcInputHash": "c43ab73aedbd503dda171840950295d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TGEDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBeneficiaryPoolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAllocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficary\",\"type\":\"address\"}],\"name\":\"getBeneficiaryPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"arrayLneght\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"safeGuardAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTokenSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eman Herawy, StartFi Team\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses contract. Requirements: - the caller must be the owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses contract. Requirements: - the caller must be the owner.\"}},\"title\":\"StartFiTokenDistribution\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"triggerTokenSend()\":{\"notice\":\"Should allow any address to trigger it, but since the calls are atomic it should do only once per day\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StartFiTokenDistribution.sol\":\"StartFiTokenDistribution\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xa909b5568d2d26a6616c4b360ef714aab7f32eeb15c8a487071d1801b83319cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xd142fc8fd9e34b60fe01f1f2c310fa2e8a45bb4a2c022685a36f8b0ecb8594ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xfd194b8a830fc6e49f0debfb816fe3d955e16e11dd01fd4d3f7b73d1c500750d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6ccfa9bfe7d858830b660bd5f9d51252bec003f93b58f269ba3046b58ad458b0\",\"license\":\"MIT\"},\"contracts/StartFiTokenDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\nimport './interface/IERC20.sol';\\n\\n/**\\n * @author Eman Herawy, StartFi Team\\n *@title StartFiTokenDistribution\\n *\\n */\\ncontract StartFiTokenDistribution is Ownable, Pausable, ReentrancyGuard {\\n    /******************************************* decalrations go here ********************************************************* */\\n\\n    address[8] public tokenOwners = [\\n        0xAA4e7Ab6dccc1b673036B6FF78fe8af3402801c6,\\n        0x438A078871C6e24663381CDcC7E85C42a0BD5a92,\\n        0x0140d69F99531C10Da3094b5E5Ca758FA0F31579,\\n        0x5deBAB9052E18f9E54eCECdD93Ee713d0ED64CBd,\\n        0x907CB9388f6C78D1179b82A2F6Cc2aB4Ef1534E7,\\n        0xcDC0b435861d452a0165dD939a8a31932055B08B,\\n        0x492eC1E39724Dfc7F4d2b42083BCeb339eBaf18f,\\n        0x801b877ECD8ef397F8560CbFAABd1C910BC8230E\\n    ]; /* Tracks distributions mapping (iterable) */\\n    uint256 public TGEDate = 0; /* Date From where the distribution starts (TGE) */\\n\\n    mapping(address => DistributionStep[]) private _distributions; /* Distribution object */\\n\\n    address public erc20;\\n\\n    struct DistributionStep {\\n        uint256 amountAllocated;\\n        uint256 unlockTime;\\n        bool sent;\\n    }\\n\\n    // events\\n\\n    /******************************************* constructor goes here ********************************************************* */\\n\\n    constructor(\\n        address _erc20,\\n        uint256 _time,\\n        address _owner\\n    ) {\\n        require(_erc20 != address(0) && _owner != address(0), 'Zero addresses are not allowed');\\n\\n        erc20 = _erc20;\\n        TGEDate = _time < block.timestamp ? block.timestamp : _time;\\n        transferOwnership(_owner);\\n        uint256 month = 30 days;\\n        uint256 year = 365 days;\\n\\n        address seedAccount = tokenOwners[0];\\n        address privateSaleAccount = tokenOwners[1];\\n        address treasuryFundAccount = tokenOwners[2];\\n        address liquidityAccount = tokenOwners[3];\\n        address communityPartnerAccount = tokenOwners[4];\\n        address rewardAccount = tokenOwners[5];\\n        address teamAccount = tokenOwners[6];\\n        address advisorAccount = tokenOwners[7];\\n\\n        /* Seed */\\n\\n        _setInitialDistribution(\\n            seedAccount,\\n            1500000,\\n            0 /* No Lock */\\n        );\\n        _setInitialDistribution(seedAccount, 850000, 3 * month); /* After 3 Month */\\n        _setInitialDistribution(seedAccount, 850000, 4 * month); /* After 4 Months */\\n        _setInitialDistribution(seedAccount, 850000, 5 * month); /* After 5 Months */\\n        _setInitialDistribution(seedAccount, 850000, 6 * month); /* After 6 Months */\\n        _setInitialDistribution(seedAccount, 850000, 7 * month); /* After 7 Months */\\n        _setInitialDistribution(seedAccount, 850000, 8 * month); /* After 8 Months */\\n        _setInitialDistribution(seedAccount, 850000, 9 * month); /* After 9 Months */\\n        _setInitialDistribution(seedAccount, 850000, 10 * month); /* After 10 Months */\\n        _setInitialDistribution(seedAccount, 850000, 11 * month); /* After 11 Months */\\n        _setInitialDistribution(seedAccount, 850000, 12 * month); /* After 12 Months */\\n\\n        /* Private Sale */\\n        _setInitialDistribution(\\n            privateSaleAccount,\\n            2000000,\\n            0 /* No Lock */\\n        );\\n        _setInitialDistribution(privateSaleAccount, 800000, 3 * month); /* After 3 Month */\\n        _setInitialDistribution(privateSaleAccount, 800000, 4 * month); /* After 4 Months */\\n        _setInitialDistribution(privateSaleAccount, 800000, 5 * month); /* After 5 Months */\\n        _setInitialDistribution(privateSaleAccount, 800000, 6 * month); /* After 6 Months */\\n        _setInitialDistribution(privateSaleAccount, 800000, 7 * month); /* After 7 Months */\\n        _setInitialDistribution(privateSaleAccount, 800000, 8 * month); /* After 8 Months */\\n        _setInitialDistribution(privateSaleAccount, 800000, 9 * month); /* After 9 Months */\\n        _setInitialDistribution(privateSaleAccount, 800000, 10 * month); /* After 10 Months */\\n        _setInitialDistribution(privateSaleAccount, 800000, 11 * month); /* After 11 Months */\\n        _setInitialDistribution(privateSaleAccount, 800000, 12 * month); /* After 12 Months */\\n\\n        /* Treasury Reserve Fund */\\n        _setInitialDistribution(treasuryFundAccount, 2500000, 2 * year); /* After Two Years */\\n        _setInitialDistribution(treasuryFundAccount, 2500000, 2 * year + (3 * month)); /* After 3 Month */\\n        _setInitialDistribution(treasuryFundAccount, 2500000, 2 * year + (6 * month)); /* After 6 Month */\\n        _setInitialDistribution(treasuryFundAccount, 2500000, 2 * year + (9 * month)); /* After 9 Month */\\n\\n        /* Liquidity Fund */\\n        _setInitialDistribution(\\n            liquidityAccount,\\n            1000000,\\n            0 /* No Lock */\\n        );\\n        _setInitialDistribution(liquidityAccount, 2000000, 1 * month); /* After 1 Month */\\n        _setInitialDistribution(liquidityAccount, 2000000, 2 * month); /* After 2 Months */\\n        _setInitialDistribution(liquidityAccount, 2000000, 3 * month); /* After 3 Months */\\n\\n        /* Community and Partnerships */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 1 * month); /* After 1 Month */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 2 * month); /* After 2 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 3 * month); /* After 3 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 4 * month); /* After 4 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 5 * month); /* After 5 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 6 * month); /* After 6 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 7 * month); /* After 7 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 8 * month); /* After 8 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 9 * month); /* After 9 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 10 * month); /* After 10 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 11 * month); /* After 11 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 12 * month); /* After 12 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 13 * month); /* After 13 Month */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 14 * month); /* After 14 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 15 * month); /* After 15 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 16 * month); /* After 16 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 17 * month); /* After 17 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 18 * month); /* After 18 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 19 * month); /* After 19 Months */\\n        _setInitialDistribution(communityPartnerAccount, 1000000, 20 * month); /* After 20 Months */\\n\\n        /* Rewards & Loyalty */\\n        _setInitialDistribution(rewardAccount, 1000000, 0); /* No Lock */\\n        _setInitialDistribution(rewardAccount, 1000000, 7 * month); /* After 7 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 8 * month); /* After 8 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 9 * month); /* After 9 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 10 * month); /* After 10 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 11 * month); /* After 11 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 12 * month); /* After 12 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 13 * month); /* After 13 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 14 * month); /* After 14 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 15 * month); /* After 15 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 16 * month); /* After 16 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 17 * month); /* After 17 Month */\\n        _setInitialDistribution(rewardAccount, 1000000, 18 * month); /* After 18 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 19 * month); /* After 19 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 20 * month); /* After 20 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 21 * month); /* After 21 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 22 * month); /* After 22 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 23 * month); /* After 23 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 24 * month); /* After 24 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 25 * month); /* After 25 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 26 * month); /* After 26 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 27 * month); /* After 27 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 28 * month); /* After 28 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 29 * month); /* After 29 Months */\\n        _setInitialDistribution(rewardAccount, 1000000, 30 * month); /* After 30 Months */\\n\\n        /* Team */\\n        _setInitialDistribution(teamAccount, 2000000, 6 * month); /* After 6 Months */\\n        _setInitialDistribution(teamAccount, 2000000, 9 * month); /* After 9 Months */\\n        _setInitialDistribution(teamAccount, 2000000, 12 * month); /* After 12 Months */\\n        _setInitialDistribution(teamAccount, 2000000, 15 * month); /* After 15 Months */\\n        _setInitialDistribution(teamAccount, 2000000, 18 * month); /* After 18 Months */\\n\\n        /* Advisors */\\n        _setInitialDistribution(advisorAccount, 1000000, 3 * month); /* After 3 Months */\\n        _setInitialDistribution(advisorAccount, 1000000, 6 * month); /* After 6 Months */\\n        _setInitialDistribution(advisorAccount, 1000000, 9 * month); /* After 9 Months */\\n        _setInitialDistribution(advisorAccount, 1000000, 12 * month); /* After 12 Months */\\n        _setInitialDistribution(advisorAccount, 1000000, 15 * month); /* After 15 Months */\\n        _setInitialDistribution(advisorAccount, 1000000, 18 * month); /* After 18 Months */\\n        _setInitialDistribution(advisorAccount, 1000000, 21 * month); /* After 21 Months */\\n    }\\n\\n    /******************************************* modifiers go here ********************************************************* */\\n\\n    /******************************************* rescue function ********************************************************* */\\n\\n    function safeGuardAllTokens(address _address) external onlyOwner whenPaused {\\n        /* In case of needed urgency for the sake of contract bug */\\n        require(IERC20(erc20).transfer(_address, IERC20(erc20).balanceOf(address(this))));\\n    }\\n\\n    /******************************************* read state functions go here ********************************************************* */\\n\\n    function getBeneficiaryPoolLength(address beneficary) public view returns (uint256 arrayLneght) {\\n        return _distributions[beneficary].length;\\n    }\\n\\n    function getBeneficiaryPoolInfo(address beneficary, uint256 index)\\n        external\\n        view\\n        returns (\\n            uint256 amountAllocated,\\n            uint256 unlockTime,\\n            bool sent\\n        )\\n    {\\n        amountAllocated = _distributions[beneficary][index].amountAllocated;\\n        unlockTime = _distributions[beneficary][index].unlockTime;\\n        sent = _distributions[beneficary][index].sent;\\n    }\\n\\n    /******************************************* state functions go here ********************************************************* */\\n\\n    /**\\n     * @dev Pauses contract.\\n     *\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     */\\n    function pause() external virtual onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses contract.\\n     *\\n     *\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the owner.\\n     */\\n    function unpause() external virtual onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /**\\n     *   Should allow any address to trigger it, but since the calls are atomic it should do only once per day\\n     */\\n\\n    function triggerTokenSend() external whenNotPaused nonReentrant {\\n        /* TGE has not started */\\n        require(block.timestamp > TGEDate, 'TGE still has not started');\\n\\n        /* Go thru all tokenOwners */\\n        for (uint256 i = 0; i < tokenOwners.length; i++) {\\n            /* Get Address Distribution */\\n            DistributionStep[] memory d = _distributions[tokenOwners[i]];\\n            /* Go thru all distributions array */\\n            for (uint256 j = 0; j < d.length; j++) {\\n                if (!d[j].sent && d[j].unlockTime < block.timestamp) {\\n                    _distributions[tokenOwners[i]][j].sent = true;\\n                    require(IERC20(erc20).transfer(tokenOwners[i], _distributions[tokenOwners[i]][j].amountAllocated));\\n                }\\n            }\\n        }\\n    }\\n\\n    function _setInitialDistribution(\\n        address _address,\\n        uint256 _tokenAmount,\\n        uint256 _unlockDays\\n    ) private {\\n        /* Create DistributionStep Object */\\n        DistributionStep memory distributionStep = DistributionStep(\\n            _tokenAmount * 1 ether,\\n            block.timestamp + _unlockDays,\\n            false\\n        );\\n        /* Attach */\\n        _distributions[_address].push(distributionStep);\\n    }\\n}\\n\",\"keccak256\":\"0x2f4919a43da894143e1f8ffa1a43ed88a75c26a33ff6939fd1687a9604565e4d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.7;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address target,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function transferWithPermit(\\n        address target,\\n        address to,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xe12c92d6b259afef82fea64c656326c5eb19ff7dd1d544be867334edb7acda14\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x61018060405273aa4e7ab6dccc1b673036b6ff78fe8af3402801c6608090815273438a078871c6e24663381cdcc7e85c42a0bd5a9260a052730140d69f99531c10da3094b5e5ca758fa0f3157960c052735debab9052e18f9e54ececdd93ee713d0ed64cbd60e05273907cb9388f6c78d1179b82a2f6cc2ab4ef1534e76101005273cdc0b435861d452a0165dd939a8a31932055b08b6101205273492ec1e39724dfc7f4d2b42083bceb339ebaf18f6101405273801b877ecd8ef397f8560cbfaabd1c910bc8230e61016052620000db90600290600862000b85565b506000600a55348015620000ee57600080fd5b506040516200197c3803806200197c833981016040819052620001119162000c16565b600080546001600160a01b031916339081178255604051909182916000805160206200195c833981519152908290a3506000805460ff60a01b19169055600180556001600160a01b038316158015906200017357506001600160a01b03811615155b620001c55760405162461bcd60e51b815260206004820152601e60248201527f5a65726f2061646472657373657320617265206e6f7420616c6c6f776564000060448201526064015b60405180910390fd5b600c80546001600160a01b0319166001600160a01b038516179055428210620001ef5781620001f1565b425b600a55620001ff81620009df565b60025460035460045460055460065460075460085460095462278d00976301e13380976001600160a01b03918216979082169690821695908216949082169390821692908216911662000258886216e360600062000aec565b6200027488620cf8506200026e8d600362000c72565b62000aec565b6200028a88620cf8506200026e8d600462000c72565b620002a088620cf8506200026e8d600562000c72565b620002b688620cf8506200026e8d600662000c72565b620002cc88620cf8506200026e8d600762000c72565b620002e288620cf8506200026e8d600862000c72565b620002f888620cf8506200026e8d600962000c72565b6200030e88620cf8506200026e8d600a62000c72565b6200032488620cf8506200026e8d600b62000c72565b6200033a88620cf8506200026e8d600c62000c72565b6200034b87621e8480600062000aec565b6200036187620c35006200026e8d600362000c72565b6200037787620c35006200026e8d600462000c72565b6200038d87620c35006200026e8d600562000c72565b620003a387620c35006200026e8d600662000c72565b620003b987620c35006200026e8d600762000c72565b620003cf87620c35006200026e8d600862000c72565b620003e587620c35006200026e8d600962000c72565b620003fb87620c35006200026e8d600a62000c72565b6200041187620c35006200026e8d600b62000c72565b6200042787620c35006200026e8d600c62000c72565b6200043d86622625a06200026e8c600262000c72565b6200046c86622625a0620004538d600362000c72565b620004608d600262000c72565b6200026e919062000c57565b6200048286622625a0620004538d600662000c72565b6200049886622625a0620004538d600962000c72565b620004a985620f4240600062000aec565b620004bf85621e84806200026e8d600162000c72565b620004d585621e84806200026e8d600262000c72565b620004eb85621e84806200026e8d600362000c72565b6200050184620f42406200026e8d600162000c72565b6200051784620f42406200026e8d600262000c72565b6200052d84620f42406200026e8d600362000c72565b6200054384620f42406200026e8d600462000c72565b6200055984620f42406200026e8d600562000c72565b6200056f84620f42406200026e8d600662000c72565b6200058584620f42406200026e8d600762000c72565b6200059b84620f42406200026e8d600862000c72565b620005b184620f42406200026e8d600962000c72565b620005c784620f42406200026e8d600a62000c72565b620005dd84620f42406200026e8d600b62000c72565b620005f384620f42406200026e8d600c62000c72565b6200060984620f42406200026e8d600d62000c72565b6200061f84620f42406200026e8d600e62000c72565b6200063584620f42406200026e8d600f62000c72565b6200064b84620f42406200026e8d601062000c72565b6200066184620f42406200026e8d601162000c72565b6200067784620f42406200026e8d601262000c72565b6200068d84620f42406200026e8d601362000c72565b620006a384620f42406200026e8d601462000c72565b620006b483620f4240600062000aec565b620006ca83620f42406200026e8d600762000c72565b620006e083620f42406200026e8d600862000c72565b620006f683620f42406200026e8d600962000c72565b6200070c83620f42406200026e8d600a62000c72565b6200072283620f42406200026e8d600b62000c72565b6200073883620f42406200026e8d600c62000c72565b6200074e83620f42406200026e8d600d62000c72565b6200076483620f42406200026e8d600e62000c72565b6200077a83620f42406200026e8d600f62000c72565b6200079083620f42406200026e8d601062000c72565b620007a683620f42406200026e8d601162000c72565b620007bc83620f42406200026e8d601262000c72565b620007d283620f42406200026e8d601362000c72565b620007e883620f42406200026e8d601462000c72565b620007fe83620f42406200026e8d601562000c72565b6200081483620f42406200026e8d601662000c72565b6200082a83620f42406200026e8d601762000c72565b6200084083620f42406200026e8d601862000c72565b6200085683620f42406200026e8d601962000c72565b6200086c83620f42406200026e8d601a62000c72565b6200088283620f42406200026e8d601b62000c72565b6200089883620f42406200026e8d601c62000c72565b620008ae83620f42406200026e8d601d62000c72565b620008c483620f42406200026e8d601e62000c72565b620008da82621e84806200026e8d600662000c72565b620008f082621e84806200026e8d600962000c72565b6200090682621e84806200026e8d600c62000c72565b6200091c82621e84806200026e8d600f62000c72565b6200093282621e84806200026e8d601262000c72565b6200094881620f42406200026e8d600362000c72565b6200095e81620f42406200026e8d600662000c72565b6200097481620f42406200026e8d600962000c72565b6200098a81620f42406200026e8d600c62000c72565b620009a081620f42406200026e8d600f62000c72565b620009b681620f42406200026e8d601262000c72565b620009cc81620f42406200026e8d601562000c72565b5050505050505050505050505062000caa565b6000546001600160a01b0316331462000a3b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001bc565b6001600160a01b03811662000aa25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001bc565b600080546040516001600160a01b03808516939216916000805160206200195c83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000604051806060016040528084670de0b6b3a764000062000b0f919062000c72565b815260200162000b20844262000c57565b8152600060209182018190526001600160a01b03969096168652600b81526040808720805460018082018355918952978390208451600390990201978855918301519187019190915501516002909401805460ff191694151594909417909355505050565b826008810192821562000bd0579160200282015b8281111562000bd057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000b99565b5062000bde92915062000be2565b5090565b5b8082111562000bde576000815560010162000be3565b80516001600160a01b038116811462000c1157600080fd5b919050565b60008060006060848603121562000c2c57600080fd5b62000c378462000bf9565b92506020840151915062000c4e6040850162000bf9565b90509250925092565b6000821982111562000c6d5762000c6d62000c94565b500190565b600081600019048311821515161562000c8f5762000c8f62000c94565b500290565b634e487b7160e01b600052601160045260246000fd5b610ca28062000cba6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638456cb591161008c578063cb12872811610066578063cb12872814610197578063d1b002cf146101ae578063f2fde38b146101d7578063f8a14f46146101ea57600080fd5b80638456cb591461016b5780638da5cb5b14610173578063b90c72ae1461018457600080fd5b80633dc37c6b146100d45780633f4ba83a146101095780635c975abb14610113578063715018a614610130578063785e9e861461013857806383e2ad6314610163575b600080fd5b6100e76100e2366004610b22565b6101fd565b6040805193845260208401929092521515908201526060015b60405180910390f35b6101116102e2565b005b600054600160a01b900460ff166040519015158152602001610100565b610111610348565b600c5461014b906001600160a01b031681565b6040516001600160a01b039091168152602001610100565b6101116103bc565b610111610741565b6000546001600160a01b031661014b565b610111610192366004610b00565b61079d565b6101a0600a5481565b604051908152602001610100565b6101a06101bc366004610b00565b6001600160a01b03166000908152600b602052604090205490565b6101116101e5366004610b00565b6108ff565b61014b6101f8366004610b6e565b6109e9565b6001600160a01b0382166000908152600b602052604081208054829182918590811061022b5761022b610c56565b9060005260206000209060030201600001549250600b6000866001600160a01b03166001600160a01b03168152602001908152602001600020848154811061027557610275610c56565b9060005260206000209060030201600101549150600b6000866001600160a01b03166001600160a01b0316815260200190815260200160002084815481106102bf576102bf610c56565b600091825260209091206002600390920201015492959194505060ff9091169150565b6000546001600160a01b031633146103155760405162461bcd60e51b815260040161030c90610bf8565b60405180910390fd5b600054600160a01b900460ff1661033e5760405162461bcd60e51b815260040161030c90610ba0565b610346610a09565b565b6000546001600160a01b031633146103725760405162461bcd60e51b815260040161030c90610bf8565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600054600160a01b900460ff16156103e65760405162461bcd60e51b815260040161030c90610bce565b600260015414156104395760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161030c565b6002600155600a54421161048f5760405162461bcd60e51b815260206004820152601960248201527f544745207374696c6c20686173206e6f74207374617274656400000000000000604482015260640161030c565b60005b600881101561073a576000600b6000600284600881106104b4576104b4610c56565b01546001600160a01b0316815260208082019290925260409081016000908120805483518186028101860190945280845292939092919084015b8282101561053f5760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015460ff1615159183019190915290835290920191016104ee565b50505050905060005b81518110156107255781818151811061056357610563610c56565b60200260200101516040015115801561059857504282828151811061058a5761058a610c56565b602002602001015160200151105b15610713576001600b6000600286600881106105b6576105b6610c56565b01546001600160a01b0316815260208101919091526040016000208054839081106105e3576105e3610c56565b600091825260209091206003909102016002908101805460ff191692151592909217909155600c546001600160a01b03169063a9059cbb90856008811061062c5761062c610c56565b01546001600160a01b0316600b60006002886008811061064e5761064e610c56565b01546001600160a01b03168152602081019190915260400160002080548590811061067b5761067b610c56565b60009182526020909120600390910201546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106d257600080fd5b505af11580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a9190610b4c565b61071357600080fd5b8061071d81610c2d565b915050610548565b5050808061073290610c2d565b915050610492565b5060018055565b6000546001600160a01b0316331461076b5760405162461bcd60e51b815260040161030c90610bf8565b600054600160a01b900460ff16156107955760405162461bcd60e51b815260040161030c90610bce565b610346610a7f565b6000546001600160a01b031633146107c75760405162461bcd60e51b815260040161030c90610bf8565b600054600160a01b900460ff166107f05760405162461bcd60e51b815260040161030c90610ba0565b600c546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561083d57600080fd5b505afa158015610851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108759190610b87565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156108bb57600080fd5b505af11580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f39190610b4c565b6108fc57600080fd5b50565b6000546001600160a01b031633146109295760405162461bcd60e51b815260040161030c90610bf8565b6001600160a01b03811661098e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161030c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600281600881106109f957600080fd5b01546001600160a01b0316905081565b600054600160a01b900460ff16610a325760405162461bcd60e51b815260040161030c90610ba0565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff1615610aa95760405162461bcd60e51b815260040161030c90610bce565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a623390565b80356001600160a01b0381168114610afb57600080fd5b919050565b600060208284031215610b1257600080fd5b610b1b82610ae4565b9392505050565b60008060408385031215610b3557600080fd5b610b3e83610ae4565b946020939093013593505050565b600060208284031215610b5e57600080fd5b81518015158114610b1b57600080fd5b600060208284031215610b8057600080fd5b5035919050565b600060208284031215610b9957600080fd5b5051919050565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000600019821415610c4f57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220847b89049c71c0da371e5dee791669819dd985bcd7381d875ff83f0c7e2a519e64736f6c634300080700338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638456cb591161008c578063cb12872811610066578063cb12872814610197578063d1b002cf146101ae578063f2fde38b146101d7578063f8a14f46146101ea57600080fd5b80638456cb591461016b5780638da5cb5b14610173578063b90c72ae1461018457600080fd5b80633dc37c6b146100d45780633f4ba83a146101095780635c975abb14610113578063715018a614610130578063785e9e861461013857806383e2ad6314610163575b600080fd5b6100e76100e2366004610b22565b6101fd565b6040805193845260208401929092521515908201526060015b60405180910390f35b6101116102e2565b005b600054600160a01b900460ff166040519015158152602001610100565b610111610348565b600c5461014b906001600160a01b031681565b6040516001600160a01b039091168152602001610100565b6101116103bc565b610111610741565b6000546001600160a01b031661014b565b610111610192366004610b00565b61079d565b6101a0600a5481565b604051908152602001610100565b6101a06101bc366004610b00565b6001600160a01b03166000908152600b602052604090205490565b6101116101e5366004610b00565b6108ff565b61014b6101f8366004610b6e565b6109e9565b6001600160a01b0382166000908152600b602052604081208054829182918590811061022b5761022b610c56565b9060005260206000209060030201600001549250600b6000866001600160a01b03166001600160a01b03168152602001908152602001600020848154811061027557610275610c56565b9060005260206000209060030201600101549150600b6000866001600160a01b03166001600160a01b0316815260200190815260200160002084815481106102bf576102bf610c56565b600091825260209091206002600390920201015492959194505060ff9091169150565b6000546001600160a01b031633146103155760405162461bcd60e51b815260040161030c90610bf8565b60405180910390fd5b600054600160a01b900460ff1661033e5760405162461bcd60e51b815260040161030c90610ba0565b610346610a09565b565b6000546001600160a01b031633146103725760405162461bcd60e51b815260040161030c90610bf8565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600054600160a01b900460ff16156103e65760405162461bcd60e51b815260040161030c90610bce565b600260015414156104395760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161030c565b6002600155600a54421161048f5760405162461bcd60e51b815260206004820152601960248201527f544745207374696c6c20686173206e6f74207374617274656400000000000000604482015260640161030c565b60005b600881101561073a576000600b6000600284600881106104b4576104b4610c56565b01546001600160a01b0316815260208082019290925260409081016000908120805483518186028101860190945280845292939092919084015b8282101561053f5760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015460ff1615159183019190915290835290920191016104ee565b50505050905060005b81518110156107255781818151811061056357610563610c56565b60200260200101516040015115801561059857504282828151811061058a5761058a610c56565b602002602001015160200151105b15610713576001600b6000600286600881106105b6576105b6610c56565b01546001600160a01b0316815260208101919091526040016000208054839081106105e3576105e3610c56565b600091825260209091206003909102016002908101805460ff191692151592909217909155600c546001600160a01b03169063a9059cbb90856008811061062c5761062c610c56565b01546001600160a01b0316600b60006002886008811061064e5761064e610c56565b01546001600160a01b03168152602081019190915260400160002080548590811061067b5761067b610c56565b60009182526020909120600390910201546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156106d257600080fd5b505af11580156106e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070a9190610b4c565b61071357600080fd5b8061071d81610c2d565b915050610548565b5050808061073290610c2d565b915050610492565b5060018055565b6000546001600160a01b0316331461076b5760405162461bcd60e51b815260040161030c90610bf8565b600054600160a01b900460ff16156107955760405162461bcd60e51b815260040161030c90610bce565b610346610a7f565b6000546001600160a01b031633146107c75760405162461bcd60e51b815260040161030c90610bf8565b600054600160a01b900460ff166107f05760405162461bcd60e51b815260040161030c90610ba0565b600c546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561083d57600080fd5b505afa158015610851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108759190610b87565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156108bb57600080fd5b505af11580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f39190610b4c565b6108fc57600080fd5b50565b6000546001600160a01b031633146109295760405162461bcd60e51b815260040161030c90610bf8565b6001600160a01b03811661098e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161030c565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600281600881106109f957600080fd5b01546001600160a01b0316905081565b600054600160a01b900460ff16610a325760405162461bcd60e51b815260040161030c90610ba0565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff1615610aa95760405162461bcd60e51b815260040161030c90610bce565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a623390565b80356001600160a01b0381168114610afb57600080fd5b919050565b600060208284031215610b1257600080fd5b610b1b82610ae4565b9392505050565b60008060408385031215610b3557600080fd5b610b3e83610ae4565b946020939093013593505050565b600060208284031215610b5e57600080fd5b81518015158114610b1b57600080fd5b600060208284031215610b8057600080fd5b5035919050565b600060208284031215610b9957600080fd5b5051919050565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000600019821415610c4f57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220847b89049c71c0da371e5dee791669819dd985bcd7381d875ff83f0c7e2a519e64736f6c63430008070033",
  "devdoc": {
    "author": "Eman Herawy, StartFi Team",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses contract. Requirements: - the caller must be the owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses contract. Requirements: - the caller must be the owner."
      }
    },
    "title": "StartFiTokenDistribution",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "triggerTokenSend()": {
        "notice": "Should allow any address to trigger it, but since the calls are atomic it should do only once per day"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 565,
        "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 685,
        "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 770,
        "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7657,
        "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
        "label": "tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)8_storage"
      },
      {
        "astId": 7660,
        "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
        "label": "TGEDate",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7666,
        "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
        "label": "_distributions",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_struct(DistributionStep)7675_storage)dyn_storage)"
      },
      {
        "astId": 7668,
        "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
        "label": "erc20",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)8_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[8]",
        "numberOfBytes": "256"
      },
      "t_array(t_struct(DistributionStep)7675_storage)dyn_storage": {
        "base": "t_struct(DistributionStep)7675_storage",
        "encoding": "dynamic_array",
        "label": "struct StartFiTokenDistribution.DistributionStep[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(DistributionStep)7675_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StartFiTokenDistribution.DistributionStep[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(DistributionStep)7675_storage)dyn_storage"
      },
      "t_struct(DistributionStep)7675_storage": {
        "encoding": "inplace",
        "label": "struct StartFiTokenDistribution.DistributionStep",
        "members": [
          {
            "astId": 7670,
            "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
            "label": "amountAllocated",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7672,
            "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7674,
            "contract": "contracts/StartFiTokenDistribution.sol:StartFiTokenDistribution",
            "label": "sent",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}